/*
 * Copyright (C) 2021 - 2022, SanteSuite Inc. and the SanteSuite Contributors (See NOTICE.md for full copyright notices)
 * Copyright (C) 2019 - 2021, Fyfe Software Inc. and the SanteSuite Contributors
 * Portions Copyright (C) 2015-2018 Mohawk College of Applied Arts and Technology
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * User: fyfej
 * Date: 2022-9-7
 */
using SanteDB.OrmLite.Attributes;
using System;
using System.Collections.Generic;
using System.Text;

namespace SanteDB.Persistence.Data.Model.Security
{
    /// <summary>
    /// Represents a mapping in the database between a certificate and an identity
    /// </summary>
    [Table("sec_cer_tbl")]
    public class DbCertificateMapping : DbNonVersionedBaseData
    {

        /// <summary>
        /// Gets or sets the primary key
        /// </summary>
        [AutoGenerated, PrimaryKey, Column("cer_id")]
        public override Guid Key { get; set; }

        /// <summary>
        /// Gets or set sthe thumbprint for the certificate for lookup
        /// </summary>
        [Column("x509_thb")]
        public String X509Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets the public key data
        /// </summary>
        [Column("x509_pk")]
        public Byte[] X509PublicKeyData { get; set; }

        /// <summary>
        /// Gets or sets the expiration date of the certificate
        /// </summary>
        [Column("exp_utc")]
        public DateTimeOffset Expiration { get; set; }

        /// <summary>
        /// Gets or sets the user identity this is mapped to
        /// </summary>
        [Column("usr_id"), ForeignKey(typeof(DbSecurityUser), nameof(Key))]
        public Guid? SecurityUserKey { get; set; }

        /// <summary>
        /// Gets or sets the application identity this is mapped to if any
        /// </summary>
        [Column("app_id"), ForeignKey(typeof(DbSecurityApplication), nameof(Key))]
        public Guid? SecurityApplicationKey { get; set; }

        /// <summary>
        /// Gets or sets the device that this identity is mapped to
        /// </summary>
        [Column("dev_id"), ForeignKey(typeof(DbSecurityDevice), nameof(Key))]
        public Guid? SecurityDeviceKey { get; set; }

    }
}
