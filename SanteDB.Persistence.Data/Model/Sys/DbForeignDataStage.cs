/*
 * Copyright (C) 2021 - 2023, SanteSuite Inc. and the SanteSuite Contributors (See NOTICE.md for full copyright notices)
 * Copyright (C) 2019 - 2021, Fyfe Software Inc. and the SanteSuite Contributors
 * Portions Copyright (C) 2015-2018 Mohawk College of Applied Arts and Technology
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you 
 * may not use this file except in compliance with the License. You may 
 * obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.
 * 
 * User: fyfej
 * Date: 2023-5-19
 */
using SanteDB.Core.Data.Import;
using SanteDB.OrmLite.Attributes;
using System;

namespace SanteDB.Persistence.Data.Model.Sys
{
    /// <summary>
    /// Foreign data stage
    /// </summary>
    [Table("FD_STG_SYSTBL")]
    public class DbForeignDataStage : DbNonVersionedBaseData
    {
        /// <summary>
        /// Gets or sets the the key of the foreign data element
        /// </summary>
        [Column("FD_ID"), PrimaryKey, NotNull, AutoGenerated]
        public override Guid Key { get; set; }

        /// <summary>
        /// Gets or sets the name of the staged data
        /// </summary>
        [Column("NAME"), NotNull]
        public String Name { get; set; }

        /// <summary>
        /// Gets or sets the name of the staged data
        /// </summary>
        [Column("DESCR"), NotNull]
        public String Description { get; set; }

        /// <summary>
        /// Gets or sets the status
        /// </summary>
        [Column("STS_CS"), NotNull]
        public ForeignDataStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the foreign data map to use
        /// </summary>
        [Column("FD_MAP_ID"), NotNull]
        public Guid ForeignDataMapKey { get; set; }

        /// <summary>
        /// Gets or sets the source stream key
        /// </summary>
        [Column("SRC_STR_ID"), NotNull]
        public Guid SourceStreamKey { get; set; }

        /// <summary>
        /// Gets or sets the reject stream key
        /// </summary>
        [Column("REJ_STR_ID")]
        public Guid? RejectStreamKey { get; set; }
    }

    /// <summary>
    /// Foreign data staging parameters
    /// </summary>
    [Table("FD_STG_PARM_SYSTBL")]
    public class DbForeignDataStageParameter : DbAssociation
    {
        /// <summary>
        /// Gets the identifier key
        /// </summary>
        [PrimaryKey, Column("FD_PARM_ID"), NotNull, AutoGenerated]
        public override Guid Key { get; set; }

        /// <summary>
        /// Foreign data stage
        /// </summary>
        [Column("FD_ID"), ForeignKey(typeof(DbForeignDataStage), nameof(DbForeignDataStage.Key))]
        public override Guid SourceKey { get; set; }

        /// <summary>
        /// Gets the parameter name
        /// </summary>
        [Column("PARM_NAME"), NotNull]
        public String Name { get; set; }

        /// <summary>
        /// Gets the parameter value
        /// </summary>
        [Column("PARM_VAL"), NotNull]
        public String Value { get; set; }
    }
}
