/** 
 * <feature scope="SanteDB.Persistence.Data" id="0-001" name="Core Schema" invariantName="sqlite">
 *	<summary>Install Schema</summary>
 *	<remarks>Installs the core SanteDB schema including tables, views, and sequences needed for execution</remarks>
 *	<isInstalled mustSucceed="true">SELECT EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='SEC_USR_TBL')</isInstalled>
 *	<url>https://help.santesuite.org/ops/santedb/rim</url>
 * </feature>
 */

-- SECURITY USER CLASS CODES. THESE ARE USED TO IDENTIFY THE USER CLASSES AND ARE USED
-- TO DIFFERENTIATE THE CLASSES OF USERS
CREATE TABLE SEC_USR_CLS_CDTBL (
    CLS_ID BLOB(16) NOT NULL ,
    MNEMONIC VARCHAR(32) NOT NULL,
    CONSTRAINT PK_SEC_USR_CLS_CDTBL PRIMARY KEY (CLS_ID)
);



CREATE TABLE GEO_TBL (
	GEO_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	LAT REAL NOT NULL,
	LNG REAL NOT NULL,
	CONSTRAINT PK_
	PRIMARY KEY (GEO_ID)
);


-- SECURITY PROVENANCE TABLE
-- THIS TABLE IS USED TO RECORD THE PROVENANCE OF AN OBJECT AT THE TIME OF CREATION / UPDATION / ETC.as
CREATE TABLE SEC_PROV_TBL (
	PROV_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- THE ID OF THE PROVENANCE EVENT
	USR_ID BLOB(16), -- THE USER IDENTITY OF THE EVENT
	DEV_ID BLOB(16), -- THE DEVICE ID OF THE EVENT
	APP_ID BLOB(16) NOT NULL, -- THE APPLICATION THE USER OR DEVICE WAS USING
	SES_ID BLOB(16), -- THE SESSION OF THE EVENT IF APPLICABLE - NB THE SESSION MECHANISM MAY NOT BE IN THIS DATABASE SO THERE IS NO FK TO THE SESSION IDENTIFIER
	EST_UTC BIGINT DEFAULT (unixepoch()) NOT NULL , -- THE INTEGER WHEN THE TRANSACTION BEGAN ON THE SERVER (REGARDLESS OF WHEN THE DEVICE SAID THE CREATION TIME WAS)
	EXT_ID BLOB(16),
	EXT_TYP CHAR(1),
	CONSTRAINT PK_SEC_PROV_TBL PRIMARY KEY (PROV_ID),
	CONSTRAINT CK_SEC_PROV_ORGN CHECK (USR_ID IS NOT NULL OR DEV_ID IS NOT NULL OR SES_ID IS NOT NULL)
);


-- SECURITY USER TABLE IS USED BY THE SECURITY SUBSYSTEM AND IS OFTEN
-- LINKED TO A USER ENTITY, DEVICE, OR OTHER ENTITY IN THE CLINICAL 
-- DATA MODEL
CREATE TABLE SEC_USR_TBL (
    USR_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE USER
    CLS_ID BLOB(16) DEFAULT x'422B93334B6F594688496ACA54139D8E' NOT NULL, -- THE USER CLASSIFICATION
    USR_NAME VARCHAR(64) NOT NULL, -- THE USERNAME OF THE USER
    EMAIL VARCHAR(256), -- THE EMAIL ADDRESS OF THE USER
    EMAIL_CNF BOOLEAN DEFAULT FALSE NOT NULL, -- WHETHER THE USERS EMAIL ADDRESS HAS BEEN CONFIRMED
    PHN_NUM VARCHAR(128), -- THE PRIMARY CONTACT NUMBER FOR SECURITY PURPOSES
    PHN_CNF BOOLEAN DEFAULT FALSE NOT NULL, -- INDICATES WHETHER THE SECURITY PHONE NUMBER HAS BEEN CONFIRMED
    TFA_ENABLED BOOLEAN DEFAULT FALSE NOT NULL, -- INDICATES WHETHER TWO FACTOR AUTHENTICATION IS REQUIRED FOR THIS ACCOUNT
    LOCKED INTEGER, -- TRUE IF THE ACCOUNT HAS BEEN LOCKED
    PASSWD VARCHAR(128) NOT NULL, -- THE PASSWORD OF THE USER
    SEC_STMP VARCHAR(128) NOT NULL, -- THE SECURITY STAMP WHICH IS USED AS A VERIFICATION THAT THE USER INFORMATION HAS CHANGED
    FAIL_LOGIN INT DEFAULT 0 NOT NULL, -- THE NUMBER OF TIMES THAT THE USER HAS FAILED TO LOGIN
    LAST_LOGIN_UTC BIGINT, -- THE LAST TIME THAT THE USER SUCCESSFULLY LOGGED IN
    CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT THE USER ACCOUNT WAS CREATED
    CRT_PROV_ID BLOB(16), -- THE USER WHICH CREATED THIS USER ACCOUNT
    OBSLT_UTC BIGINT, -- THE TIME THAT THE USER RECORD WAS OBSOLETED
    OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THIS USER ACCOUNT
    UPD_UTC BIGINT, -- THE TIME WHEN THIS USER RECORD WAS LAST UPDATED
    UPD_PROV_ID BLOB(16), -- THE USER ID WHICH WAS RESPONSIBLE FOR THE UPDATE
    TFA_MECH BLOB(16), -- THE TFA MECHANISM
	PWD_EXP_UTC BIGINT, 
    CONSTRAINT PK_SEC_USR PRIMARY KEY (USR_ID),
    CONSTRAINT FK_SEC_USR_OBSLT_PROV_ID FOREIGN KEY(OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT FK_SEC_USR_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT FK_SEC_USR_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT CK_SEC_USR_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
    CONSTRAINT CK_SEC_USR_UPD_USR CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL)),
    CONSTRAINT FK_SEC_USR_USR_CLS_ID FOREIGN KEY (CLS_ID) REFERENCES SEC_USR_CLS_CDTBL(CLS_ID)
);


-- CREATE UNIQUE INDEX ON THE LOWER USER NAME
CREATE UNIQUE INDEX SEC_USR_NAME_IDX ON SEC_USR_TBL(LOWER(USR_NAME)) WHERE OBSLT_UTC IS NULL;

CREATE INDEX SEC_USR_NAME_PWD_IDX ON SEC_USR_TBL(LOWER(USR_NAME), PASSWD);


-- SECURITY USER CLAIMS
CREATE TABLE SEC_USR_CLM_TBL (
    CLM_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE ID FOR THE CLAIM
    USR_ID BLOB(16) NOT NULL, -- THE USER TO WHICH THE CLAIM BELONGS
    CLM_TYP VARCHAR(128) NOT NULL, -- THE TYPE OF CLAIM
    CLM_VAL VARCHAR(128) NOT NULL, -- THE VALUE OF THE CLAIM
    EXP_UTC BIGINT, -- EXPIRATION OF THE CLAIM
    CONSTRAINT PK_SEC_USR_CLM_TBL PRIMARY KEY (CLM_ID),
    CONSTRAINT FK_SEC_USR_CLM_SEC_USR_TBL FOREIGN KEY (USR_ID) REFERENCES SEC_USR_TBL(USR_ID)
);


CREATE INDEX SEC_USR_CLM_USR_ID_IDX ON SEC_USR_CLM_TBL(USR_ID);


-- LINK TO EXTERNAL IDENTIFIER TOKENS
CREATE TABLE SEC_USR_EXTRN_LGN_TBL (
    LGN_PVDR VARCHAR(128) NOT NULL, -- THE PROVIDER (GMAIL, LIVE, ETC.)
    PVD_KEY VARCHAR(128) NOT NULL, -- THE PROVIDER KEY
    USR_ID BLOB(16) NOT NULL, -- THE USER TO WHICH THE LOGIN PROVIDES
    CONSTRAINT PK_SEC_USR_EXTRN_LGN PRIMARY KEY (LGN_PVDR, USR_ID),
    CONSTRAINT FK_SEC_USR_EXTRN_LGN_USR_ID FOREIGN KEY (USR_ID) REFERENCES SEC_USR_TBL(USR_ID)
);


-- SECURITY ROLES ARE USED TO GROU POLICIES AND ACTIONS AS WELL AS ACCESS TO 
-- PARTICULAR POS APPLICATIONS BASED ON POLICY
CREATE TABLE SEC_ROL_TBL (
    ROL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE ID OF THE ROLE
    ROL_NAME VARCHAR(196) NOT NULL, -- THE NAME OF THE ROLE
    DESCR VARCHAR(196), -- THE DESCRIPTION OF THE ROLE
    CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE CREATION TIME OF THE ROLE
    CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATE THE ROLE
    OBSLT_UTC BIGINT, -- THE TIME THAT THE ROLE WAS OBSOLETED
    OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE ROLE
    UPD_UTC BIGINT, -- THE TIME WHEN THE ROLE WAS UPDATED
    UPD_PROV_ID BLOB(16), -- THE USER WHICH UPDATED THE ROLE
    CONSTRAINT PK_SEC_ROL_TBL PRIMARY KEY (ROL_ID),
    CONSTRAINT FK_SEC_ROL_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT FK_SEC_ROL_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT FK_SEC_ROL_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT CK_SEC_ROL_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
    CONSTRAINT CK_SEC_ROL_UPD_USR CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
);


-- UNIQUE INDEX ON NAME
CREATE UNIQUE INDEX SEC_ROL_ROL_NAME_IDX ON SEC_ROL_TBL(LOWER(ROL_NAME)) WHERE OBSLT_UTC IS NULL;


-- SECURITY USER TO ROLE ASSOCIATION
CREATE TABLE SEC_USR_ROL_ASSOC_TBL (
    USR_ID BLOB(16) NOT NULL, -- THE IDENTIFIER OF THE USER
    ROL_ID BLOB(16) NOT NULL, -- THE IDENTIFIER OF THE ROLE
    CONSTRAINT PK_SEC_ROL_ASSOC_TBL PRIMARY KEY (USR_ID, ROL_ID),
    CONSTRAINT FK_SEC_ROL_ASSOC_USR_ID FOREIGN KEY (USR_ID) REFERENCES SEC_USR_TBL(USR_ID),
    CONSTRAINT FK_SEC_ROL_ASSOC_ROL_ID FOREIGN KEY (ROL_ID) REFERENCES SEC_ROL_TBL(ROL_ID)
);


CREATE INDEX SEC_USR_ROL_ASSOC_USR_ID_IDX ON SEC_USR_ROL_ASSOC_TBL(USR_ID);

CREATE INDEX SEC_USR_ROL_ASSOC_ROL_ID_IDX ON SEC_USR_ROL_ASSOC_TBL(ROL_ID);


-- POLICY TABLE (SEE OIZ DESIGN DOCUMENTATION)
CREATE TABLE SEC_POL_TBL (
    POL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- THE UNIQUE IDENTIFIER OF THE POLICY
    OID VARCHAR(128) NOT NULL, -- THE OID FOR THE POLICY
    POL_NAME VARCHAR(128) NOT NULL, -- THE NAME OF THE POLICY
    HDLR_CLS VARCHAR(196), -- THE HANDLER CLASS
    IS_PUB BOOLEAN DEFAULT FALSE NOT NULL, -- WHETHER THE POLICY IS INTERNAL OR SHOULD BE DISCLOSED
    IS_ELEV BOOLEAN DEFAULT FALSE NOT NULL, -- WHETHER THE POLICY CAN BE ELEVATED OVER
    CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE DATE THE POLICY WAS CREATED
    CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER THAT CREATED THE ROLE
    OBSLT_UTC BIGINT, -- THE DATE THE POLICY WAS OBSOLETED
    OBSLT_PROV_ID BLOB(16), -- THE OBSOLTION USER
    CONSTRAINT PK_SEC_POL_TBL PRIMARY KEY (POL_ID),
    CONSTRAINT FK_SEC_POL_CRT_UTC FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
    CONSTRAINT FK_SEC_POL_OBSLT_UTC FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID)
);


CREATE UNIQUE INDEX SEC_OID_IDX ON SEC_POL_TBL(OID) WHERE OBSLT_UTC IS NULL;


-- SECURITY ROLE TO POLICY ASSOCIATIVE ENTITY
CREATE TABLE SEC_ROL_POL_ASSOC_TBL (
	SEC_POL_INST_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE IDENTIFIER
	ROL_ID BLOB(16) NOT NULL, -- THE ROLE TO WHICH THE POLICY APPLIES
	POL_ID BLOB(16) NOT NULL, -- POLICY IDENTIFIER
	POL_ACT INT DEFAULT 0 NOT NULL CHECK (POL_ACT < 3), -- POLICY ACTIONS
	CONSTRAINT PK_SEC_POL_ROL_ASSOC PRIMARY KEY (SEC_POL_INST_ID),
	CONSTRAINT FK_SEC_POL_ROL_ASSOC_ROL_ID FOREIGN KEY (ROL_ID) REFERENCES SEC_ROL_TBL(ROL_ID),
	CONSTRAINT FK_SEC_POL_ROL_ASSOC_POL_ID FOREIGN KEY (POL_ID) REFERENCES SEC_POL_TBL(POL_ID)
);


CREATE INDEX SEC_POL_ROL_ASSOC_ROL_ID_IDX ON SEC_ROL_POL_ASSOC_TBL(ROL_ID);

CREATE UNIQUE INDEX SEC_POL_ROL_ASSOC_POL_ROL_IDX ON SEC_ROL_POL_ASSOC_TBL(ROL_ID, POL_ID);

CREATE INDEX SEC_ROL_POL_ASSOC_POL_IDX ON SEC_ROL_POL_ASSOC_TBL(POL_ID);


-- SECURITY DEVICE WHICH IS HOW DEVICES AUTHENTICATE THEMSELVES
CREATE TABLE SEC_DEV_TBL (
	DEV_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE IDENTIFIER FOR THE DEVICE
	DEV_SCRT VARCHAR(64) NOT NULL, -- THE SECRET OF THE DEVICE (EX: X509 THUMB)
	DEV_PUB_ID VARCHAR(64) NOT NULL, -- THE PUBLIC IDENTIIFER
	LOCKED INTEGER, -- LOCKOUT PERIOD
	FAIL_AUTH INTEGER, -- FAILED AUTHENTICATION ATTEMPTS
	LAST_AUTH_UTC BIGINT, -- THE LAST AUTHETNICATION TIME
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE DATE THE DEVICE WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED
	UPD_UTC BIGINT, -- THE DATE THE DEVICE WAS CREATED
	UPD_PROV_ID BLOB(16), -- THE USER WHICH UPDATED THE DEVICE
	OBSLT_UTC BIGINT, -- THE TIME THAT THE DEVICE WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETD THE DEVICE
	RPLC_DEV_ID BLOB(16), -- THE DEVICE THAT THIS DEVICE REPLACES.
	CONSTRAINT PK_SEC_DEV_TBL PRIMARY KEY (DEV_ID),
	CONSTRAINT FK_SEC_DEV_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_SEC_DEV_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_SEC_DEV_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_SEC_DEV_RPLC_DEV_ID FOREIGN KEY (RPLC_DEV_ID) REFERENCES SEC_DEV_TBL(DEV_ID),
	CONSTRAINT CK_SEC_DEV_UPD_USR CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL)),
	CONSTRAINT CK_SEC_DEV_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);

CREATE UNIQUE INDEX SEC_DEV_PUB_ID_IDX ON SEC_DEV_TBL(LOWER(DEV_PUB_ID)) WHERE OBSLT_UTC IS NULL;


CREATE INDEX SEC_DEV_DEV_SCRT_IDX ON SEC_DEV_TBL(DEV_SCRT);


-- SECURITY DEV CLAIMS
CREATE TABLE SEC_DEV_CLM_TBL (
    CLM_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE ID FOR THE CLAIM
    DEV_ID BLOB(16) NOT NULL, -- THE DEV TO WHICH THE CLAIM BELONGS
    CLM_TYP VARCHAR(128) NOT NULL, -- THE TYPE OF CLAIM
    CLM_VAL VARCHAR(128) NOT NULL, -- THE VALUE OF THE CLAIM
    EXP_UTC BIGINT, -- EXPIRATION OF THE CLAIM
    CONSTRAINT PK_SEC_DEV_CLM_TBL PRIMARY KEY (CLM_ID),
    CONSTRAINT FK_SEC_DEV_CLM_SEC_DEV_TBL FOREIGN KEY (DEV_ID) REFERENCES SEC_DEV_TBL(DEV_ID)
);


CREATE INDEX SEC_DEV_CLM_DEV_ID_IDX ON SEC_DEV_CLM_TBL(DEV_ID);



-- SECURITY APPLICATION WHICH IS HOW APPLICATIONS AUTHENTICATE THEMSELVES
CREATE TABLE SEC_APP_TBL (
	APP_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE IDENTIIFER FOR THE DEV
	APP_PUB_ID VARCHAR(64) NOT NULL, -- THE PUBLIC IDENTIFIER FOR THE APP
	APP_SCRT VARCHAR(64) NOT NULL, -- THE APPLICATION SECRET
	LOCKED INTEGER, -- LOCKOUT PERIOD
	FAIL_AUTH INTEGER, -- FAILED AUTHENTICATION ATTEMPTS
	LAST_AUTH_UTC BIGINT, -- THE LAST AUTHETNICATION TIME
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE CREATION TIME OF THE APP
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH IS RESPONSIBLE FOR THE CREATION
	UPD_UTC BIGINT, -- THE CREATION TIME OF THE APP
	UPD_PROV_ID BLOB(16), -- THE USER WHICH IS RESPONSIBLE FOR THE CREATION OF THE APP
	OBSLT_UTC BIGINT, -- OBSOLETION TIME
	OBSLT_PROV_ID BLOB(16), -- THE OBSOLETION USER
	RPLC_APP_ID BLOB(16), -- THE APPLICATION WICH THIS APPLICATION REPLACES
	SGN_KEY BLOB, -- THE KEY USED TO SIGN DATA
	CONSTRAINT PK_SEC_APP_TBL PRIMARY KEY (APP_ID),
	CONSTRAINT FK_SEC_APP_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_SEC_APP_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_SEC_APP_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_SEC_APP_RPLC_APP_ID FOREIGN KEY (RPLC_APP_ID) REFERENCES SEC_APP_TBL(APP_ID),
	CONSTRAINT CK_SEC_APP_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL)),
	CONSTRAINT CK_SEC_APP_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);


CREATE UNIQUE INDEX SEC_APP_APP_PUB_ID_IDX ON SEC_APP_TBL(LOWER(APP_PUB_ID)) WHERE OBSLT_UTC IS NULL;

CREATE INDEX SEC_APP_APP_SCRT_IDX ON SEC_APP_TBL(APP_SCRT);


-- SECURITY USER CLAIMS
CREATE TABLE SEC_APP_CLM_TBL (
    CLM_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- UNIQUE ID FOR THE CLAIM
    APP_ID BLOB(16) NOT NULL, -- THE USER TO WHICH THE CLAIM BELONGS
    CLM_TYP VARCHAR(128) NOT NULL, -- THE TYPE OF CLAIM
    CLM_VAL VARCHAR(128) NOT NULL, -- THE VALUE OF THE CLAIM
    EXP_UTC BIGINT, -- EXPIRATION OF THE CLAIM
    CONSTRAINT PK_SEC_APP_CLM_TBL PRIMARY KEY (CLM_ID),
    CONSTRAINT FK_SEC_APP_CLM_SEC_APP_TBL FOREIGN KEY (APP_ID) REFERENCES SEC_APP_TBL(APP_ID)
);


CREATE INDEX SEC_APP_CLM_APP_ID_IDX ON SEC_APP_CLM_TBL(APP_ID);

-- SECURITY DEVICE TO POLICY ASSOC
CREATE TABLE SEC_DEV_POL_ASSOC_TBL (
	SEC_POL_INST_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- CHAR(16) FOR THE INSTANCES
	DEV_ID BLOB(16) NOT NULL, -- DEVICE IDENTIFIER TO WHICH THE POLICY APPLIES
	POL_ID BLOB(16) NOT NULL, -- POLICY IDENTIIFER TO WHICH THE POLICY APPLIES
	POL_ACT INT NOT NULL CHECK (POL_ACT < 3), -- POLICY ACTION EITHER GRANT, DENY OR ELEVATE
	CONSTRAINT PK_SEC_DEV_POL_ASSOC_TBL PRIMARY KEY (SEC_POL_INST_ID), 
	CONSTRAINT FK_SEC_DEV_POL_ASSOC_DEV_ID FOREIGN KEY (DEV_ID) REFERENCES SEC_DEV_TBL(DEV_ID),
	CONSTRAINT FK_SEC_DEV_POL_ASSOC_POL_ID FOREIGN KEY (POL_ID) REFERENCES SEC_POL_TBL(POL_ID)
);


CREATE INDEX SEC_DEV_POL_ASSOC_DEV_ID_IDX ON SEC_DEV_POL_ASSOC_TBL(DEV_ID);


-- SECURITY APPLICATION TO POLICY INSTANCE ASSOCIATION
CREATE TABLE SEC_APP_POL_ASSOC_TBL (
	SEC_POL_INST_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, -- CHAR(16) FOR THE INSTANCE
	APP_ID BLOB(16) NOT NULL, -- APPLICATION IDENTIFIER TO WHICH THE POLICY APPLIES
	POL_ID BLOB(16) NOT NULL, -- THE POLICY TO WHICH THE POLICY INSTANCE APPLIES
	POL_ACT INT CHECK (POL_ACT < 3) NOT NULL, -- POLICY ACTION
	CONSTRAINT PK_SEC_APP_POL_ASSOC_TBL PRIMARY KEY (SEC_POL_INST_ID),
	CONSTRAINT FK_SEC_APP_POL_ASSOC_APP_ID FOREIGN KEY (APP_ID) REFERENCES SEC_APP_TBL(APP_ID),
	CONSTRAINT FK_SEC_APP_POL_ASSOC_POL_ID FOREIGN KEY (POL_ID) REFERENCES SEC_POL_TBL(POL_ID)
);


CREATE INDEX SEC_APP_POL_ASSOC_APP_ID_IDX ON SEC_APP_POL_ASSOC_TBL(APP_ID);


-- GENERIC CONCEPTS TABLE
CREATE TABLE CD_TBL (
	CD_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	CONSTRAINT PK_CD_TBL PRIMARY KEY (CD_ID)
);


-- CONCEPT CLASSIFICATIONS TABLE
CREATE TABLE CD_CLS_TBL (
	CLS_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	CLS_NAME VARCHAR(50) NOT NULL, -- THE NAME OF THE CLASS
	MNEMONIC VARCHAR(16) NOT NULL, -- THE MNEMONIC USED BY THE SYSTEM TO LOCATE CONCEPTS
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT HTE CONCEPT CLASS WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED THE CONCEPT CLASS
	UPD_UTC BIGINT, -- THE TIME WHEN THE CONCEPT CLASS WAS CREATE
	UPD_PROV_ID BLOB(16), -- THE USER ID THAT UPDATED THE CONCEPT CLASS
	OBSLT_UTC BIGINT, -- THE OBSOLETION TIME OF THE CONCEPT
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE CONCEPT
	CONSTRAINT PK_CD_CLS_TBL PRIMARY KEY (CLS_ID),
	CONSTRAINT FK_CD_CLS_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_CLS_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_CLS_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_CD_CLS_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_CD_CLS_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
);


CREATE UNIQUE INDEX CD_CLS_MNEMONIC_IDX ON CD_CLS_TBL(MNEMONIC);


-- CONCEPT SETS REPRESENT A SET OF CONCEPTS LOGICALLY GROUPED TOGEHTHER
CREATE TABLE CD_SET_TBL (
	SET_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, 
	SET_NAME VARCHAR(50) NOT NULL, -- THE NAME OF THE SET
	MNEMONIC VARCHAR(64) NOT NULL, -- THE MNEMONIC (SYSTEM NAME) OF THE SET
	OID VARCHAR(64) NOT NULL, -- THE OID (EXTERNAL ID) OF THE CONCEPT SET
	URL VARCHAR(196) NOT NULL, -- THE DEFINITION URL OF THE CONCEPT SET
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE CREATION TIME OF THE CONCEPT SET
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED THE CONCEPT SET
	OBSLT_UTC BIGINT, -- THE TIME THAT THE SET WAS OBSOLETED
	OBSLT_RSN BLOB SUB_TYPE TEXT, -- THE REASON THE SET WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE OBSOLETION USER IDENTIFIER
	UPD_UTC BIGINT, -- THE UPDATED TIME OF THE CONCEPT SET
	UPD_PROV_ID BLOB(16), -- THE CHAR(16) OF THE USER WHICH UPDATED THE CONCEPT SET
	CONSTRAINT PK_CD_SET_TBL PRIMARY KEY (SET_ID), 
	CONSTRAINT FK_CD_SET_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_SET_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_SET_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_CD_SET_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_CD_SET_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
);


CREATE UNIQUE INDEX CD_SET_OID_IDX ON CD_SET_TBL(OID);

CREATE UNIQUE INDEX CD_SET_URL_IDX ON CD_SET_TBL(URL);

CREATE UNIQUE INDEX CD_SET_MNEMONIC_IDX ON CD_SET_TBL(MNEMONIC);


-- CONCEPT SET MEMBERS ASSOCIATION
CREATE TABLE CD_SET_MEM_ASSOC_TBL (
	SET_ID BLOB(16) NOT NULL, -- THE CONCEPT SET TO WHICH THE CONCEPT BELONGS
	CD_ID BLOB(16) NOT NULL, -- THE CONCEPT WHICH BELONGS TO THE SET.,
	CONSTRAINT PK_CD_SET_MEM_ASSOC_TBL PRIMARY KEY (SET_ID, CD_ID),
	CONSTRAINT FK_CD_SET_MEM_ASSOC_CD_SET FOREIGN KEY (SET_ID) REFERENCES CD_SET_TBL(SET_ID),
	CONSTRAINT FK_CD_SET_MEM_ASSOC_CD_ID FOREIGN KEY (CD_ID) REFERENCES CD_TBL(CD_ID)
);


CREATE INDEX CD_SET_MEM_ASSOC_CD_SET_ID_IDX ON CD_SET_MEM_ASSOC_TBL(SET_ID);

CREATE INDEX CD_SET_MEM_ASSOC_CD_ID_IDX ON CD_SET_MEM_ASSOC_TBL(CD_ID);


-- CONCEPT VERSIONS
CREATE TABLE CD_VRSN_TBL (
	CD_VRSN_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, 
	VRSN_SEQ_ID INTEGER UNIQUE,-- VERSION SEQUENCE
	CD_ID BLOB(16) NOT NULL, -- THE CONCEPT TO WHICH THE VERSION APPLIES
	STS_CD_ID BLOB(16) NOT NULL, -- THE STATUS OF THE CONCEPT AT THE CURRENT STATE
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THE VERSION WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH WAS RESPONSIBLE FOR THE CREATION OF THE CONCEPT VERSION
	OBSLT_UTC BIGINT, -- THE TIME THAT OBSOLETED THIS VERSION
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THIS VERSION
	RPLC_VRSN_ID BLOB(16), -- THE VERSION THAT THIS VERSION REPLACES
	CLS_ID BLOB(16) NOT NULL, -- THE CONCEPT CLASSIFICATION OF THE CONCEPT AT THE CURRENT VERSION
	MNEMONIC VARCHAR(64) NOT NULL, -- THE MNEMONIC OF THE CONCEPT AT THE CURRENT VERSION
	HEAD BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT PK_CD_VRSN_TBL PRIMARY KEY (CD_VRSN_ID),
	CONSTRAINT FK_CD_VRSN_STAT_CD_ID FOREIGN KEY (STS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_CD_VRSN_CD_ID FOREIGN KEY (CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_CD_VRSN_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_VRSN_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_VRSN_CLS_ID FOREIGN KEY (CLS_ID) REFERENCES CD_CLS_TBL(CLS_ID),
	CONSTRAINT FK_CD_VRSN_RPLC_VRSN_ID FOREIGN KEY (RPLC_VRSN_ID) REFERENCES CD_VRSN_TBL(CD_VRSN_ID),
	CONSTRAINT CK_CD_VRSN_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);

-- HACK FOR SQLITE
CREATE TRIGGER TRG_CD_VRSN_AU AFTER INSERT ON CD_VRSN_TBL 
	FOR EACH ROW 
	WHEN NEW.VRSN_SEQ_ID IS NULL	BEGIN
		UPDATE CD_VRSN_TBL SET VRSN_SEQ_ID = ROWID WHERE CD_VRSN_ID = NEW.CD_VRSN_ID;
	END;
CREATE INDEX CD_VRSN_CD_ID_IDX ON CD_VRSN_TBL(CD_ID);

CREATE INDEX CD_VRSN_MNEMONIC_IDX ON CD_VRSN_TBL(MNEMONIC);

--DROP INDEX CD_VRSN_MNEMONIC_UQ_IDX ON CD_VRSN_TBL(MNEMONIC) WHERE OBSLT_UTC IS NULL;

-- CONCEPT NAME LOCALIZATION TABLE
CREATE TABLE CD_NAME_TBL (
	NAME_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	CD_ID BLOB(16) NOT NULL, -- THE CONCEPT THAT THE NAME APPLIES TO
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION SEQUENCE WHERE THIS BECOMES EFFECTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION SEQUENCE WHERE THIS IS NO LONGER EFFECTIVE
	LANG_CS CHAR(2) NOT NULL, -- THE LANGUAGE CODE
	VAL VARCHAR(196) NOT NULL, -- NAME OF THE CODE
	CONSTRAINT PK_CD_NAME_TBL PRIMARY KEY (NAME_ID),
	CONSTRAINT FK_CD_NAME_CD_ID FOREIGN KEY (CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_CD_NAME_EFFT_VRSN_SEQ FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES CD_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_CD_NAME_OBSLT_VRSN_SEQ FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES CD_VRSN_TBL(VRSN_SEQ_ID)
);


CREATE INDEX CD_NAME_VRSN_IDX ON CD_NAME_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX CD_NAME_VAL_IDX ON CD_NAME_TBL(VAL);

CREATE INDEX CD_NAME_CD_ID_IDX ON CD_NAME_TBL(CD_ID);


-- CODE SYSTEMS TABLE
CREATE TABLE CD_SYS_TBL (
	CS_ID BLOB(16)  DEFAULT (randomblob(16)) NOT NULL, 
	CS_NAME VARCHAR(196), -- HUMAN READABLE NAME FOR THE CODESYSTEM
	OID VARCHAR(64) NOT NULL, -- THE OID OF THE CODE SYSTEM
	DOMAIN VARCHAR(50), -- THE ASSIGNING AUTHORITY OF THE COE SYSTEM
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT THE CODE SYSTEM WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER IDENTIFIER THAT CREATED THE CODE SYSTEM
	OBSLT_UTC BIGINT, -- THE INTEGER OF OBSOLETION
	OBSLT_PROV_ID BLOB(16), -- THE USER WHO OBSOLETED
	UPD_UTC BIGINT, -- THE INTEGER OFUPDATING
	UPD_PROV_ID BLOB(16), -- THE USER IDENTIIFER WHO UPDATED
	URL VARCHAR(196) NOT NULL, -- THE DEFINITION URL FOR THE CODE SYSTEM
	VRSN_TXT VARCHAR(10), -- THE VERSION OF THE CODE SYSTEM AS DEFINED BY THE AUTHORITY
	DESCR BLOB SUB_TYPE TEXT, -- THE HUMAN DESCRIPTION OF THE CODE SYSTEM
	CONSTRAINT PK_CD_SYS_TBL PRIMARY KEY (CS_ID),
	CONSTRAINT FK_CD_SYS_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_SYS_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_SYS_OBSLT_PROV_ID FOREIGN KEy (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_CD_SYS_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_CD_SYS_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))

);



-- INDEX ON CODE SYSTEM
CREATE UNIQUE INDEX CD_SYS_OID_IDX ON CD_SYS_TBL(OID) WHERE OBSLT_UTC IS NULL;

CREATE UNIQUE INDEX CD_SYS_URL_IDX ON CD_SYS_TBL(URL) WHERE OBSLT_UTC IS NULL;


-- CONCEPT RELATIONSHIP TYPES
CREATE TABLE CD_REL_TYP_CDTBL (
	REL_TYP_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, 
	REL_NAME VARCHAR(50) NOT NULL, -- NAME OF THE RELATIONSHIP TYPE
	MNEMONIC VARCHAR(20) NOT NULL, -- THE UNCHANGING MNEMONIC OF THE RELATIONSHIP
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT THE RELATION WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER IDENTIFIER THAT CREATED THE RELATION
	OBSLT_UTC BIGINT, -- THE INTEGER OF OBSOLETION
	OBSLT_PROV_ID BLOB(16), -- THE USER WHO OBSOLETED
	UPD_UTC BIGINT, -- THE INTEGER OFUPDATING
	UPD_PROV_ID BLOB(16), -- THE USER IDENTIIFER WHO UPDATED
	CONSTRAINT PK_CD_REL_TYP_CDTBL PRIMARY KEY (REL_TYP_ID),
	CONSTRAINT FK_CD_REL_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_REL_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_CD_REL_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_CD_REL_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_CD_REL_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
	
);


CREATE INDEX CD_REL_TYP_MNEMONIC_IDX ON CD_REL_TYP_CDTBL(MNEMONIC);


-- REFERENCE TERMS
CREATE TABLE REF_TERM_TBL (
	REF_TERM_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, 
	CS_ID BLOB(16) NOT NULL, -- CODE SYSTEM BLOB(16)
	MNEMONIC VARCHAR(50) NOT NULL, -- MNEMONIC OF THE REF TERM
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT THE REF WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER IDENTIFIER THAT CREATED THE REF
	OBSLT_UTC BIGINT, -- THE INTEGER OF OBSOLETION
	OBSLT_PROV_ID BLOB(16), -- THE USER WHO OBSOLETED
	UPD_UTC BIGINT, -- THE INTEGER OFUPDATING
	UPD_PROV_ID BLOB(16), -- THE USER IDENTIIFER WHO UPDATED
	CONSTRAINT PK_REF_TERM_TBL PRIMARY KEY (REF_TERM_ID),
	CONSTRAINT FK_REF_TERM_CS_ID FOREIGN KEY (CS_ID) REFERENCES CD_SYS_TBL(CS_ID),
	CONSTRAINT FK_REF_TERM_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_REF_TERM_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_REF_TERM_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_REF_TERM_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_REF_TERM_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
);

CREATE INDEX CD_REF_TERM_MNEMONIC_IDX ON REF_TERM_TBL(MNEMONIC);

CREATE UNIQUE INDEX CD_REF_TERM_CS_MNEMONIC_UQ_IDX ON REF_TERM_TBL(CS_ID, MNEMONIC) WHERE OBSLT_UTC IS NULL;


-- CONCEPT REFERENCE TERM ASSOCIATION
CREATE TABLE CD_REF_TERM_ASSOC_TBL (
	CD_REF_TERM_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	REF_TERM_ID BLOB(16) NOT NULL, -- THE REFERENCE TERM PART OF THIS RELATIONSHIP
	CD_ID BLOB(16) NOT NULL, -- THE CONCEPT DEFINITION IDENTIFIER
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION AT WHICH THE REFERENCE TERM RELATIONSHIP BECAME ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION AT WHICH THE REFERENCE TERM IS NO LONGER ACTIVE
	REL_TYP_ID BLOB(16) NOT NULL, -- THE RELATIONSHIP TYPE IDENTIFIER
	CONSTRAINT PK_CD_REF_TERM_ASC_TBL PRIMARY KEY (CD_REF_TERM_ID),
	CONSTRAINT FK_CD_REF_TERM_ASC_REF_TERM_ID FOREIGN KEY (REF_TERM_ID) REFERENCES REF_TERM_TBL(REF_TERM_ID),
	CONSTRAINT FK_CD_REF_TERM_ASC_CD_ID FOREIGN KEY (CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_CD_REF_TERM_ASC_EFT_VER_SEQ FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES CD_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_CD_REF_TERM_ASC_OBS_VER_SEQ FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES CD_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_CD_REF_TERM_ASC_REL_TYP_ID FOREIGN KEY (REL_TYP_ID) REFERENCES CD_REL_TYP_CDTBL(REL_TYP_ID)
);


CREATE INDEX CD_REF_TERM_ASSOC_CD_ID_IDX ON CD_REF_TERM_ASSOC_TBL(CD_ID);

CREATE INDEX CD_REF_TERM_ASSOC_VRSN_IDX ON CD_REF_TERM_ASSOC_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- REFERENCE TERM DISPLAY NAMES 
CREATE TABLE REF_TERM_NAME_TBL (
	REF_TERM_NAME_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	REF_TERM_ID BLOB(16) NOT NULL, -- THE REFERENCE TERM ID TO WHICH THE NAME APPLIES
	LANG_CS CHAR(2) NOT NULL, -- THE ISO LANGUAGE CODE FOR WHICH THE NAME APPLIES
	TERM_NAME VARCHAR(196) NOT NULL, -- THE NAME TO BE USED
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THE NAME WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH WAS RESPONSIBLE FOR THE CREATION OF THE NAME
	OBSLT_UTC BIGINT, -- THE TIME THAT OBSOLETED THIS NAME
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THIS NAME
	OBSLT_RSN BLOB SUB_TYPE TEXT, -- THE REASON THAT THE TERM NAME WAS OBSOLETED
	PHON_CS VARCHAR(20), -- THE PHONETIC CODE FOR THE NAME
	CONSTRAINT PK_REF_TERM_NAME_TBL PRIMARY KEY (REF_TERM_NAME_ID),
	CONSTRAINT FK_REF_TERM_NAME_REF_TERM_ID FOREIGN KEY (REF_TERM_ID) REFERENCES REF_TERM_TBL(REF_TERM_ID),
	CONSTRAINT FK_REF_TERM_NAME_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_REF_TERM_NAME_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_REF_TERM_NAME_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);


-- INDEX OF REF TERM NAMES
CREATE INDEX REF_TERM_NAME_PHON_CS_IDX ON REF_TERM_NAME_TBL(PHON_CS);

CREATE INDEX REF_TERM_NAME_TERM_NAME_IDX ON REF_TERM_NAME_TBL(TERM_NAME);


-- REFERENCE TERM RELATIONSHIP TABLE
CREATE TABLE CD_REL_ASSOC_TBL (
	CD_REL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	SRC_CD_ID BLOB(16) NOT NULL, -- THE SOURCE OF THE RELATIONSHIP
	TRG_CD_ID BLOB(16) NOT NULL, -- THE TARGET OF THE RELATIONSHIP
	REL_TYP_ID BLOB(16) NOT NULL, -- THE TYPE OF RELATIONSHIP
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION AT WHICH THE RELATIONSHIP BECOMES ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION AT WHICH THE RELATIONSHIP IS NO LONGER ACTIVE
	CONSTRAINT PK_CD_REL_ASSOC_TBL PRIMARY KEY (CD_REL_ID),
	CONSTRAINT FK_CD_REL_ASSOC_SRC_CD_ID FOREIGN KEY (SRC_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_CD_REL_ASSOC_TRG_CD_ID FOREIGN KEY (TRG_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_CD_REL_ASSOC_REL_TYP_ID FOREIGN KEY (REL_TYP_ID) REFERENCES CD_REL_TYP_CDTBL(REL_TYP_ID),
	CONSTRAINT FK_CD_REL_ASC_EFT_VER_SEQ FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES CD_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_CD_REL_ASC_OBS_VER_SEQ FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES CD_VRSN_TBL(VRSN_SEQ_ID)
);


-- INDEX FOR RELATIONSHIP
CREATE INDEX CD_REL_ASSOC_VRSN_IDX ON CD_REL_ASSOC_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX CD_REL_ASSOC_SRC_ID_IDX ON CD_REL_ASSOC_TBL(SRC_CD_ID);

CREATE INDEX CD_REL_ASSOC_TRG_ID_IDX ON CD_REL_ASSOC_TBL(TRG_CD_ID);


-- CURRENT CONCEPT VERSION VIEW
CREATE VIEW CD_CUR_VRSN_VW AS
	SELECT CD_VRSN_TBL.*, CD_CLS_TBL.MNEMONIC AS CLS_MNEMONIC 
	FROM CD_VRSN_TBL INNER JOIN CD_TBL USING (CD_ID)
		INNER JOIN CD_CLS_TBL USING (CLS_ID)
		WHERE CD_VRSN_TBL.OBSLT_UTC IS NULL;


-- CONCEPT SET MEMBERS VIEW
CREATE VIEW CD_SET_MEM_VW AS
	SELECT CD_SET_TBL.SET_ID, CD_SET_TBL.MNEMONIC AS SET_MNEMONIC, CD_CUR_VRSN_VW.CD_ID, CD_CUR_VRSN_VW.CD_VRSN_ID, CD_CUR_VRSN_VW.MNEMONIC AS CD_MNEMONIC, CD_CUR_VRSN_VW.CLS_MNEMONIC
	FROM CD_SET_MEM_ASSOC_TBL INNER JOIN CD_SET_TBL USING (SET_ID) 
	INNER JOIN CD_CUR_VRSN_VW USING(CD_ID);



-- EXTENSION TYPE REGISTRY
CREATE TABLE EXT_TYP_TBL (
	EXT_TYP_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	HDLR_CLS VARCHAR(196) NOT NULL, -- THE EXTENSION HANDLER WHICH HANDLES (SERIALIZES) THIS TYPE OF EXTENSION
	EXT_NAME VARCHAR(128) NOT NULL, -- THE HUMAN NAME OF THE EXTENSION
	IS_ACTIVE BOOLEAN DEFAULT TRUE NOT NULL, -- TRUE IF THE EXTENSION REGISTRATION IS ACTIVE
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE CREATION TIME OF THE EXTENSION TYPE
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHO CREATED THE EXTENSION REGISTRATION
	UPD_UTC BIGINT, -- THE TIME THAT THE EXTENSION TYPE WAS UPDATED
	UPD_PROV_ID BLOB(16), -- THE USER WHICH UPDATED THE EXTENSION TYPE
	OBSLT_UTC BIGINT, -- THE TIME WHEN THE EXTENSION WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE EXTENSION TYPE
	CONSTRAINT PK_EXT_TYP_TBL PRIMARY KEY (EXT_TYP_ID),
	CONSTRAINT FK_EXT_TYP_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_EXT_TYP_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_EXT_TYP_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_EXT_TYP_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_EXT_TYP_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
);


-- INDEX ON EXTENSION TYPE
CREATE UNIQUE INDEX EXT_TYP_NAME_IDX ON EXT_TYP_TBL(EXT_NAME) WHERE OBSLT_UTC IS NULL;


-- ASSIGNING AUTHORITY
CREATE TABLE ID_DMN_TBL (
	DMN_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	DMN_NAME VARCHAR(50) NOT NULL, -- THE NAME OF THE ASSIGNING AUTHORITY
	OID VARCHAR(196) NOT NULL, -- THE OID OF THE ASSIGNING AUTHORTIY
	NSID VARCHAR(32) NOT NULL, -- THE HL7 V2 CX.4 ASSIGNING AUTHORITY DOMAIN
	URL VARCHAR(250), -- THE URL OF THE ASSINGING AUTHORITY DEFINITION
	DESCR BLOB SUB_TYPE TEXT, -- THE DESCRIPTION OF THE AUTHORITY
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT THE AA WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED THE AA
	OBSLT_UTC BIGINT, -- THE TIME THAT THE AA WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE AA
	UPD_UTC BIGINT, -- THE TIME THAT THE AA WAS OBSOLETED
	UPD_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE AA
	VAL_RGX VARCHAR(64), -- REGULAR EXPRESSION FOR VALIDATION
	IS_UNQ BOOLEAN DEFAULT FALSE NOT NULL, -- TRUE IF THE ASSIGNING AUTHORITY IS UNIQUE
	POL_ID BLOB(16), -- POLICY FOR THE DOMAIN
	VAL_CLS VARCHAR(256), -- VALIDATOR CLASS
	CONSTRAINT PK_ID_DMN_TBL PRIMARY KEY (DMN_ID),
	CONSTRAINT FK_ID_DMN_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ID_DMN_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ID_DMN_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_ID_DMN_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);


CREATE UNIQUE INDEX ID_DMN_NAME_IDX ON ID_DMN_TBL(NSID) WHERE OBSLT_UTC IS NULL;

CREATE UNIQUE INDEX ID_DMN_OID_IDX ON ID_DMN_TBL(OID) WHERE OBSLT_UTC IS NULL;


-- IDENTIFIES SCOPES TO WHICH AN AA APPLIES
CREATE TABLE ID_DMN_SCP_TBL (
	DMN_ID BLOB(16) NOT NULL, -- THE AA TO WHICH THE SCOPE APPLIES
	CD_ID BLOB(16) NOT NULL, -- THE CHAR(16) FOR THE CLASS WHICH DESCRIBES THE SCOPE
	CONSTRAINT PK_ID_DMN_SCP_TBL PRIMARY KEY (DMN_ID, CD_ID),
	CONSTRAINT FK_ID_DMN_SCP_AUT_ID FOREIGN KEY (DMN_ID) REFERENCES ID_DMN_TBL(DMN_ID),
	CONSTRAINT FK_ID_DMN_SCP_CD_ID FOREIGN KEY (CD_ID) REFERENCES CD_TBL(CD_ID)
);


CREATE TABLE ASGN_AUT_TBL (
	AUT_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	DMN_ID BLOB(16) NOT NULL,
	APP_ID BLOB(16) NOT NULL, 
	CRT_UTC BIGINT NOT NULL DEFAULT (unixepoch()),
	CRT_PROV_ID BLOB(16) NOT NULL,
	OBSLT_UTC BIGINT, 
	OBSLT_PROV_ID BLOB(16), 
	REL INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT PK_ASGN_AUT_TBL PRIMARY KEY (AUT_ID),
	CONSTRAINT FK_ASGN_AUT_DMN_TBL FOREIGN KEY (DMN_ID) REFERENCES ID_DMN_TBL(DMN_ID),
	CONSTRAINT FK_ASGN_AUT_APP_TBL FOREIGN KEY (APP_ID) REFERENCES SEC_APP_TBL (APP_ID),
	CONSTRAINT FK_ASGN_AUT_CRT_PROV_TBL FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ASGN_AUT_OBSLT_PROV_TBL FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_ASGN_AUT_OBSLT_PROV CHECK (OBSLT_UTC IS NULL AND OBSLT_PROV_ID IS NULL OR OBSLT_UTC IS NOT NULL AND OBSLT_PROV_ID IS NOT NULL)
);


CREATE UNIQUE INDEX ASGN_AUT_ASGN_IDX ON ASGN_AUT_TBL (DMN_ID, APP_ID) WHERE OBSLT_UTC IS NULL;


CREATE INDEX ASGN_AUT_ASGN_DMN_IDX ON ASGN_AUT_TBL (DMN_ID);


-- IDENTIFIER TYPES
CREATE TABLE ID_TYP_TBL (
	ID_TYP_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	TYP_CD_ID BLOB(16) NOT NULL, -- THE TYPE OF IDENTIFIER
	ENT_SCP_CD_ID BLOB(16) NOT NULL, -- THE SCOPE IN WHICH THE IDENTIFIER TYPE CAN BE USED
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT THE AA WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED THE AA
	OBSLT_UTC BIGINT, -- THE TIME THAT THE AA WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE AA
	CONSTRAINT PK_ID_TYP_TBL PRIMARY KEY (ID_TYP_ID),
	CONSTRAINT FK_ID_TYP_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ID_TYP_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_ID_TYP_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT FK_ID_TYP_TYP_CD_ID FOREIGN KEY (TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ID_TYP_ENT_SCP_CD_ID FOREIGN KEY (ENT_SCP_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- TEMPLATE DEFINITION TABLE
CREATE TABLE TPL_DEF_TBL (
	TPL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	OID VARCHAR(64), -- THE OID OF THE TEMPLATE DEFINITION
	MNEMONIC VARCHAR(64) NOT NULL, -- THE MNEMONIC FOR THE TEMPLATE DEFINITION
	TPL_NAME VARCHAR(128), -- THE HUMAN READABLE NAME FOR THE TEMPLATE DEFINITION
	DESCR BLOB SUB_TYPE TEXT, -- A DESCRIPTION OF THE TEMPLATE
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE CREATION TIME OF THE EXTENSION TYPE
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHO CREATED THE EXTENSION REGISTRATION
	UPD_UTC BIGINT, -- THE TIME THAT THE EXTENSION TYPE WAS UPDATED
	UPD_PROV_ID BLOB(16), -- THE USER WHICH UPDATED THE EXTENSION TYPE
	OBSLT_UTC BIGINT, -- THE TIME WHEN THE EXTENSION WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE EXTENSION TYPE
	CONSTRAINT PK_TPL_DEF_TBL PRIMARY KEY (TPL_ID),
	CONSTRAINT FK_TPL_DEF_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_TPL_DEF_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_TPL_DEF_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_TPL_DEF_OBSLT_PROV_ID CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_TPL_DEF_UPD_PROV_ID CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
);


CREATE UNIQUE INDEX TPL_DEF_OID_IDX ON TPL_DEF_TBL(OID) WHERE OBSLT_UTC IS NULL;

CREATE UNIQUE INDEX TPL_DEF_MNEMONIC_IDX ON TPL_DEF_TBL(MNEMONIC) WHERE OBSLT_UTC IS NULL;


-- CREATE ACT TABLE
CREATE TABLE ACT_TBL (
	ACT_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	CONSTRAINT PK_ACT PRIMARY KEY (ACT_ID)
);


-- ACT VERSION TABLE
CREATE TABLE ACT_VRSN_TBL (
	ACT_VRSN_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	VRSN_SEQ_ID INTEGER UNIQUE, -- THE VERSION SEQUENCE
	ACT_ID BLOB(16) NOT NULL, -- THE ACT IDENTIFIER TO WHICH THIS VERSION APPLIES
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THAT HTE VERSION WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH WAS RESPONSIBLE FOR THE CREATION OF THE VERSION
	OBSLT_UTC BIGINT, -- THE TIME WHEN THE ACT VERSION BECOMES OBSOLETE
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE ACT VERSION
	OBSLT_RSN BLOB SUB_TYPE TEXT, -- THE REASON WHY THE VERSION WSA OBSOLETED
	RPLC_VRSN_ID BLOB(16), -- THE CHAR(16) OF THE VERSION THAT THIS VERISON REPLACE
	NEG_IND BOOLEAN DEFAULT FALSE NOT NULL, -- TRUE IF THE ACT NEVER OCCURRED
	TYP_CD_ID BLOB(16), -- THE TYPE CONCEPT OF THE ACT AT THIS VERSION
	STS_CD_ID BLOB(16) NOT NULL, -- THE STATUS OF THE ACT AS OF THIS VERSION
	RSN_CD_ID BLOB(16), -- THE REASON OF THE ACT TO OCCUR
	ACT_UTC BIGINT, -- THE TIME THE ACT OCCURRED
	ACT_START_UTC BIGINT, -- THE TIME THE ACT STARTED OR WAS TO START
	ACT_STOP_UTC BIGINT, -- THE TIME THAT THE ACT STOPPED TO WAS TO STOP
	TPL_ID BLOB(16), -- IDENTIFIES THE TEMPLATE WHICH THIS ACT FOLLOWS
	CLS_CD_ID BLOB(16) NOT NULL, -- CLASSIFIES THE TYPE OF ACT
	MOD_CD_ID BLOB(16) NOT NULL, -- IDENTIIFES THE MOOD OF THE ACT
	GEO_ID BLOB(16), -- GEOTAG 
	HEAD BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT PK_ACT_VRSN_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_ACT_VRSN_ACT FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_VRSN_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ACT_VRSN_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ACT_VRSN_RPLC_VRSN_ID FOREIGN KEY (RPLC_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_ACT_VRSN_TYP_CD_ID FOREIGN KEY (TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ACT_VRSN_RSN_CD_ID FOREIGN KEY (RSN_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ACT_VRSN_STS_CD_ID FOREIGN KEY (STS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT CK_ACT_VRSN_OBSLT_PROV_ID CHECK((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT CK_ACT_VRSN_ACT_UTC CHECK(ACT_UTC IS NOT NULL OR ACT_START_UTC IS NOT NULL OR ACT_STOP_UTC IS NOT NULL), -- CHECK: ONE OF ACT TIME, START, OR END MUST BE PROVIDED
	CONSTRAINT FK_ACT_CLS_CD_ID FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ACT_MOD_CD_ID FOREIGN KEY (MOD_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ACT_TPL_ID FOREIGN KEY (TPL_ID) REFERENCES TPL_DEF_TBL(TPL_ID)

);



-- HACK FOR SQLITE
CREATE TRIGGER TRG_ACT_VRSN_AU AFTER INSERT ON ACT_VRSN_TBL 
	FOR EACH ROW 
	WHEN NEW.VRSN_SEQ_ID IS NULL	BEGIN
		UPDATE ACT_VRSN_TBL SET VRSN_SEQ_ID = ROWID WHERE ACT_VRSN_ID = NEW.ACT_VRSN_ID;
	END;

-- INDEXING
CREATE INDEX ACT_VRSN_CLS_CD_IDX ON ACT_VRSN_TBL(CLS_CD_ID);



-- INDEXING FOR ACTS
CREATE INDEX ACT_VRSN_ACT_ID_IDX ON ACT_VRSN_TBL(ACT_ID);

CREATE INDEX ACT_VRSN_TYP_CD_ID_IDX ON ACT_VRSN_TBL(TYP_CD_ID);


-- IDENTIFIERS FOR ACTS
CREATE TABLE ACT_ID_TBL (
	ACT_ID_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ID_TYP_ID BLOB(16), -- THE TYPE OF IDENTIFIER 
	ACT_ID BLOB(16) NOT NULL, -- THE IDENTIFIER OF THE ACT
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION AT WHICH TIME THIS IDENTIIFER BECAME ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION SEQUENCE AT WHICH THE IDENTIFIER WAS NO LONGER ACTIVE
	DMN_ID BLOB(16) NOT NULL, -- THE ASSIGNING AUTHORITY OF THE IDENTIFIER
	ID_VAL VARCHAR(64) NOT NULL, -- THE VALUE OF THE IDENTIFIER
	ISS_DT BIGINT,
	EXP_DT BIGINT, 
	CHK_DGT VARCHAR(10),
	REL INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT PK_ACT_ID_TBL PRIMARY KEY(ACT_ID_ID),
	CONSTRAINT FK_ACT_ID_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_ID_ID_TYP_ID FOREIGN KEY (ID_TYP_ID) REFERENCES ID_TYP_TBL(ID_TYP_ID),
	CONSTRAINT FK_ACT_ID_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_ID_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_ID_DMN_ID FOREIGN KEY (DMN_ID) REFERENCES ID_DMN_TBL(DMN_ID)
);


-- INDEXING FO RTHE ID TABLE
CREATE INDEX ACT_ID_ACT_ID_IDX ON ACT_ID_TBL(ACT_ID);

CREATE INDEX ACT_ID_VRSN_IDX ON ACT_ID_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- ACT RELATIONSHIPS
CREATE TABLE ACT_REL_TBL (
	REL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	SRC_ACT_ID BLOB(16) NOT NULL, -- THE SOURCE ACT
	TRG_ACT_ID BLOB(16) NOT NULL, -- THE TARGET ACT
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- EFFECTIVE VERSION OF THE RELATIONSHIP
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE OBSOLETION VERSION OF THE RELATIONSHIP
	REL_TYP_CD_ID BLOB(16) NOT NULL, -- THE RELATIONSHIP TYPE CONCEPT
	CLS_CD_ID BLOB(16),
	CONSTRAINT PK_ACT_REL_TBL PRIMARY KEY (REL_ID),
	CONSTRAINT FK_ACT_REL_SRC_ACT_ID FOREIGN KEY (SRC_ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_REL_TRG_ACT_ID FOREIGN KEY (TRG_ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_REL_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_REL_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_REL_REL_TYP_CD_ID FOREIGN KEY (REL_TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ACT_REL_CLS_CD_ID FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL(CD_ID)
);


CREATE INDEX ACT_REL_SRC_ACT_ID_IDX ON ACT_REL_TBL(SRC_ACT_ID);

CREATE INDEX ACT_REL_TRG_ACT_ID_IDX ON ACT_REL_TBL(TRG_ACT_ID);

CREATE INDEX ACT_REL_VRSN_IDX ON ACT_REL_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- ACT EXTENSIONS TABLE
CREATE TABLE ACT_EXT_TBL (
	ACT_EXT_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ACT_ID BLOB(16) NOT NULL, -- THE ACT TO WHICH THE EXTENSION APPLIES
	EXT_TYP_ID BLOB(16) NOT NULL, -- THE TYPE OF EXTENSION
	EXT_VAL BLOB, -- THE SERIALIZED EXTENSION VALUE
	EXT_DISP VARCHAR(4096), -- THE DISPLAY (HUMAN) VERSION OF THE EXTENSION
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION AT WHICH THE EXTENSION IS ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION AT WHICH THE EXTENSION IS NOT ACTIVE
	CONSTRAINT PK_ACT_EXT_TBL PRIMARY KEY (ACT_EXT_ID), 
	CONSTRAINT FK_ACT_EXT_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_EXT_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_EXT_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_EXT_EXT_TYP_ID FOREIGN KEY (EXT_TYP_ID) REFERENCES EXT_TYP_TBL(EXT_TYP_ID)
);


CREATE INDEX ACT_EXT_VRSN_IDX ON ACT_EXT_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ACT_EXT_ACT_ID ON ACT_EXT_TBL(ACT_ID);


-- CONTROL ACT TABLE
CREATE TABLE CNTRL_ACT_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE LINK TO THE ACT WHICH IS A CONTROL ACT
	CONSTRAINT PK_CNTRL_ACT_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_CNTRL_ACT_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID)
);


-- PROCEDURES TABLE
CREATE TABLE PROC_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE BLOB(16) FOR THE ACT VERSION INFORMATION
	MTH_CD_ID BLOB(16), -- THE BLOB(16) FOR THE METHOD / TECHNIQUE CODE
	APR_STE_CD_ID BLOB(16), -- THE BLOB(16) FOR THE APPOACH SITE CODE
	TRG_STE_CD_ID BLOB(16), -- THE BLOB(16) FOR THE TARGET SITE CODE
	CONSTRAINT PK_PROC_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_PROC_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_PROC_MTH_CD_ID FOREIGN KEY (MTH_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PROC_APR_STE_CD_ID FOREIGN KEY (APR_STE_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PROC_TRG_STE_CD_ID FOREIGN KEY (TRG_STE_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- OBSERVATION TABLE
CREATE TABLE OBS_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION TO WHICH THIS OBSERVATION DATA APPLIES
	INT_CD_ID BLOB(16), -- THE INTERPRETATION CODE OF THE OBSERVATION
	VAL_TYP VARCHAR(2) CHECK (VAL_TYP IN ('PQ','ST','CD')) NOT NULL, -- THE TYPE OF VALUE
	CONSTRAINT PK_OBS_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_OBS_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_OBS_INT_CD_ID FOREIGN KEY (INT_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- OBSERVATION VALUE TYPE INDEx
CREATE INDEX OBS_VAL_TYP_IDX ON OBS_TBL(VAL_TYP);


-- QUANTITY OBSERVATION TABLE
CREATE TABLE QTY_OBS_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION TO WHICH THE OBSERVATION DATA APLIES
	QTY DECIMAL NOT NULL, -- THE QUANTITY ITSELF
	QTY_PRC NUMERIC(2), -- THE PRECISION OF THE OBSERVED VALUES
	UOM_CD_ID BLOB(16) NOT NULL, -- THE UNIT OF MEASURE OF THE QUANTITY
	CONSTRAINT PK_QTY_OBS_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_QTY_OBS_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES OBS_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_QTY_OBS_UOM_CD_ID FOREIGN KEY (UOM_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- CODIFIED OBSERVATION TABLE
CREATE TABLE CD_OBS_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION TO WHICH THE OBSERVATION DTA APPLIES
	VAL_CD_ID BLOB(16) NOT NULL, -- THE CONCEPT WHICH REPRESENTS THE VALUE
	CONSTRAINT PK_CD_OBS_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_CD_OBS_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES OBS_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_CD_OBS_VAL_CD_ID FOREIGN KEY (VAL_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- BLOB SUB_TYPE TEXT OBSERVATION
CREATE TABLE TXT_OBS_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION TO WHICH THE BLOB SUB_TYPE TEXT DATA APPLIES
	OBS_VAL BLOB SUB_TYPE TEXT NOT NULL, -- THE OBSERVATION VALUE 
	CONSTRAINT PK_TXT_OBS_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_TXT_OBS_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES OBS_TBL(ACT_VRSN_ID)
);


-- PATIENT ENCOUNTER
CREATE TABLE PAT_ENC_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION TO WHICH THE ENCOUNTER DATA APPLIES
	DSCH_DSP_CD_ID BLOB(16), -- THE DISCHARGE DISPOSITION IF KNOWN
	ADM_SRC_CD_ID BLOB(16),
	CONSTRAINT PK_PAT_ENC_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_PAT_ENC_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_PAT_ENC_DSCH_DSP_CD_ID FOREIGN KEY (DSCH_DSP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_ENC_ADM_SRC_CD_ID FOREIGN KEY (ADM_SRC_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- SUBBSTANCE ADMINISTRATION
CREATE TABLE SUB_ADM_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION TO WHICH THE SUBSTANCE ADMINISTRATION DATA APPLIES
	STE_CD_ID BLOB(16) default x'5CF6D8617E74994A982FA42AC5437473', -- THE SITE OF ADMINISTRATION
	RTE_CD_ID BLOB(16) default x'5CF6D8617E74994A982FA42AC5437473' NOT NULL, -- THE ROUTE OF ADMINISTRATION
	DOS_QTY DECIMAL NOT NULL, -- THE AMOUNT ADMINISTERED
	DOS_UNT_CD_ID BLOB(16) NOT NULL, -- THE DOSE UOM CODE
	SEQ_ID INT, -- THE SEQUENCE CODE OF THE DOSE IF GIVEN AS PART OF A DOSE
	CONSTRAINT PK_SUB_ADM_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_SUB_ADM_ACT_VRSN_ID FOREIGN KEY (ACT_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID),
	CONSTRAINT FK_SUB_ADM_STE_CD_ID FOREIGN KEY (STE_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_SUB_ADM_RTE_CD_ID FOREIGN KEY (RTE_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_SUB_ADM_DOS_UNT_CD_ID FOREIGN KEY (DOS_UNT_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- ACT TAG
CREATE TABLE ACT_TAG_TBL (
	TAG_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, 
	ACT_ID BLOB(16) NOT NULL, -- THE ACT TO WHICH THE TAG APPLIES
	TAG_NAME VARCHAR(64) NOT NULL, -- THE NAME OF THE TAG
	TAG_VALUE BLOB SUB_TYPE TEXT, -- THE VALUE OF THE TAG
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THE TAG WAS ATTACHED TO THE ACT
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH IS RESPONSIBLE FOR THE CREATION OF THE ACT TAG
	OBSLT_UTC BIGINT, -- THE TIME THAT THE TAG NO LONGER APPLIES TO THE OBJECT
	OBSLT_PROV_ID BLOB(16), -- THE USER THAT OBSOLETED THE TAG
	CONSTRAINT PK_ACT_TAG_TBL PRIMARY KEY (TAG_ID),
	CONSTRAINT FK_ACT_TAG_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_TAG_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ACT_TAG_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_ACT_TAG_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);


CREATE INDEX ACT_TAG_TAG_NAME_IDX ON ACT_TAG_TBL(TAG_NAME);

CREATE INDEX ACT_TAG_ACT_ID_IDX ON ACT_TAG_TBL(ACT_ID);


-- ACT POLICY ASSOCIATION
CREATE TABLE ACT_POL_ASSOC_TBL (
	SEC_POL_INST_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ACT_ID BLOB(16) NOT NULL, -- THE ACT TO WHICH THE POLICY APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION OF THE ACT WHERE THE POLICY ASSOCIATION DID BECOME ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION OF THE ACT WHERE THE POLICY ASSOCIATION IS OBSOLETE,
	POL_ID BLOB(16) NOT NULL, -- THE IDENTIFIER OF THE POLICY WHICH IS ATTACHED TO THE ACT
	CONSTRAINT PK_ACT_POL_ASSOC_TBL PRIMARY KEY(SEC_POL_INST_ID),
	CONSTRAINT FK_ACT_POL_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_POL_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_POL_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_POL_POL_ID FOREIGN KEY (POL_ID) REFERENCES SEC_POL_TBL(POL_ID)
);


CREATE INDEX ACT_POL_ASSOC_POL_ID_IDX ON ACT_POL_ASSOC_TBL(POL_ID);

CREATE INDEX ACT_POL_ASSOC_VRSN_IDX ON ACT_POL_ASSOC_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- ENTITY TABLE
CREATE TABLE ENT_TBL (
	ENT_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	
	CONSTRAINT PK_ENT_TBL PRIMARY KEY (ENT_ID)
	
);


-- ENTITY TAGS
CREATE TABLE ENT_TAG_TBL (
	TAG_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE TAG APPLIES
	TAG_NAME VARCHAR(64) NOT NULL, -- THE NAME OF THE TAG
	TAG_VALUE BLOB SUB_TYPE TEXT, -- THE VALUE OF THE TAG
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME WHEN THE TAG WAS ADDED TO THE ENTITY
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED OR ATTACHED THE TAG TO THE ENTITY
	OBSLT_UTC BIGINT, -- THE TIME WHEN THE TAG WAS OBSOLETED,
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE TAG
	CONSTRAINT PK_ENT_TAG_TBL PRIMARY KEY (TAG_ID),
	CONSTRAINT FK_ENT_TAG_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_TAG_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ENT_TAG_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_ENT_TAG_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);


-- INDEX ON ENTITY TAG
CREATE INDEX ENT_TAG_ENT_ID_IDX ON ENT_TAG_TBL(ENT_ID);


-- ENTITY VERSION TABLE
CREATE TABLE ENT_VRSN_TBL (
	ENT_VRSN_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	VRSN_SEQ_ID INTEGER UNIQUE, -- UNIQUE VERSION SEQUENCE FOR THE ENTITY VERSION
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE VERSION APPLIES
	RPLC_VRSN_ID BLOB(16), -- THE VERSION THAT THIS ENTITY VERSION REPLACES
	STS_CD_ID BLOB(16) NOT NULL, -- THE STATUS OF THE ENTITY AT THIS VERSION
	TYP_CD_ID BLOB(16), -- THE SUBCLASS OR TYPE WITHIN THE CLASS OF THE ENTITY
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME WHEN THE VERSION WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATED THIS VERSION OF THE ENTITY
	OBSLT_UTC BIGINT, -- THE TIME WHEN THE VERSION WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THEUSER WHICH OBSOLETED THE VERSION
	TPL_ID BLOB(16), -- THE TEMPLATE WHICH THIS ENTITY FOLLOWS
	CLS_CD_ID BLOB(16) NOT NULL, -- IDENTIIFES THE CLASS CONCEPT
	DTR_CD_ID BLOB(16) NOT NULL, -- IDENTIFIES THE ENTITY DETERMINER
	GEO_ID BLOB(16), -- GEOTAGGING
	CRT_ACT_ID BLOB(16),
	HEAD BOOLEAN NOT NULL DEFAULT FALSE,
	CONSTRAINT PK_ENT_VRSN_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_ENT_VRSN_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_VRSN_RPLC_VRSN_SEQ_ID FOREIGN KEY (RPLC_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_ENT_VRSN_STS_CD_ID FOREIGN KEY (STS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_VRSN_TYP_CD_ID FOREIGN KEY (TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_VRSN_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_ENT_VRSN_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_ENT_VRSN_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL)),
	CONSTRAINT FK_ENT_TPL_ID FOREIGN KEY (TPL_ID) REFERENCES TPL_DEF_TBL(TPL_ID),
	CONSTRAINT FK_ENT_CLS_CD_ID FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL (CD_ID),
	CONSTRAINT FK_ENT_DTR_CD_ID FOREIGN KEY (DTR_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_VRSN_CRT_ACT FOREIGN KEY (CRT_ACT_ID) REFERENCES ACT_TBL(ACT_ID)
);



-- HACK FOR SQLITE
CREATE TRIGGER TRG_ENT_VRSN_AU AFTER INSERT ON ENT_VRSN_TBL 
	FOR EACH ROW 
	WHEN NEW.VRSN_SEQ_ID IS NULL	BEGIN
		UPDATE ENT_VRSN_TBL SET VRSN_SEQ_ID = ROWID WHERE ENT_VRSN_ID = NEW.ENT_VRSN_ID;
	END;


CREATE INDEX ENT_VRSN_TBL_CLS_CD_ID_IDX ON ENT_VRSN_TBL(CLS_CD_ID);

CREATE INDEX ENT_VRSN_STS_CD_ID_IDX ON ENT_VRSN_TBL(STS_CD_ID);

CREATE INDEX ENT_VRSN_ENT_ID_IDX ON ENT_VRSN_TBL(ENT_ID);



-- ENT POLICY ASSOCIATION
CREATE TABLE ENT_POL_ASSOC_TBL (
	SEC_POL_INST_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENT TO WHICH THE POLICY APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION OF THE ENT WHERE THE POLICY ASSOCIATION DID BECOME ENTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION OF THE ENT WHERE THE POLICY ASSOCIATION IS OBSOLETE,
	POL_ID BLOB(16) NOT NULL, -- THE IDENTIFIER OF THE POLICY WHICH IS ATTACHED TO THE ENT
	CONSTRAINT PK_ENT_POL_ASSOC_TBL PRIMARY KEY(SEC_POL_INST_ID),
	CONSTRAINT FK_ENT_POL_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_POL_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_POL_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_POL_POL_ID FOREIGN KEY (POL_ID) REFERENCES SEC_POL_TBL(POL_ID)
);


CREATE INDEX ENT_POL_ASSOC_POL_ID_IDX ON ENT_POL_ASSOC_TBL(POL_ID);

CREATE INDEX ENT_POL_ASSOC_VRSN_IDX ON ENT_POL_ASSOC_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- ENTITY RELATIONSHIP TABLE
CREATE TABLE ENT_REL_TBL (
	ENT_REL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	SRC_ENT_ID BLOB(16) NOT NULL, -- THE SOURCE ENTITY OF THE RELATIONSHIP
	TRG_ENT_ID BLOB(16) NOT NULL, -- THE TARGET ENTITY OF THE RELATIONSHIP
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE SOURCE VERSION SEQUENCE WHERE THE RELATIONSHIP BECAME ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE SOURCE VERSION SEQUENCE WHERE THE RELATIONSHIP BECAME OBSOLETE
	REL_TYP_CD_ID BLOB(16) NOT NULL, -- THE TYPE OF RELATIONSHIP BETWEEN THE ENTITIES
	QTY BIGINT DEFAULT 1, -- THE NUMER OF THE TARGET ENTITY RELATED TO THE SOURCE ENTIYT
	CLS_CD_ID BLOB(16), -- CLASSIFICATION CODE
	ROL_CD_ID BLOB(16), -- ROLE CODE
	CONF REAL, -- CONFIDENCE CODE
	CONSTRAINT PK_ENT_REL_TBL PRIMARY KEY (ENT_REL_ID),
	CONSTRAINT FK_ENT_REL_SRC_ENT_ID FOREIGN KEY (SRC_ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_REL_TRG_ENT_ID FOREIGN KEY (TRG_ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_REL_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_REL_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_REL_REL_TYP_CD_ID FOREIGN KEY (REL_TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_REL_REL_CLS_CD_ID FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_REL_REL_ROL_CD_ID FOREIGN KEY (ROL_CD_ID) REFERENCES CD_TBL(CD_ID)
);


CREATE INDEX ENT_REL_SRC_ENT_ID_IDX ON ENT_REL_TBL(SRC_ENT_ID);

CREATE INDEX ENT_REL_TRG_ENT_ID_IDX ON ENT_REL_TBL(TRG_ENT_ID);

CREATE INDEX ENT_REL_VRSN_IDX ON ENT_REL_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ent_rel_tbl_rel_typ_idx ON ent_rel_tbl (rel_typ_cd_id);

CREATE UNIQUE INDEX ENT_REL_TBL_REL_UNQ_ENF ON ENT_REL_TBL(SRC_ENT_ID, TRG_ENT_ID, REL_TYP_CD_ID) WHERE OBSLT_VRSN_SEQ_ID IS NULL;

-- ENTITY ADDRESS TABLE
CREATE TABLE ENT_ADDR_TBL (
	ADDR_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE ADDRESS IS ATTACHED
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION WHEN THE ADDRESS RELATIONSHIP BECAME ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION WHEN THE ADDRESS RELATIOSHIP IS NOT ACTIVE
	USE_CD_ID BLOB(16) NOT NULL, -- INDICATES THE USE OF THE ADDRESS
	CONSTRAINT PK_ENT_ADDR_TBL PRIMARY KEY (ADDR_ID),
	CONSTRAINT FK_ENT_ADDR_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_ADDR_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_ADDR_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_ADDR_ADDR_USE_CD_ID FOREIGN KEY (USE_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- INDEX FO ADDRESS
CREATE INDEX ENT_ADDR_ENT_ID_IDX ON ENT_ADDR_TBL(ENT_ID);

CREATE INDEX ENT_ADDR_VRSN_IDX ON ENT_ADDR_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);



-- ENTITY ADDRESS COMPONENT TABLE
CREATE TABLE ENT_ADDR_CMP_TBL (
	CMP_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	TYP_CD_ID BLOB(16), -- THE TYPE OF THE COMPONENT (STREET, CITY, ETC.)
	SEQ_ID INTEGER UNIQUE, -- THE CHAR(16) FOR THE ADDRESS VALUE
	ADDR_ID BLOB(16) NOT NULL, -- THE CHAR(16) FOR THE ADDRESS TO WHICH THE COMPONENT APPLIES
	VAL VARCHAR(512) NOT NULL, -- THE VALUE OF THE ADDRESS
	CONSTRAINT PK_ENT_ADDR_CMP_TBL PRIMARY KEY(CMP_ID),
	CONSTRAINT FK_ENT_ADDR_CMP_TYP_CD_ID FOREIGN KEY (TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_ADDR_CMP_ADDR_ID FOREIGN KEY (ADDR_ID) REFERENCES ENT_ADDR_TBL(ADDR_ID)
);



-- HACK FOR SQLITE
CREATE TRIGGER TRG_ADDR_CMP_AU AFTER INSERT ON ENT_ADDR_CMP_TBL 
	FOR EACH ROW 
	WHEN NEW.SEQ_ID IS NULL	BEGIN
		UPDATE ENT_ADDR_CMP_TBL SET SEQ_ID = ROWID WHERE CMP_ID = NEW.CMP_ID;
	END;

CREATE INDEX ENT_ADDR_CMP_ADDR_ID_IDX ON ENT_ADDR_CMP_TBL(ADDR_ID);

CREATE INDEX ENT_ADDR_CMP_VAL_VAL_IDX ON ENT_ADDR_CMP_TBL(VAL);

-- ENTITY NAME TABLE
CREATE TABLE ENT_NAME_TBL (
	NAME_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE NAME APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE ENTITY SEQUENCE AT WHICH THE NAME BECOMES ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE ENTITY SEQUENCE WHERE THE NAME IS NO LONGER ACTIVE
	USE_CD_ID BLOB(16) NOT NULL, -- THE USE OF THE NAME (LEGAL, ETC.)
	CONSTRAINT PK_ENT_NAME_TBL PRIMARY KEY (NAME_ID),
	CONSTRAINT FK_ENT_NAME_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_NAME_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_NAME_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_NAME_USE_CD_ID FOREIGN KEY (USE_CD_ID) REFERENCES CD_TBL(CD_ID)
);


CREATE INDEX ENT_NAME_ENT_ID_IDX ON ENT_NAME_TBL(ENT_ID);

CREATE INDEX ENT_NAME_VRSN_IDX ON ENT_NAME_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- ENTITY NAME COMPONENT
CREATE TABLE ENT_NAME_CMP_TBL (
	CMP_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	TYP_CD_ID BLOB(16), -- THE TYPE OF COMPONENT (FAMILY, GIVEN, ETC);
	SEQ_ID INTEGER UNIQUE, -- THE PHONETIC CODE FOR THE NAME
	NAME_ID BLOB(16) NOT NULL, -- THE NAME TO WHICH THE COMPONENT APPLIES
	VAL VARCHAR(512) NOT NULL, -- THE VALUE OF THE ADDRESS
	CONSTRAINT PK_ENT_NAME_CMP_TBL PRIMARY KEY (CMP_ID),
	CONSTRAINT FK_ENT_NAME_CMP_TYP_CD_ID FOREIGN KEY (TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_NAME_CMP_NAME_ID FOREIGN KEY (NAME_ID) REFERENCES ENT_NAME_TBL(NAME_ID)
);



-- HACK FOR SQLITE
CREATE TRIGGER TRG_NAME_CMP_AU AFTER INSERT ON ENT_NAME_CMP_TBL 
	FOR EACH ROW 
	WHEN NEW.SEQ_ID IS NULL BEGIN
		UPDATE ENT_NAME_CMP_TBL SET SEQ_ID = ROWID WHERE CMP_ID = NEW.CMP_ID;
	END;


CREATE INDEX ENT_NAME_CMP_NAME_ID_IDX ON ENT_NAME_CMP_TBL(NAME_ID);

CREATE INDEX ENT_NAME_CMP_VAL_VAL_IDX ON ENT_NAME_CMP_TBL(VAL);

-- ENTITY EXTENSIONS TABLE
CREATE TABLE ENT_EXT_TBL (
	ENT_EXT_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE EXTENSION APPLIES
	EXT_TYP_ID BLOB(16) NOT NULL, -- THE TYPE OF ENTITY EXTENSION
	EXT_VAL BLOB, -- THE VALUE OF THE EXTENSION
	EXT_DISP VARCHAR(4096), -- A DISPLAY OF THE ENTITY EXTENSION
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- EFFECTIVE VERSION IDENTIFIER
	OBSLT_VRSN_SEQ_ID INTEGER, -- OBSOLETIONS VERSION SEQ
	CONSTRAINT PK_ENT_EXT_TBL PRIMARY KEY (ENT_EXT_ID),
	CONSTRAINT FK_ENT_EXT_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_EXT_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_EXT_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_EXT_TYP_ID FOREIGN KEY (EXT_TYP_ID) REFERENCES EXT_TYP_TBL(EXT_TYP_ID)
);


CREATE INDEX ENT_EXT_ENT_ID_IDX ON ENT_EXT_TBL(ENT_ID);

CREATE INDEX ENT_EXT_VRSN_IDX ON ENT_EXT_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- ENTITY IDENTIFIER TABLE
CREATE TABLE ENT_ID_TBL (
	ENT_ID_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE IDENTIFIER IS ATTACHED
	ID_TYP_ID BLOB(16), -- THE TYPE OF IDENTIIFER
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION WHEN THE IDENTIFIER WAS ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- OBSOLETE VERSION SEQUENCE ID
	DMN_ID BLOB(16) NOT NULL, -- THE ASSIGNING AUTHORITY OF THE IDENTIFIER
	ID_VAL VARCHAR(64) NOT NULL, -- THE VALUE OF THE IDENTIFIER
	ISS_DT BIGINT,
	EXP_DT BIGINT, 
	CHK_DGT VARCHAR(10),
	REL INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT PK_ENT_ID_TBL PRIMARY KEY (ENT_ID_ID),
	CONSTRAINT FK_ENT_ID_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_ID_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_ID_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_ID_DMN_ID FOREIGN KEY (DMN_ID) REFERENCES ID_DMN_TBL(DMN_ID)

);



CREATE INDEX ENT_ID_VRSN_IDX ON ENT_ID_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ENT_ID_ENT_ID_IDX ON ENT_ID_TBL(ENT_ID);

CREATE UNIQUE INDEX ENT_ID_ENT_VAL_UQ_IDX ON ENT_ID_TBL(EFFT_VRSN_SEQ_ID, DMN_ID, ID_VAL);


-- TELECOM ADDRESS
CREATE TABLE ENT_TEL_TBL (
	TEL_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE TELECOM ADDRESS APPLIES
	TYP_CD_ID BLOB(16), -- THE TYPE OF ADDRESS (FAX, TEL, EMAIL, PAGER, ETC.)
	USE_CD_ID BLOB(16) NOT NULL, -- IDENTIIFES THE USE OF THE ADDRESS (HOME, WORK, ETC.)
	TEL_VAL VARCHAR(196) NOT NULL, -- THE VALUE OF THE ADDRESS
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION SEQUENCE WHEN THE ADDRESS IS ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION SEQUENCE WHEN TH ADDRESS IS OBSOLETE
	CONSTRAINT PK_ENT_TEL_TBL PRIMARY KEY (TEL_ID),
	CONSTRAINT FK_ENT_TEL_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_TEL_TYP_CD_ID FOREIGN KEY (TYP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_TEL_USE_CD_ID FOREIGN KEY (USE_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ENT_TEL_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_TEL_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID)
);


CREATE INDEX ENT_TEL_VRSN_IDX ON ENT_TEL_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ENT_TEL_ENT_ID_IDX ON ENT_TEL_TBL(ENT_ID);

CREATE INDEX ENT_TEL_VAL_IDX ON ENT_TEL_TBL(TEL_VAL);


-- PLACE TABLE
CREATE TABLE PLC_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY VERSION THIS PLACE REPRESENTS
	MOB_IND BOOLEAN DEFAULT FALSE NOT NULL, -- TRUE IF THE PLACE HAS NO FIXED ADDRESS
	
	CONSTRAINT PK_PLC_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_PLC_ENT_VRSN_TBL FOREIGN KEY (ENT_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID)
);


-- PLACE SERVICE TABLE
CREATE TABLE PLC_SVC_TBL (
	SVC_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE SERVICE APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- EFFECTIVE VERSION SEQUENCE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION WHEERE THE SERVICE WAS REMOVED
	SVC_CD_ID BLOB(16) NOT NULL, -- THE CONCEPT WHICH DEFINES THE SERVICE
	SCHDL BLOB SUB_TYPE TEXT NOT NULL, -- THE SERVICE SCHEDULE
	CONSTRAINT PK_PLC_SVC_TBL PRIMARY KEY (SVC_ID),
	CONSTRAINT FK_PLC_SVC_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_PLC_SVC_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_PLC_SVC_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_PLC_SVC_CD_ID FOREIGN KEY (SVC_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- ORGANIZATION TABLE
CREATE TABLE ORG_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY VERSION TO WHICH THIS ORG APPLIES
	IND_CD_ID BLOB(16), -- THE INDUSTRY CONCEPT OF THE ORGANIZATION
	CONSTRAINT PK_ORG_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_ORG_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID), 
	CONSTRAINT FK_ORG_IND_CD_ID FOREIGN KEY (IND_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- APPLICATION ENTITY
CREATE TABLE APP_ENT_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE VERISON APPLIES
	SEC_APP_ID BLOB(16), -- THE SECURITY APPLICATION ASSOCIATION EDITH THE ENTITY
	SOFT_NAME VARCHAR(64) NOT NULL, -- THE NAME OF THE SOFTWARE PRODUCT THIS APPLICATION ENTITY REPRESENTS
	VER_NAME VARCHAR(64), -- THE VERSION NAME OF THE ENTITY 
	VND_NAME VARCHAR(64), -- THE VENDOR NAME
	CONSTRAINT PK_APP_ENT_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_APP_ENT_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_APP_ENT_SEC_APP_ID FOREIGN KEY (SEC_APP_ID) REFERENCES SEC_APP_TBL(APP_ID)
);


CREATE INDEX APP_ENT_SEC_APP_ID_IDX ON APP_ENT_TBL(SEC_APP_ID);


-- DEVICE ENTITY 
CREATE TABLE DEV_ENT_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY VERSION TO WHICH THE DEVICE INFORMATION APPLIES
	SEC_DEV_ID BLOB(16), -- THE SECURITY DEVICE TO WHICH THE DEVICE INFORMATION APPLIES
	MNF_NAME VARCHAR(64) NOT NULL, -- THE NAME THE MANUFACTURER GAVE TO THE DEVICE
	OS_NAME VARCHAR(64), -- THE NAME OF THE OPERATING SYSTEM ON THE DEVICE
	CONSTRAINT PK_DEV_ENT_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_DEV_ENT_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_DEV_SEC_DEV_ID FOREIGN KEY (SEC_DEV_ID) REFERENCES SEC_DEV_TBL(DEV_ID)
);


CREATE INDEX DEV_ENT_SEC_APP_ID_IDX ON DEV_ENT_TBL(SEC_DEV_ID);


-- MATERIALS TABLE
CREATE TABLE MAT_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY VERSION TO WHICH TH EMATERIAL DATA APPLIES
	EXP_UTC DATE, -- THE DATE WHEN THE MATERIAL EXPIRES
	FRM_CD_ID BLOB(16), -- THE FORM OF THE MATERIAL (CAPSULES, INJECTION, ETC),
	QTY DECIMAL(18,4), -- THE QUANTITY OF THIS OBJECT IN THE PARENT OBJECT
	QTY_CD_ID BLOB(16), -- IDENTIFIES THE QUANTITY UNITS OF MATERIAL 
	IS_ADM BOOLEAN DEFAULT FALSE NOT NULL, -- TRUE IF THE MATERIAL ISN'T A REAL MATERIAL, RATHER EXISTS FOR ADMINISTRATIVE TRACKING PURPOSES
	CONSTRAINT PK_MAT_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_MAT_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_MAT_FRM_CD_ID FOREIGN KEY (FRM_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_MAT_QTY_CD_ID FOREIGN KEY (QTY_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- MANUFACTURED MATERIALS TABLE
CREATE TABLE MMAT_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE MATERIAL VERSION ID
	LOT_NO VARCHAR(32), -- THE LOT NUMBER OF THE MMAT
	CONSTRAINT PK_MMAT_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_MMAT_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES MAT_TBL(ENT_VRSN_ID)
);


CREATE INDEX MMAT_LOT_NO_IDX ON MMAT_TBL (LOT_NO);


-- PERSON TABLE
CREATE TABLE PSN_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY VERSION ID TO WHICH TH EPERSON INFO 
	DOB INTEGER, -- DATE OF BIRTH OF THE PERSON
	DOB_PREC CHAR(1) CHECK (DOB_PREC IN ('Y','M','D')), -- THE PRECISION OF TH EDATE
	OCC_CD_ID BLOB(16), 
	GNDR_CD_ID BLOB(16),
	CONSTRAINT PK_PSN_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_PSN_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES ENT_VRSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_PSN_OCC_CD_ID FOREIGN KEY (OCC_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PSN_GNDR_CD_ID FOREIGN KEY (GNDR_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- PERSON LANGUAGE COMMUNICATION TABLE
CREATE TABLE PSN_LNG_TBL (
	LNG_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE PERSON TO WHICH THE LANGUAGE APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION OF THE PERSON ENTITY WHERE THIS BECOMES ACTIVE
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE OBSOLETION VERISON OF THE PERSON LANGUAGE
	LNG_CS CHAR(5) NOT NULL, -- THE LANGUAGE CODE REPRESENTING THE COMMUNICATION
	PREF_IND BOOLEAN DEFAULT FALSE NOT NULL, -- PREFERENCE INDICATOR
	CONSTRAINT PK_PSN_LNG_TBL PRIMARY KEY (LNG_ID),
	CONSTRAINT FK_PSN_LNG_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_PSN_LNG_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_PSN_LNG_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID)
);


CREATE INDEX PSN_LNG_ENT_ID_IDX ON PSN_LNG_TBL(ENT_ID);

CREATE INDEX PSN_LNG_VRSN_IDX ON PSN_LNG_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);


-- PATIENT TABLE
CREATE TABLE PAT_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION ID OF THE ENTITY VERSION TO WHICH THE PATIENT INFO APPLIES
	DCSD_UTC INTEGER, -- THE DATE THE PATIENT DIED
	DCSD_PREC CHAR(1) CHECK (DCSD_PREC IN ('Y','M','D')),
	MB_ORD INTEGER, -- THE ORDER IN WHICH THE PATIENT WAS BORN
	MRTL_STS_CD_ID BLOB(16), -- MARITAL STATUS KEY
	EDU_LVL_CD_ID BLOB(16), -- EDUCATION LEVEL KEY
	LVN_ARG_CD_ID BLOB(16), -- LIVING ARRANGEMENT
	RLGN_CD_ID BLOB(16), -- RELIGION CODE
	ETH_GRP_CD_ID BLOB(16), -- ETHNIC GROUP KEY
	VIP_STS_CD_ID BLOB(16), -- VIP STATUS
	NAT_CD_ID BLOB(16), -- NATIONALITY
	CONSTRAINT PK_PAT_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_PAT_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES PSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_PSN_MRTL_STS_CD_ID FOREIGN KEY (MRTL_STS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_EDU_LVL_CD_ID FOREIGN KEY (EDU_LVL_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_LVN_ARG_CD_ID FOREIGN KEY (LVN_ARG_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_RLGN_CD_ID FOREIGN KEY (RLGN_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_EHT_GRP_CD_ID FOREIGN KEY (ETH_GRP_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_VIP_STS_CD_ID FOREIGN KEY (VIP_STS_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_PAT_NAT_CD_ID FOREIGN KEY (NAT_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- PROVIDER TABLE
CREATE TABLE PVDR_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE VERSION OF THE PERSON TO WHICH THE PROVIDER INFO APPLIES
	SPEC_CD_ID BLOB(16), -- THE PROVIDER'S SPECIALTY
	CONSTRAINT PK_PVDR_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_PVDR_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES PSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_PVDR_SPEC_CD_ID FOREIGN KEY (SPEC_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- USER ENTITY TABLE
CREATE TABLE USR_ENT_TBL (
	ENT_VRSN_ID BLOB(16) NOT NULL, -- THE ENTITY VERSION OF THE PERSON THE ENTITY APPLIES TO
	SEC_USR_ID BLOB(16) NOT NULL, -- THE SECURITY USER IDENTIFIER OF THE USER ENTITY
	CONSTRAINT PK_USR_ENT_TBL PRIMARY KEY (ENT_VRSN_ID),
	CONSTRAINT FK_USR_ENT_VRSN_ID FOREIGN KEY (ENT_VRSN_ID) REFERENCES PSN_TBL(ENT_VRSN_ID),
	CONSTRAINT FK_USR_ENT_SEC_USR_ID FOREIGN KEY (SEC_USR_ID) REFERENCES SEC_USR_TBL(USR_ID)
);


CREATE INDEX USR_ENT_SEC_USR_ID_IDX ON USR_ENT_TBL(SEC_USR_ID);


-- NARRATIVE DESCRIPTION TABLE
CREATE TABLE NAR_TBL (
	ACT_VRSN_ID BLOB(16) NOT NULL,
	VER VARCHAR(32), -- VERSION OF THE NARRATIVE
	LANG_CS VARCHAR(4) NOT NULL, -- LANGUAGE CODE
	TITLE VARCHAR(512) NOT NULL, -- TITLE
	MIME VARCHAR(64) NOT NULL, -- MIME TYPE
	TEXT BLOB,
	CONSTRAINT PK_NAR_TBL PRIMARY KEY (ACT_VRSN_ID),
	CONSTRAINT FK_NAR_ACT_VRSN_TBL FOREIGN KEY (ACT_VRSN_ID) REFERENCES ACT_VRSN_TBL(ACT_VRSN_ID)
); 

-- CLINICAL PROTOCOL DEFINITION TABLE
CREATE TABLE PROTO_TBL (
	PROTO_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	PROTO_NAME VARCHAR(64) NOT NULL, -- NAME FO THE PROTOCOL (EX: CHILDHOOD VACCINATIONS)
	OID VARCHAR(64), -- THE OID OF THE PROTOCOL
	DEFN BLOB, -- THE DEFINITION FILE WHICH DEFINES THE PROTOCOL IN A FORMAT THAT THE HANDLER CAN USE
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE TIME THE PROTOCOL DEFINITION WAS CREATE
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHICH CREATE THE PROTOCOL
	OBSLT_UTC BIGINT, -- THE TIME WHEN THE PROTOCOL DEFINITION WAS OBSOLETED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE PROTOCL DEFINITION
	RPLC_PROTO_ID BLOB(16), -- IF THE PROTOCOL REPLACES A PREVIOUS PROTOCOL
	NAR_ID BLOB(16), -- NARRATIVE DESCRIPTION IDENTIFIER
	HDLR_CLS VARCHAR(512),
	CONSTRAINT PK_PROTO_TBL PRIMARY KEY (PROTO_ID),
	CONSTRAINT FK_PROTO_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_PROTO_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_PROTO_RPLC_PROTO_ID FOREIGN KEY (RPLC_PROTO_ID) REFERENCES PROTO_TBL(PROTO_ID),
	CONSTRAINT FK_PROTO_NAR_TBL FOREIGN KEY (NAR_ID) REFERENCES ACT_TBL(ACT_ID)
);


-- INDEX FOR PROTOCOL BY OID
CREATE UNIQUE INDEX PROTO_NAME_UQ_IDX ON PROTO_TBL(PROTO_NAME) WHERE OBSLT_UTC IS NULL;


-- PROTOCOL TO ACT TABLE
CREATE TABLE ACT_PROTO_ASSOC_TBL (
	PROTO_ID BLOB(16) NOT NULL, 
	ACT_ID BLOB(16) NOT NULL, -- THE ACT TO WHICH THE PROTOCOL APPLIES
	SEQ INT NOT NULL, -- INDICATES THE SEQUENCE IN THE CARE PROTOCOL
	IS_COMPL BOOLEAN DEFAULT FALSE NOT NULL, -- INDICATES THAT THE ACT IS A TERMINAL STATE OF THE PROTOCOL
	STATE_DAT BLOB, -- ANY STATE DATA THE PROTOCOL HANDLER WISHES TO ATTACH
	VER VARCHAR(32), 
	CONSTRAINT PK_ACT_PROTO_ASSOC_TBL PRIMARY KEY (PROTO_ID, ACT_ID),
	CONSTRAINT FK_ACT_PROTO_ASSOC_PROTO_ID FOREIGN KEY (PROTO_ID) REFERENCES PROTO_TBL(PROTO_ID),
	CONSTRAINT FK_ACT_PROTO_ASSOC_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID)
);


CREATE INDEX ACT_PROTO_ASSOC_ACT_ID_IDX ON ACT_PROTO_ASSOC_TBL(ACT_ID);


-- ACT NOTES TABLE
CREATE TABLE ACT_NOTE_TBL (
	NOTE_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ACT_ID BLOB(16) NOT NULL, -- THE ACT TO WHICH THE NOTE APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION OF HTE ACT WHERE THE NOTE WAS ADDED
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION OF THE ACT WHERE THE NOTE WAS REMOVED
	AUTH_ENT_ID BLOB(16) NOT NULL, -- THE UAHTOR WHO CREATED THE NOTE (SINCE A NOTE CAN BE ATTACHED WITHOUT CREATING A NEW VERSION)
	NOTE_TXT BLOB NOT NULL, -- THE NOTE BLOB SUB_TYPE TEXT
	CONSTRAINT PK_ACT_NOTE_TBL PRIMARY KEY (NOTE_ID),
	CONSTRAINT FK_ACT_NOTE_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_NOTE_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_NOTE_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_NOTE_AUTH_ENT_ID FOREIGN KEY (AUTH_ENT_ID) REFERENCES ENT_TBL(ENT_ID)
);


CREATE INDEX ACT_NOTE_VRSN_IDX ON ACT_NOTE_TBL (EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ACT_NOTE_ACT_ID_IDX ON ACT_NOTE_TBL(ACT_ID);


-- ENTITY NOTE TABLE
CREATE TABLE ENT_NOTE_TBL (
	NOTE_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE NOTE APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION OF HTE ENTITY WHERE THE NOTE WAS ADDED
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERSION OF THE ENTITY WHERE THE NOTE WAS REMOVED
	AUTH_ENT_ID BLOB(16) NOT NULL, -- THE UAHTOR WHO CREATED THE NOTE (SINCE A NOTE CAN BE ATTACHED WITHOUT CREATING A NEW VERSION)
	NOTE_TXT BLOB SUB_TYPE TEXT NOT NULL, -- THE NOTE BLOB SUB_TYPE TEXT
	CONSTRAINT PK_ENT_NOTE_TBL PRIMARY KEY (NOTE_ID),
	CONSTRAINT FK_ENT_NOTE_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ENT_NOTE_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_NOTE_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ENT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ENT_NOTE_AUTH_ENT_ID FOREIGN KEY (AUTH_ENT_ID) REFERENCES ENT_TBL(ENT_ID)
);


CREATE INDEX ENT_NOTE_VRSN_IDX ON ENT_NOTE_TBL (EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ENT_NOTE_ENT_ID_IDX ON ENT_NOTE_TBL(ENT_ID);



-- ACT PARTICIPATION TABLE
CREATE TABLE ACT_PTCPT_TBL (
	ACT_PTCPT_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	ENT_ID BLOB(16) NOT NULL, -- THE ENTITY TO WHICH THE PARTICIPATION APPLIES
	ACT_ID BLOB(16) NOT NULL, -- THE ACT TO WHICH THE PARTICIPATION APPLIES
	EFFT_VRSN_SEQ_ID INTEGER NOT NULL, -- THE VERSION OF THE ACT WHERE THE PARTICIPATION IS ACTIVATED
	OBSLT_VRSN_SEQ_ID INTEGER, -- THE VERISON OF THE ACT WHERE THE PARTICIPATION IS NO LONGER ACTIVE
	QTY INT DEFAULT 1, -- THE QUANTITY OF ENTITY PARTICIPATING IN ACT
	ROL_CD_ID BLOB(16) NOT NULL, -- THE ROLE THAT THE ENTITY PLAYS IN ACT
	PTCPT_SEQ_ID INTEGER,
	CLS_CD_ID BLOB(16), -- CLASSIFICATION OF THE ACT
	CONSTRAINT PK_ACT_PTCPT_TBL PRIMARY KEY (ACT_PTCPT_ID),
	CONSTRAINT FK_ACT_PTCPT_ENT_ID FOREIGN KEY (ENT_ID) REFERENCES ENT_TBL(ENT_ID),
	CONSTRAINT FK_ACT_PTCPT_ACT_ID FOREIGN KEY (ACT_ID) REFERENCES ACT_TBL(ACT_ID),
	CONSTRAINT FK_ACT_PTCPT_EFFT_VRSN_SEQ_ID FOREIGN KEY (EFFT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_PTCPT_OBSLT_VRSN_SEQ_ID FOREIGN KEY (OBSLT_VRSN_SEQ_ID) REFERENCES ACT_VRSN_TBL(VRSN_SEQ_ID),
	CONSTRAINT FK_ACT_PTCPT_ROL_CD_ID FOREIGN KEY (ROL_CD_ID) REFERENCES CD_TBL(CD_ID),
	CONSTRAINT FK_ACT_PTCPT_CLS_CD_ID FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL(CD_ID)
);


-- HACK FOR SQLITE
CREATE TRIGGER TRG_ACT_PTCPT_AU AFTER INSERT ON ACT_PTCPT_TBL 
	FOR EACH ROW 
	WHEN NEW.PTCPT_SEQ_ID IS NULL BEGIN
		UPDATE ACT_PTCPT_TBL SET PTCPT_SEQ_ID = ROWID WHERE ACT_PTCPT_ID = NEW.ACT_PTCPT_ID;
	END;

CREATE INDEX ACT_PTCPT_ENT_ID_IDX ON ACT_PTCPT_TBL(ENT_ID);

CREATE INDEX ACT_PTCPT_ACT_ID_IDX ON ACT_PTCPT_TBL(ACT_ID);

CREATE INDEX ACT_PTCPT_VRSN_ID_IDX ON ACT_PTCPT_TBL(EFFT_VRSN_SEQ_ID, OBSLT_VRSN_SEQ_ID);

CREATE INDEX ACT_PTCPT_ACT_ROL_IDX ON ACT_PTCPT_TBL(ACT_ID, ROL_CD_ID);

CREATE INDEX ACT_PTCPT_ENT_ROL_IDX ON ACT_PTCPT_TBL(ENT_ID, ROL_CD_ID);


-- ALERT MESSAGES
CREATE TABLE MAIL_MSG_TBL (
	MAIL_MSG_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- TIME THE ALERT WAS CREATED
	CRT_PROV_ID BLOB(16) NOT NULL, -- THE USER WHO CREATED THE ALERT
	OBSLT_UTC BIGINT, -- THE TIME THE ALERT WAS REMOVED
	OBSLT_PROV_ID BLOB(16), -- THE USER WHICH OBSOLETED THE ALERT
	UPD_UTC BIGINT, -- THE TIME THE ALERT WAS UPDATED
	UPD_PROV_ID BLOB(16), -- THE USER WHICH UPDATED THE ALERT
	FROM_INFO VARCHAR(128) NOT NULL, -- THE INFORMATION WHICH APPEARS IN THE FROM HEADER (EXAMPLE: THE FROM MIME HEADER)
	TO_INFO VARCHAR(128) NOT NULL, -- THE INFORMATION WHICH APPEARS IN THE TO HEADER (EXAMPLE: FROM MIME)
	MSG_UTC BIGINT DEFAULT (unixepoch()) NOT NULL, -- THE INTEGER OF THE MESSAGE
	SUBJ VARCHAR(256), -- THE SUBJECT OF THE MESSAGE
	BODY BLOB NOT NULL, -- THE BODY OF THE MESSAGE
	FLAGS INT DEFAULT 0 NOT NULL, -- FLAGS OF THE MESSAGE
	CONSTRAINT PK_MAIL_TBL PRIMARY KEY (MAIL_MSG_ID),
	CONSTRAINT FK_MAIL_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_MAIL_UPD_PROV_ID FOREIGN KEY (UPD_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_MAIL_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT CK_MAIL_UPD_USR CHECK ((UPD_PROV_ID IS NOT NULL AND UPD_UTC IS NOT NULL) OR (UPD_PROV_ID IS NULL AND UPD_UTC IS NULL))
	CONSTRAINT CK_MAIL_OBSLT_USR CHECK ((OBSLT_PROV_ID IS NULL AND OBSLT_UTC IS NULL) OR (OBSLT_PROV_ID IS NOT NULL AND OBSLT_UTC IS NOT NULL))
);


-- INDEX
CREATE INDEX MAIL_TO_INFO_IDX ON MAIL_MSG_TBL(TO_INFO);


-- ALERT RECIPIENT (RCPT TO) TABLE
CREATE TABLE MAIL_MSG_RCPT_TO_TBL (
	MAIL_MSG_ID BLOB(16) NOT NULL, -- THE ALERT TO WHICH THE RCPT TO APPLIES
	USR_ID BLOB(16) NOT NULL, -- THE RCPT TO USER 
	CONSTRAINT PK_MAIL_RCPT_TO_TBL PRIMARY KEY (MAIL_MSG_ID, USR_ID),
	CONSTRAINT FK_MAIL_RCPT_TO_MAIL_MSG_ID FOREIGN KEY (MAIL_MSG_ID) REFERENCES MAIL_MSG_TBL(MAIL_MSG_ID),
	CONSTRAINT FK_MAIL_RCPT_TO_USR_ID FOREIGN KEY (USR_ID) REFERENCES SEC_USR_TBL(USR_ID)
);


CREATE INDEX MAIL_RCPT_TO_USR_ID_IDX ON MAIL_MSG_RCPT_TO_TBL(USR_ID);

CREATE INDEX MAIL_RCPT_TO_MAIL_MSG_ID_IDX ON MAIL_MSG_RCPT_TO_TBL(MAIL_MSG_ID);


CREATE TABLE MAIL_BOX_TBL (
	MAIL_BOX_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL, 
	OWN_ID BLOB(16) NOT NULL, -- THE USER WHICH OWNS THIS MAILBOX
	NAME VARCHAR(32) NOT NULL, -- THE NAME OF HTE MAILBOX
	CRT_UTC BIGINT NOT NULL DEFAULT (unixepoch()), 
	CRT_PROV_ID BLOB(16) NOT NULL, 
	OBSLT_UTC BIGINT, 
	OBSLT_PROV_ID BLOB(16),
	CONSTRAINT PK_MAIL_BOX_TBL PRIMARY KEY (MAIL_BOX_ID),
	CONSTRAINT FK_MAIL_BOX_OWNR_ID FOREIGN KEY (OWN_ID) REFERENCES SEC_USR_TBL(USR_ID),
	CONSTRAINT FK_MAIL_BOX_CRT_PROV_ID FOREIGN KEY (CRT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID),
	CONSTRAINT FK_MAIL_BOX_OBSLT_PROV_ID FOREIGN KEY (OBSLT_PROV_ID) REFERENCES SEC_PROV_TBL(PROV_ID)
);


CREATE UNIQUE INDEX MAIL_BOX_OWN_NAME_IDX ON MAIL_BOX_TBL(OWN_ID, LOWER(NAME)) WHERE OBSLT_UTC IS NULL;

CREATE INDEX MAIL_BOX_OWN_IDX ON MAIL_BOX_TBL(OWN_ID);

CREATE TABLE MAIL_BOX_MSG_ASSOC_TBL (
	MAIL_BOX_MSG_ID BLOB(16) NOT NULL DEFAULT (randomblob(16)),
	MAIL_BOX_ID BLOB(16) NOT NULL,
	MAIL_MSG_ID BLOB(16) NOT NULL,
	STS INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT PK_MAIL_BOX_MSG_TBL PRIMARY KEY (MAIL_BOX_MSG_ID),
	CONSTRAINT FK_MAIL_BOX_MSG_BOX_ID FOREIGN KEY (MAIL_BOX_ID) REFERENCES MAIL_BOX_TBL (MAIL_BOX_ID),
	CONSTRAINT FK_MAIL_BOX_MSG_MSG_ID FOREIGN KEY (MAIL_MSG_ID) REFERENCES MAIL_MSG_TBL (MAIL_MSG_ID)
); 
-- PATCHES TABLE
CREATE TABLE PATCH_DB_SYSTBL (
	PATCH_ID VARCHAR(36) NOT NULL, 
	APPLY_DATE INTEGER DEFAULT (unixepoch()) NOT NULL,
	INFO_NAME VARCHAR(256), 
	CONSTRAINT PK_PTCH_DB_SYSTBL PRIMARY KEY (PATCH_ID)
);



-- INDECIES FROM PATCHES
CREATE INDEX ent_addr_cmp_typ_cd_idx ON ent_addr_cmp_tbl(typ_cd_id);

CREATE INDEX act_ptcpt_rol_cd_idx ON act_ptcpt_tbl(rol_cd_id);



INSERT INTO SEC_PROV_TBL (PROV_ID, USR_ID, APP_ID) VALUES (x'76A0DCFA90366E4AAF9EF1CD68E8C7E8', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8', x'8D9F5B4CF449014196624270895224B2');


-- CREATE USER CLASSES   
INSERT INTO SEC_USR_CLS_CDTBL (CLS_ID, MNEMONIC) VALUES (x'422B93334B6F594688496ACA54139D8E','HumanUser');

INSERT INTO SEC_USR_CLS_CDTBL (CLS_ID, MNEMONIC) VALUES (x'AD4DCDE959272240AB0792FCFB236A98','ApplicationUser');

INSERT INTO SEC_USR_CLS_CDTBL (CLS_ID, MNEMONIC) VALUES (x'34BB719F91960F4482499C831EA16D58','SystemUser');


-- Create a system user
INSERT INTO SEC_USR_TBL (USR_ID, USR_NAME, PASSWD, SEC_STMP, CLS_ID, FAIL_LOGIN) VALUES (x'76A0DCFA90366E4AAF9EF1CD68E8C7E8', 'SYSTEM','XXXX','XXXX', x'34BB719F91960F4482499C831EA16D58', 0);

-- Create the anonymous user
INSERT INTO SEC_USR_TBL (USR_ID, USR_NAME, PASSWD, SEC_STMP, CLS_ID) VALUES (x'F05968C93C0480448DABF69D6E86696C', 'ANONYMOUS','XXXX','XXXX', x'34BB719F91960F4482499C831EA16D58');    


-- SET users to created by anonymous
UPDATE SEC_USR_TBL SET CRT_PROV_ID = x'76A0DCFA90366E4AAF9EF1CD68E8C7E8';


-- BUILT IN OPENIZ POLICIES
INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'5AC073DA5931C848BBCB741911D91CD2', '1.3.6.1.4.1.33349.3.1.5.9.2', 'Unrestricted All', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'5AC073EA5931C848BBCB741911D91CD2', '1.3.6.1.4.1.33349.3.1.5.9.2.0', 'Unrestricted Administrative Function', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CFC10AD86E3D9F42A4A088C0BBBC839D', '1.3.6.1.4.1.33349.3.1.5.9.2.0.1', 'Change Password', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AC650D9C3E61674A8BC65CE2C0B42160', '1.3.6.1.4.1.33349.3.1.5.9.2.0.2', 'Create Role', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'27C2BC79130DBF4FA83EF2B9FCE34151', '1.3.6.1.4.1.33349.3.1.5.9.2.0.3', 'Alter Role', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286ABE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.4', 'Create Identity', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286BBE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.5', 'Create Device', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286CBE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.6', 'Create Application', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286DBE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.7', 'Administer Concept Dictionary', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286EBE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.8', 'Alter Identity', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286FBE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.9', 'Alter Policy', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB4286FAE4289E4EBD7BD6DC72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.0.10', 'Administer Data Warehouse', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');



INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965BD16C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1', 'Login', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965BE16C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0', 'Login as a Service', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965BF16C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0', 'OAUTH Login', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B026C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.1', 'OAUTH client_credentials flow permission', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B126C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.1.0', 'OAUTH client_credentials flow permission no device cred', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B226C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.2', 'OAUTH password flow permission', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B326C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.2.0', 'OAUTH password flow permission no device cred', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B426C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.3', 'OAUTH authoization code grant flow permission', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B526C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.3.0', 'OAUTH authoization code grant flow permission no device cred', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B626C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.4', 'OAUTH Password Reset grant (extended permission)', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AB965B726C64004C9A58EA09EEE67D7C', '1.3.6.1.4.1.33349.3.1.5.9.2.1.0.0.4.0', 'OAUTH Password Reset grant (extended permission) no device cred', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');


INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'360384F6204EC04BB965BAA6D7C80BE3', '1.3.6.1.4.1.33349.3.1.5.9.2.2', 'Unrestricted Clinical Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'47AF1DB8A5175E46A5FD706B168B0265', '1.3.6.1.4.1.33349.3.1.5.9.2.2.0', 'Query Clinical Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'216927D778A0484395F2ED3CDE83E607', '1.3.6.1.4.1.33349.3.1.5.9.2.2.1', 'Write Clinical Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'EE7D022EE4ED3147B7FACB67AE0586BE', '1.3.6.1.4.1.33349.3.1.5.9.2.2.2', 'Delete Clinical Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'BF31B75F594E634880BD51757D58EA3B', '1.3.6.1.4.1.33349.3.1.5.9.2.2.3', 'Read Clinical Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'BF31B75F594E634880BD51757D58EA9A', '1.3.6.1.4.1.33349.3.1.5.9.2.2.4', 'Export Clinical Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA24A1BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.1.0', 'Write Materials', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA25A1BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.1.1', 'Delete Materials', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA26A1BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.0.1.2', 'Read Materials', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA27A1BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.0.1.3', 'Query Materials', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA24A2BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.2.0', 'Write Places & Orgs', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA25A2BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.2.1', 'Delete Places & Orgs', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA26A2BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.0.2.2', 'Read Places & Orgs', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA27A2BA4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.0.2.3', 'Query Places & Orgs', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');


INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA91A8DE4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.999', 'Override Disclosure', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA91A8EE4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4', 'Unrestricted Metadata', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA91A8FE4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.4.0', 'Read Metadata', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');


INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'AA91A80E4D22594881B3C1EB2750067E', '1.3.6.1.4.1.33349.3.1.5.9.2.10', 'Access Client Administrative Function', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');


INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB42860AE4289E4EBD7BD6DF72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.5', 'Unrestricted Data Warehouse', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB42861AE4289E4EBD7BD6DF72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.5.0', 'Write Warehouse Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB42862AE4289E4EBD7BD6DF72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.5.1', 'Delete Warehouse Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB42863AE4289E4EBD7BD6DF72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.5.2', 'Read Warehouse Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID) VALUES (x'CB42864AE4289E4EBD7BD6DF72B729B2', '1.3.6.1.4.1.33349.3.1.5.9.2.5.3', 'Query Warehouse Data', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');


INSERT INTO SEC_POL_TBL (POL_ID, OID, POL_NAME, CRT_PROV_ID, IS_ELEV) VALUES (x'35EDF1362E551A428F59629561AB9EB6', '1.3.6.1.4.1.33349.3.1.5.9.3', 'Restricted Information', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8', true);


-- INSERT THE DEFAULT ASSOCIATIONS
-- CREATE USERS ROLE
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'E88AE5F4BD8B3546A6D48A195B143436', 'USERS', 'Group for users who have login access', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BD16C64004C9A58EA09EEE67D7C', x'E88AE5F4BD8B3546A6D48A195B143436', 2); -- GRANT Login


-- CREATE ADMINISTRATORS ROLE
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 'ADMINISTRATORS', 'Group for users who have administrative access', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'5AC073EA5931C848BBCB741911D91CD2', x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 2); -- GRANT Access Administrative Function

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BD16C64004C9A58EA09EEE67D7C', x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 2); -- GRANT Login

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'360384F6204EC04BB965BAA6D7C80BE3', x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 0); -- DENY Unrestricted Clinical Data

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8DE4D22594881B3C1EB2750067E', x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 0); -- DENY Override disclosure

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A80E4D22594881B3C1EB2750067E', x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 2); -- GRANT Local Administrator

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8EE4D22594881B3C1EB2750067E', x'1DBAD2F6B55BE341B7FB2EC32418B2E1', 2); -- GRANT Unrestricted Metadata



-- CLINICAL STAFF
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'CB7D1643776F374F8222133E675B4434', 'CLINICAL_STAFF', 'Group for clinic staff', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'5AC073EA5931C848BBCB741911D91CD2', x'CB7D1643776F374F8222133E675B4434', 0); -- GRANT Access Administrative Function

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BD16C64004C9A58EA09EEE67D7C', x'CB7D1643776F374F8222133E675B4434', 2); -- GRANT Login

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'360384F6204EC04BB965BAA6D7C80BE3', x'CB7D1643776F374F8222133E675B4434', 2); -- GRANT Unrestricted Clinical Data

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8DE4D22594881B3C1EB2750067E', x'CB7D1643776F374F8222133E675B4434', 0); -- DENY Override disclosure

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8FE4D22594881B3C1EB2750067E', x'CB7D1643776F374F8222133E675B4434', 2); -- GRANT Read Metadata Administrator


-- CREATE ROLE SYSTEM WHICH IS DENIED LOGIN
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'D221AEC323FC3341BA42B0E0A3B817D7', 'SYSTEM', 'Group for user SYSTEM. Identifies the functions that internal system functions have access to. EDITING THIS ROLE MAY CAUSE SYSTEM FAILURE', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_USR_ROL_ASSOC_TBL (ROL_ID, USR_ID) VALUES (x'D221AEC323FC3341BA42B0E0A3B817D7', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'5AC073DA5931C848BBCB741911D91CD2', x'D221AEC323FC3341BA42B0E0A3B817D7', 2); -- GRANT UNRESTRICTED ALL

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BD16C64004C9A58EA09EEE67D7C', x'D221AEC323FC3341BA42B0E0A3B817D7', 0); -- DENY Login

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8DE4D22594881B3C1EB2750067E', x'D221AEC323FC3341BA42B0E0A3B817D7', 0); -- DENY Override disclosure


-- CREATE ROLE ANONYMOUS WHICH IS DENIED ALL CLINICAL 
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'58D8DBDAC513A344AD7D1C44CECAA4B6', 'ANONYMOUS', 'Group for user ANONYMOUS. Identifies the functions that non-logged in users have access to. EDITING THIS ROLE MAY INTRODUCE SECURITY BREACHES', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_USR_ROL_ASSOC_TBL (ROL_ID, USR_ID) VALUES (x'58D8DBDAC513A344AD7D1C44CECAA4B6', x'F05968C93C0480448DABF69D6E86696C');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'5AC073EA5931C848BBCB741911D91CD2', x'58D8DBDAC513A344AD7D1C44CECAA4B6', 0); -- DENY Access Administrative Function

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BD16C64004C9A58EA09EEE67D7C', x'58D8DBDAC513A344AD7D1C44CECAA4B6', 0); -- DENY Login

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'360384F6204EC04BB965BAA6D7C80BE3', x'58D8DBDAC513A344AD7D1C44CECAA4B6', 0); -- DENY Unrestricted Clinical Data

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8DE4D22594881B3C1EB2750067E', x'58D8DBDAC513A344AD7D1C44CECAA4B6', 0); -- DENY Override disclosure

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8FE4D22594881B3C1EB2750067E', x'58D8DBDAC513A344AD7D1C44CECAA4B6', 0); -- DENY Read Metadata


-- CREATE SYNCHRONIZERS ROLE
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'7C67B7542B685F42A9373AA03D5951F1', 'APPLICATIONS', 'Group for user APPLICATIONS. Identifies the template policies for applications. EDITING THIS ROLE MAY CAUSE SYSTEM FAILURE - YOU SHOULD EDIT POLICIES ON APPLICATIONS DIRECTLY.', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BE16C64004C9A58EA09EEE67D7C', x'7C67B7542B685F42A9373AA03D5951F1', 2); -- GRANT AS Service Login

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'360384F6204EC04BB965BAA6D7C80BE3', x'7C67B7542B685F42A9373AA03D5951F1', 2); -- GRANT Unrestricted Clinical Data

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8FE4D22594881B3C1EB2750067E', x'7C67B7542B685F42A9373AA03D5951F1', 2); -- GRANT Read Metadata

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8EE4D22594881B3C1EB2750067E', x'7C67B7542B685F42A9373AA03D5951F1', 2); -- GRANT Unrestricted metadata

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8DE4D22594881B3C1EB2750067E', x'7C67B7542B685F42A9373AA03D5951F1', 0); -- DENY Override disclosure


-- CREATE DEVICE ROLE
INSERT INTO SEC_ROL_TBL (ROL_ID, ROL_NAME, DESCR, CRT_PROV_ID) VALUES (x'A0053D610DDD1645A30CE733741885F0', 'DEVICE', 'Represents a device in the system. Identifies the functions that are used for devices. EDITING THIS ROLE MAY CAUSE SYSTEM FAILURE - YOU SHOULD EDIT POLICIES ON DEVICES DIRECTLY', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A80E4D22594881B3C1EB2750067E', x'A0053D610DDD1645A30CE733741885F0', 2); -- GRANT Access Client Administrative Function

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'CFC10AD86E3D9F42A4A088C0BBBC839D', x'A0053D610DDD1645A30CE733741885F0', 0); -- DENY Change Any Password

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'CB4286EBE4289E4EBD7BD6DC72B729B2', x'A0053D610DDD1645A30CE733741885F0', 2); -- GRANT Alter Identity

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'CB4286ABE4289E4EBD7BD6DC72B729B2', x'A0053D610DDD1645A30CE733741885F0', 2); -- GRANT Create Identity

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AB965BD16C64004C9A58EA09EEE67D7C', x'A0053D610DDD1645A30CE733741885F0', 2); -- GRANT Login

INSERT INTO SEC_ROL_POL_ASSOC_TBL (SEC_POL_INST_ID, POL_ID, ROL_ID, POL_ACT)  VALUES (randomblob(16), x'AA91A8FE4D22594881B3C1EB2750067E', x'A0053D610DDD1645A30CE733741885F0', 2); -- GRANT Read Metadata


INSERT INTO CD_REL_TYP_CDTBL (REL_TYP_ID, REL_NAME, MNEMONIC, CRT_PROV_ID) VALUES (x'C2AF4D2C6A56AE419EBC3097D7D22F4A', 'Same as', 'SameAs', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO CD_REL_TYP_CDTBL (REL_TYP_ID, REL_NAME, MNEMONIC, CRT_PROV_ID) VALUES (x'3D2927AD3C43754B88D2B5360CD95450', 'Inverse of', 'InverseOf', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO CD_REL_TYP_CDTBL (REL_TYP_ID, REL_NAME, MNEMONIC, CRT_PROV_ID) VALUES (x'5BD459A1343C1B4E9B759193A7528CED', 'Member of', 'MemberOf', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO CD_REL_TYP_CDTBL (REL_TYP_ID, REL_NAME, MNEMONIC, CRT_PROV_ID) VALUES (x'2F4F8BAE9F000D4EB35E5A89555C5947', 'Negation of', 'NegationOf', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO CD_REL_TYP_CDTBL (REL_TYP_ID, REL_NAME, MNEMONIC, CRT_PROV_ID) VALUES (x'2F4F8BAE9F000D4EB35E5A89555C5980', 'Wider-Than', 'WiderThan', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');

INSERT INTO CD_REL_TYP_CDTBL (REL_TYP_ID, REL_NAME, MNEMONIC, CRT_PROV_ID) VALUES (x'2F4F8BAE9F000D4EB35E5A89555C5990', 'Narrower-Than', 'NarrowerThan', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');


INSERT INTO SEC_APP_TBL (APP_ID, APP_PUB_ID, APP_SCRT, CRT_PROV_ID) VALUES (x'8D9F5B4CF449014196624270895224B2', 'SYSTEM', 'XXXXXX', x'76A0DCFA90366E4AAF9EF1CD68E8C7E8');





-- SECURITY SESSIONS TABLE
CREATE TABLE SEC_SES_TBL (
	SES_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	CRT_UTC BIGINT DEFAULT (unixepoch()) NOT NULL , -- THE TIME WHEN THE SESSION WAS ESTABLISHED
	EXP_UTC BIGINT NOT NULL, -- THE TIME WHEN THE SESSION WILL EXPIRE
	APP_ID BLOB(16) NOT NULL, -- THE SECURITY APPLICATION WHICH THE SESSION IS ESTABLISHED FOR
	USR_ID BLOB(16), -- THE USER IDENTIFIER (APPLICATION USER IF APPLICATION GRANT)
	DEV_ID BLOB(16), -- THE DEVICE IDENTIFIER
	RFRSH_TKN VARCHAR(128) UNIQUE, -- THE REFRESH TOKEN FOR THE OBJECT 
	RFRSH_EXP_UTC BIGINT, -- THE TIME THAT THE REFRESH TOKEN EXPIRES
	AUD VARCHAR(128) NOT NULL, -- THE REMOTE IP ADDRESS THAT ESTABLISHED THE SESSION
	CONSTRAINT PK_SEC_SES_TBL PRIMARY KEY (SES_ID),
	CONSTRAINT FK_SEC_SES_APP_ID FOREIGN KEY (APP_ID) REFERENCES SEC_APP_TBL(APP_ID),
	CONSTRAINT FK_SEC_SES_USR_ID FOREIGN KEY (USR_ID) REFERENCES SEC_USR_TBL(USR_ID),
	CONSTRAINT FK_SEC_SES_DEV_ID FOREIGN KEY (DEV_ID) REFERENCES SEC_DEV_TBL(DEV_ID),
	CONSTRAINT CK_SEC_SES_EXP CHECK (EXP_UTC >= CRT_UTC),
	CONSTRAINT CK_SEC_SES_RFRSH_EXP CHECK (RFRSH_EXP_UTC IS NULL OR RFRSH_EXP_UTC >= EXP_UTC)
);


-- SECURITY SESSION CLAIMS TABLE
CREATE TABLE SEC_SES_CLM_TBL ( 
	CLM_ID BLOB(16) DEFAULT (randomblob(16)) NOT NULL,
	SES_ID BLOB(16) NOT NULL, -- THE SESSION TO WHICH THE CLAIM BELONGS
    CLM_TYP VARCHAR(128) NOT NULL, -- THE TYPE OF CLAIM
    CLM_VAL VARCHAR(128) NOT NULL, -- THE VALUE OF THE CLAIM
	CONSTRAINT PK_SEC_SES_CLM_TBL PRIMARY KEY (CLM_ID),
	CONSTRAINT FK_SEC_SES_CLM_SES_ID FOREIGN KEY (SES_ID) REFERENCES SEC_SES_TBL(SES_ID)
);



