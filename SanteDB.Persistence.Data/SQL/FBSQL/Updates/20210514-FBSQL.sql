/** 
 * <feature scope="SanteDB.Persistence.Data" id="20210514-01" name="Update:20210514-01" applyRange="1.1.0.0-1.2.0.0"  invariantName="FirebirdSQL">
 *	<summary>Update: Upgrades primary database from Version 2.0 to Version 3.0</summary>
 *	<isInstalled>select ck_patch('20210514-01') from RDB$DATABASE</isInstalled>
 * </feature>
 */


UPDATE sec_rol_tbl SET rol_name = 'APPLICATIONS' WHERE rol_name = 'SYNCHRONIZERS';--#!
ALTER TABLE sec_ses_tbl DROP CONSTRAINT CK_SEC_SES_RFRSH_EXP; --#!
ALTER TABLE sec_ses_tbl ADD CONSTRAINT CK_SEC_SES_RFRSH_EXP CHECK (RFRSH_EXP_UTC >= EXP_UTC);--#!

CREATE OR ALTER VIEW CD_CUR_VRSN_VW AS
	SELECT CD_VRSN_TBL.*, FALSE AS IS_SYS, CD_CLS_TBL.MNEMONIC AS CLS_MNEMONIC 
	FROM CD_VRSN_TBL INNER JOIN CD_TBL USING (CD_ID)
		INNER JOIN CD_CLS_TBL USING (CLS_ID)
		WHERE CD_VRSN_TBL.OBSLT_UTC IS NULL;--#!

ALTER TABLE CD_TBL DROP IS_SYS;--#!

ALTER TABLE ENT_VRSN_TBL ADD CLS_CD_ID UUID;--#!
ALTER TABLE ENT_VRSN_TBL ADD TPL_ID UUID;--#!
ALTER TABLE ENT_VRSN_TBL ADD DTR_CD_ID UUID;--#!
UPDATE ENT_VRSN_TBL SET CLS_CD_ID = (SELECT ENT_TBL.CLS_CD_ID FROM ENT_TBL WHERE ENT_TBL.ENT_ID = ENT_VRSN_TBL.ENT_ID), TPL_ID = (SELECT ENT_TBL.TPL_ID FROM ENT_TBL WHERE ENT_TBL.ENT_ID = ENT_VRSN_TBL.ENT_ID), DTR_CD_ID = (SELECT ENT_TBL.DTR_CD_ID FROM ENT_TBL WHERE ENT_TBL.ENT_ID = ENT_VRSN_TBL.ENT_ID);--#!
	-- FROM ENT_TBL WHERE ENT_TBL.ENT_ID = ENT_VRSN_TBL.ENT_ID;
DROP INDEX ENT_TBL_CLS_CD_ID_IDX;--#!
CREATE OR ALTER FUNCTION IS_ENT_CLS(
	ENT_ID_IN UUID,
	CLS_MNEMONIC_IN VARCHAR(32)
) RETURNS BOOLEAN AS 
BEGIN
	RETURN (SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END AS r FROM ENT_VRSN_TBL INNER JOIN CD_VRSN_TBL ON (ENT_VRSN_TBL.CLS_CD_ID = CD_VRSN_TBL.CD_ID AND CD_VRSN_TBL.OBSLT_UTC IS NULL) WHERE ENT_ID = :ENT_ID_IN AND CD_VRSN_TBL.MNEMONIC = :CLS_MNEMONIC_IN);
END;--#!


-- TRIGGER FUNCTION WHICH VERIFIES ENTITY RELATIONSHIP
CREATE OR ALTER TRIGGER TG_VRFY_ENT_REL FOR ENT_REL_TBL BEFORE INSERT POSITION 0 AS 
DECLARE VARIABLE VAR_VALIDATION VARCHAR(128);
BEGIN
	SELECT  ent_rel_vrfy_cdtbl.err_desc
	FROM 
		ent_rel_vrfy_cdtbl 
		INNER JOIN ent_vrsn_tbl src_ent ON (src_ent.ent_id = NEW.src_ent_id AND src_ent.obslt_utc IS NULL)
		INNER JOIN ent_vrsn_tbl trg_ent ON (trg_ent.ent_id = NEW.trg_ent_id AND trg_ent.obslt_utc IS NULL)
	WHERE 
		rel_typ_cd_id = NEW.rel_typ_cd_id 
		AND src_cls_cd_id = src_ent.cls_cd_id 
		AND trg_cls_cd_id = trg_ent.cls_cd_id
	INTO VAR_VALIDATION;
	
	IF (VAR_VALIDATION IS NULL AND NEW.obslt_vrsn_seq_id IS NULL) THEN
		EXCEPTION invalid_relationships 
			'Validation error: Relationship ' || uuid_to_char(NEW.rel_typ_cd_id) || ' between ' || uuid_to_char(NEW.src_ent_id) || ' > ' || uuid_to_char(NEW.trg_ent_id) || ' is invalid';
END;
--#!

ALTER TABLE ENT_TBL DROP CLS_CD_ID;--#!
ALTER TABLE ENT_TBL DROP TPL_ID;--#!
ALTER TABLE ENT_TBL DROP DTR_CD_ID;--#!
ALTER TABLE ENT_VRSN_TBL ALTER CLS_CD_ID SET NOT NULL;--#!
ALTER TABLE ENT_VRSN_TBL ALTER DTR_CD_ID SET NOT NULL;--#!
ALTER TABLE ENT_VRSN_TBL ADD CONSTRAINT FK_ENT_VRSN_CLS_CD FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL(CD_ID);--#!
ALTER TABLE ENT_VRSN_TBL ADD CONSTRAINT FK_ENT_VRSN_DTR_CD FOREIGN KEY (DTR_CD_ID) REFERENCES CD_TBL(CD_ID);--#!
ALTER TABLE ENT_VRSN_TBL ADD CONSTRAINT FK_ENT_VRSN_TPL FOREIGN KEY (TPL_ID) REFERENCES TPL_DEF_TBL(TPL_ID);--#!


ALTER TABLE ACT_VRSN_TBL ADD CLS_CD_ID UUID;--#!
ALTER TABLE ACT_VRSN_TBL ADD TPL_ID UUID;--#!
ALTER TABLE ACT_VRSN_TBL ADD MOD_CD_ID UUID;--#!
UPDATE ACT_VRSN_TBL SET CLS_CD_ID = (SELECT ACT_TBL.CLS_CD_ID FROM ACT_TBL WHERE ACT_TBL.ACT_ID = ACT_VRSN_TBL.ACT_ID), TPL_ID = (SELECT ACT_TBL.TPL_ID FROM ACT_TBL WHERE ACT_TBL.ACT_ID = ACT_VRSN_TBL.ACT_ID), MOD_CD_ID = (SELECT ACT_TBL.MOD_CD_ID FROM ACT_TBL WHERE ACT_TBL.ACT_ID = ACT_VRSN_TBL.ACT_ID);--#!
	-- FROM ACT_TBL WHERE ACT_TBL.ACT_ID = ACT_VRSN_TBL.ACT_ID;
CREATE OR ALTER FUNCTION IS_ACT_CLS(
	ACT_ID_IN UUID,
	CLS_MNEMONIC_IN VARCHAR(32)
) RETURNS BOOLEAN AS 
BEGIN
	RETURN (SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END AS r FROM ACT_VRSN_TBL INNER JOIN CD_CUR_VRSN_VW ON (ACT_VRSN_TBL.CLS_CD_ID = CD_CUR_VRSN_VW.CD_ID) WHERE ACT_ID = :ACT_ID_IN AND CD_CUR_VRSN_VW.MNEMONIC = :CLS_MNEMONIC_IN);
END;
--#!
DROP INDEX ACT_CLS_CD_IDX;--#!
ALTER TABLE ACT_TBL DROP CLS_CD_ID;--#!
ALTER TABLE ACT_TBL DROP TPL_ID;--#!
ALTER TABLE ACT_TBL DROP MOD_CD_ID;--#!
ALTER TABLE ACT_VRSN_TBL ALTER CLS_CD_ID SET NOT NULL;--#!
ALTER TABLE ACT_VRSN_TBL ALTER MOD_CD_ID SET NOT NULL;--#!
ALTER TABLE ACT_VRSN_TBL ADD CONSTRAINT FK_ACT_VRSN_CLS_CD FOREIGN KEY (CLS_CD_ID) REFERENCES CD_TBL(CD_ID);--#!
ALTER TABLE ACT_VRSN_TBL ADD CONSTRAINT FK_ACT_VRSN_MOD_CD FOREIGN KEY (MOD_CD_ID) REFERENCES CD_TBL(CD_ID);--#!
ALTER TABLE ACT_VRSN_TBL ADD CONSTRAINT FK_ACT_VRSN_TPL FOREIGN KEY (TPL_ID) REFERENCES TPL_DEF_TBL(TPL_ID);--#!

CREATE TABLE GEO_TBL (
	GEO_ID UUID NOT NULL,
	LAT REAL NOT NULL,
	LNG REAL NOT NULL,
	CONSTRAINT PK_GEO_TBL PRIMARY KEY (GEO_ID)
);--#!

ALTER TABLE ACT_VRSN_TBL ADD GEO_ID UUID;--#!
ALTER TABLE ENT_VRSN_TBL ADD GEO_ID UUID;--#!
ALTER TABLE ACT_VRSN_TBL ADD CONSTRAINT FK_ACT_VRSN_GEO_TBL FOREIGN KEY (GEO_ID) REFERENCES GEO_TBL(GEO_ID);--#!
ALTER TABLE ENT_VRSN_TBL ADD CONSTRAINT FK_ENT_VRSN_GEO_TBL FOREIGN KEY (GEO_ID) REFERENCES GEO_TBL(GEO_ID);--#!
ALTER TABLE PLC_TBL DROP LAT;--#!
ALTER TABLE PLC_TBL DROP LNG;--#!

CREATE INDEX ACT_VRSN_CLS_CD_IDX ON ACT_VRSN_TBL (CLS_CD_ID);--#!
CREATE INDEX ACT_VRSN_STS_CD_IDX ON ACT_VRSN_TBL (STS_CD_ID);--#!
CREATE INDEX ENT_VRSN_CLS_CD_IDX ON ENT_VRSN_TBL (CLS_CD_ID);--#!
CREATE INDEX ENT_VRSN_STS_CD_IDX ON ENT_VRSN_TBL (STS_CD_ID);--#!

ALTER TABLE ENT_VRSN_TBL ADD CONSTRAINT CK_ENT_CLS_CD CHECK (IS_CD_SET_MEM(CLS_CD_ID, 'EntityClass')); --#!
ALTER TABLE ENT_VRSN_TBL ADD CONSTRAINT CK_ENT_DTR_CD CHECK (IS_CD_SET_MEM(DTR_CD_ID, 'EntityDeterminer'));--#!
ALTER TABLE ACT_VRSN_TBL ADD CONSTRAINT CK_ACT_CLS_CD CHECK (IS_CD_SET_MEM(CLS_CD_ID, 'ActClass'));--#!
ALTER TABLE ACT_VRSN_TBL ADD CONSTRAINT CK_ACT_MOD_CD CHECK (IS_CD_SET_MEM(MOD_CD_ID, 'ActMood'));--#!

SELECT REG_PATCH('20210514-01') FROM RDB$DATABASE; --#!
