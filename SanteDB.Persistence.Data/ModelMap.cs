//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SanteDB.Core.Model.Map.Ado {
    
    
    public sealed class RelationshipValidationRuleToDbRelationshipValidationRuleModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.RelationshipValidationRule, SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public RelationshipValidationRuleToDbRelationshipValidationRuleModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.RelationshipValidationRule);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.RelationshipValidationRule instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.RelationshipValidationRule)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule MapToTarget(SanteDB.Core.Model.DataTypes.RelationshipValidationRule instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule);
            }
            SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule retVal = new SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.RelationshipTypeKey = instance.RelationshipTypeKey;
            if (instance.SourceClassKey.HasValue) {
                retVal.SourceClassKey = instance.SourceClassKey.Value;
            }
            if (instance.TargetClassKey.HasValue) {
                retVal.TargetClassKey = instance.TargetClassKey.Value;
            }
            retVal.Description = instance.Description;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.RelationshipValidationRule MapToSource(SanteDB.Persistence.Data.Model.Sys.DbRelationshipValidationRule instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.RelationshipValidationRule);
            }
            SanteDB.Core.Model.DataTypes.RelationshipValidationRule retVal = new SanteDB.Core.Model.DataTypes.RelationshipValidationRule();
            retVal.Key = instance.Key;
            retVal.RelationshipTypeKey = instance.RelationshipTypeKey;
            if (instance.SourceClassKey.HasValue) {
                retVal.SourceClassKey = instance.SourceClassKey.Value;
            }
            if (instance.TargetClassKey.HasValue) {
                retVal.TargetClassKey = instance.TargetClassKey.Value;
            }
            retVal.Description = instance.Description;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class BiDefinitionToDbBiQueryResultModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.BI.Model.BiDefinition, SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public BiDefinitionToDbBiQueryResultModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.BI.Model.BiDefinition);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.BI.Model.BiDefinition instance;
            try {
                instance = ((SanteDB.BI.Model.BiDefinition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult MapToTarget(SanteDB.BI.Model.BiDefinition instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult);
            }
            SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult retVal = new SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult();
            retVal.Id = instance.Id;
            retVal.Status = instance.Status;
            retVal.Name = instance.Name;
            return retVal;
        }
        
        public SanteDB.BI.Model.BiDefinition MapToSource(SanteDB.Persistence.Data.Model.Sys.DbBiQueryResult instance) {
            if ((instance == null)) {
                return default(SanteDB.BI.Model.BiDefinition);
            }
            SanteDB.BI.Model.BiDefinition retVal = new SanteDB.BI.Model.BiDefinition();
            retVal.Id = instance.Id;
            retVal.Status = instance.Status;
            retVal.Name = instance.Name;
            return retVal;
        }
    }
    
    public sealed class MailMessageToDbMailMessageModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Mail.MailMessage, SanteDB.Persistence.Data.Model.Mail.DbMailMessage> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public MailMessageToDbMailMessageModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Mail.MailMessage);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Mail.DbMailMessage);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Mail.DbMailMessage instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Mail.DbMailMessage)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Mail.MailMessage instance;
            try {
                instance = ((SanteDB.Core.Mail.MailMessage)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Mail.DbMailMessage MapToTarget(SanteDB.Core.Mail.MailMessage instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Mail.DbMailMessage);
            }
            SanteDB.Persistence.Data.Model.Mail.DbMailMessage retVal = new SanteDB.Persistence.Data.Model.Mail.DbMailMessage();
            retVal.Body = instance.Body;
            retVal.Flags = ((int)(instance.Flags));
            retVal.FromInfo = instance.From;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.MessageUtc = instance.TimeStamp;
            retVal.Subject = instance.Subject;
            retVal.ToInfo = instance.To;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Mail.MailMessage MapToSource(SanteDB.Persistence.Data.Model.Mail.DbMailMessage instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Mail.MailMessage);
            }
            SanteDB.Core.Mail.MailMessage retVal = new SanteDB.Core.Mail.MailMessage();
            retVal.Body = instance.Body;
            retVal.Flags = ((SanteDB.Core.Mail.MailMessageFlags)(instance.Flags));
            retVal.From = instance.FromInfo;
            retVal.Key = instance.Key;
            retVal.TimeStamp = instance.MessageUtc;
            retVal.Subject = instance.Subject;
            retVal.To = instance.ToInfo;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class MailboxToDbMailboxModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Mail.Mailbox, SanteDB.Persistence.Data.Model.Mail.DbMailbox> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public MailboxToDbMailboxModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Mail.Mailbox);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Mail.DbMailbox);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Mail.DbMailbox instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Mail.DbMailbox)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Mail.Mailbox instance;
            try {
                instance = ((SanteDB.Core.Mail.Mailbox)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Mail.DbMailbox MapToTarget(SanteDB.Core.Mail.Mailbox instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Mail.DbMailbox);
            }
            SanteDB.Persistence.Data.Model.Mail.DbMailbox retVal = new SanteDB.Persistence.Data.Model.Mail.DbMailbox();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.OwnerKey = instance.OwnerKey;
            retVal.Name = instance.Name;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Mail.Mailbox MapToSource(SanteDB.Persistence.Data.Model.Mail.DbMailbox instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Mail.Mailbox);
            }
            SanteDB.Core.Mail.Mailbox retVal = new SanteDB.Core.Mail.Mailbox();
            retVal.Key = instance.Key;
            retVal.OwnerKey = instance.OwnerKey;
            retVal.Name = instance.Name;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class MailboxMailMessageToDbMailboxMessageAssociationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Mail.MailboxMailMessage, SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public MailboxMailMessageToDbMailboxMessageAssociationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Mail.MailboxMailMessage);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Mail.MailboxMailMessage instance;
            try {
                instance = ((SanteDB.Core.Mail.MailboxMailMessage)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation MapToTarget(SanteDB.Core.Mail.MailboxMailMessage instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation);
            }
            SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation retVal = new SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.TargetKey = instance.TargetKey;
            retVal.MailStatusFlag = ((int)(instance.MailStatusFlag));
            return retVal;
        }
        
        public SanteDB.Core.Mail.MailboxMailMessage MapToSource(SanteDB.Persistence.Data.Model.Mail.DbMailboxMessageAssociation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Mail.MailboxMailMessage);
            }
            SanteDB.Core.Mail.MailboxMailMessage retVal = new SanteDB.Core.Mail.MailboxMailMessage();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.TargetKey = instance.TargetKey;
            retVal.MailStatusFlag = ((SanteDB.Core.Mail.MailStatusFlags)(instance.MailStatusFlag));
            return retVal;
        }
    }
    
    public sealed class SecurityUserToDbSecurityUserModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityUser, SanteDB.Persistence.Data.Model.Security.DbSecurityUser> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityUserToDbSecurityUserModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityUser);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityUser);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityUser instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityUser)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityUser instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityUser)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityUser MapToTarget(SanteDB.Core.Model.Security.SecurityUser instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityUser);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityUser retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityUser();
            retVal.Email = instance.Email;
            retVal.InvalidLoginAttempts = instance.InvalidLoginAttempts;
            if (instance.Lockout.HasValue) {
                retVal.Lockout = instance.Lockout.Value;
            }
            retVal.Password = instance.Password;
            retVal.SecurityHash = instance.SecurityHash;
            retVal.TwoFactorEnabled = instance.TwoFactorEnabled;
            retVal.UserName = instance.UserName;
            if (instance.LastLoginTime.HasValue) {
                retVal.LastLoginTime = instance.LastLoginTime.Value;
            }
            retVal.PhoneNumber = instance.PhoneNumber;
            retVal.UserClass = instance.UserClass;
            retVal.EmailConfirmed = instance.EmailConfirmed;
            retVal.PhoneNumberConfirmed = instance.PhoneNumberConfirmed;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TwoFactorMechnaismKey.HasValue) {
                retVal.TwoFactorMechnaismKey = instance.TwoFactorMechnaismKey.Value;
            }
            if (instance.PasswordExpiration.HasValue) {
                retVal.PasswordExpiration = instance.PasswordExpiration.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityUser MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityUser instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityUser);
            }
            SanteDB.Core.Model.Security.SecurityUser retVal = new SanteDB.Core.Model.Security.SecurityUser();
            retVal.Email = instance.Email;
            if (instance.InvalidLoginAttempts.HasValue) {
                retVal.InvalidLoginAttempts = instance.InvalidLoginAttempts.Value;
            }
            if (instance.Lockout.HasValue) {
                retVal.Lockout = instance.Lockout.Value;
            }
            retVal.Password = instance.Password;
            retVal.SecurityHash = instance.SecurityHash;
            retVal.TwoFactorEnabled = instance.TwoFactorEnabled;
            retVal.UserName = instance.UserName;
            if (instance.LastLoginTime.HasValue) {
                retVal.LastLoginTime = instance.LastLoginTime.Value;
            }
            retVal.PhoneNumber = instance.PhoneNumber;
            retVal.UserClass = instance.UserClass;
            retVal.EmailConfirmed = instance.EmailConfirmed;
            retVal.PhoneNumberConfirmed = instance.PhoneNumberConfirmed;
            retVal.Key = instance.Key;
            if (instance.TwoFactorMechnaismKey.HasValue) {
                retVal.TwoFactorMechnaismKey = instance.TwoFactorMechnaismKey.Value;
            }
            if (instance.PasswordExpiration.HasValue) {
                retVal.PasswordExpiration = instance.PasswordExpiration.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class SecurityChallengeToDbSecurityChallengeModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityChallenge, SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityChallengeToDbSecurityChallengeModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityChallenge);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityChallenge instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityChallenge)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge MapToTarget(SanteDB.Core.Model.Security.SecurityChallenge instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.ChallengeText = instance.ChallengeText;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityChallenge MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityChallenge instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityChallenge);
            }
            SanteDB.Core.Model.Security.SecurityChallenge retVal = new SanteDB.Core.Model.Security.SecurityChallenge();
            retVal.Key = instance.Key;
            retVal.ChallengeText = instance.ChallengeText;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class SecurityApplicationToDbSecurityApplicationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityApplication, SanteDB.Persistence.Data.Model.Security.DbSecurityApplication> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityApplicationToDbSecurityApplicationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityApplication);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityApplication);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityApplication instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityApplication)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityApplication instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityApplication)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityApplication MapToTarget(SanteDB.Core.Model.Security.SecurityApplication instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityApplication);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityApplication retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityApplication();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.PublicId = instance.Name;
            retVal.Secret = instance.ApplicationSecret;
            if (instance.Lockout.HasValue) {
                retVal.Lockout = instance.Lockout.Value;
            }
            if (instance.InvalidAuthAttempts.HasValue) {
                retVal.InvalidAuthAttempts = instance.InvalidAuthAttempts.Value;
            }
            if (instance.LastAuthentication.HasValue) {
                retVal.LastAuthentication = instance.LastAuthentication.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityApplication MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityApplication instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityApplication);
            }
            SanteDB.Core.Model.Security.SecurityApplication retVal = new SanteDB.Core.Model.Security.SecurityApplication();
            retVal.Key = instance.Key;
            retVal.Name = instance.PublicId;
            retVal.ApplicationSecret = instance.Secret;
            if (instance.Lockout.HasValue) {
                retVal.Lockout = instance.Lockout.Value;
            }
            if (instance.InvalidAuthAttempts.HasValue) {
                retVal.InvalidAuthAttempts = instance.InvalidAuthAttempts.Value;
            }
            if (instance.LastAuthentication.HasValue) {
                retVal.LastAuthentication = instance.LastAuthentication.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class SecurityDeviceToDbSecurityDeviceModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityDevice, SanteDB.Persistence.Data.Model.Security.DbSecurityDevice> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityDeviceToDbSecurityDeviceModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityDevice);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityDevice);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityDevice instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityDevice)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityDevice instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityDevice)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityDevice MapToTarget(SanteDB.Core.Model.Security.SecurityDevice instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityDevice);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityDevice retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityDevice();
            retVal.PublicId = instance.Name;
            retVal.DeviceSecret = instance.DeviceSecret;
            if (instance.Lockout.HasValue) {
                retVal.Lockout = instance.Lockout.Value;
            }
            if (instance.InvalidAuthAttempts.HasValue) {
                retVal.InvalidAuthAttempts = instance.InvalidAuthAttempts.Value;
            }
            if (instance.LastAuthentication.HasValue) {
                retVal.LastAuthentication = instance.LastAuthentication.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityDevice MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityDevice instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityDevice);
            }
            SanteDB.Core.Model.Security.SecurityDevice retVal = new SanteDB.Core.Model.Security.SecurityDevice();
            retVal.Name = instance.PublicId;
            retVal.DeviceSecret = instance.DeviceSecret;
            if (instance.Lockout.HasValue) {
                retVal.Lockout = instance.Lockout.Value;
            }
            if (instance.InvalidAuthAttempts.HasValue) {
                retVal.InvalidAuthAttempts = instance.InvalidAuthAttempts.Value;
            }
            if (instance.LastAuthentication.HasValue) {
                retVal.LastAuthentication = instance.LastAuthentication.Value;
            }
            retVal.Key = instance.Key;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class SecurityRoleToDbSecurityRoleModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityRole, SanteDB.Persistence.Data.Model.Security.DbSecurityRole> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityRoleToDbSecurityRoleModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityRole);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityRole);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityRole instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityRole)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityRole instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityRole)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityRole MapToTarget(SanteDB.Core.Model.Security.SecurityRole instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityRole);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityRole retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityRole();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.Name = instance.Name;
            retVal.Description = instance.Description;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityRole MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityRole instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityRole);
            }
            SanteDB.Core.Model.Security.SecurityRole retVal = new SanteDB.Core.Model.Security.SecurityRole();
            retVal.Key = instance.Key;
            retVal.Name = instance.Name;
            retVal.Description = instance.Description;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class SecurityProvenanceToDbSecurityProvenanceModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityProvenance, SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityProvenanceToDbSecurityProvenanceModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityProvenance);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityProvenance instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityProvenance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance MapToTarget(SanteDB.Core.Model.Security.SecurityProvenance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ApplicationKey.HasValue) {
                retVal.ApplicationKey = instance.ApplicationKey.Value;
            }
            if (instance.UserKey.HasValue) {
                retVal.UserKey = instance.UserKey.Value;
            }
            if (instance.DeviceKey.HasValue) {
                retVal.DeviceKey = instance.DeviceKey.Value;
            }
            retVal.Established = instance.CreationTime;
            if (instance.SessionKey.HasValue) {
                retVal.SessionKey = instance.SessionKey.Value;
            }
            if (instance.ExternalSecurityObjectRefKey.HasValue) {
                retVal.ExternalSecurityObjectRefKey = instance.ExternalSecurityObjectRefKey.Value;
            }
            retVal.ExternalSecurityObjectRefType = instance.ExternalSecurityObjectRefType;
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityProvenance MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityProvenance instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityProvenance);
            }
            SanteDB.Core.Model.Security.SecurityProvenance retVal = new SanteDB.Core.Model.Security.SecurityProvenance();
            retVal.Key = instance.Key;
            retVal.ApplicationKey = instance.ApplicationKey;
            if (instance.UserKey.HasValue) {
                retVal.UserKey = instance.UserKey.Value;
            }
            if (instance.DeviceKey.HasValue) {
                retVal.DeviceKey = instance.DeviceKey.Value;
            }
            if (instance.Established.HasValue) {
                retVal.CreationTime = instance.Established.Value;
            }
            if (instance.SessionKey.HasValue) {
                retVal.SessionKey = instance.SessionKey.Value;
            }
            if (instance.ExternalSecurityObjectRefKey.HasValue) {
                retVal.ExternalSecurityObjectRefKey = instance.ExternalSecurityObjectRefKey.Value;
            }
            retVal.ExternalSecurityObjectRefType = instance.ExternalSecurityObjectRefType;
            return retVal;
        }
    }
    
    public sealed class SecurityPolicyInstanceToDbSecurityRolePolicyModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityPolicyInstanceToDbSecurityRolePolicyModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityPolicyInstance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityPolicyInstance MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy>.MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Security.SecurityPolicyInstance SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy>.MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy>.MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Security.SecurityPolicyInstance SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy>.MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
    }
    
    public sealed class SecurityPolicyInstanceToDbSecurityDevicePolicyModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityPolicyInstanceToDbSecurityDevicePolicyModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityPolicyInstance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityPolicyInstance MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>.MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Security.SecurityPolicyInstance SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>.MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy>.MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Security.SecurityPolicyInstance SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy>.MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
    }
    
    public sealed class SecurityPolicyInstanceToDbSecurityApplicationPolicyModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityPolicyInstanceToDbSecurityApplicationPolicyModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityPolicyInstance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityPolicyInstance MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityApplicationPolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>.MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Security.SecurityPolicyInstance SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy>.MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityRolePolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy>.MapToTarget(SanteDB.Core.Model.Security.SecurityPolicyInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.GrantType = ((int)(instance.GrantType));
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Security.SecurityPolicyInstance SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicyInstance, SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy>.MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityDevicePolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicyInstance);
            }
            SanteDB.Core.Model.Security.SecurityPolicyInstance retVal = new SanteDB.Core.Model.Security.SecurityPolicyInstance();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.GrantType = ((SanteDB.Core.Model.Security.PolicyGrantType)(instance.GrantType));
            retVal.Key = instance.Key;
            retVal.PolicyKey = instance.PolicyKey;
            return retVal;
        }
    }
    
    public sealed class SecurityPolicyToDbSecurityPolicyModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Security.SecurityPolicy, SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SecurityPolicyToDbSecurityPolicyModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Security.SecurityPolicy);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Security.SecurityPolicy instance;
            try {
                instance = ((SanteDB.Core.Model.Security.SecurityPolicy)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy MapToTarget(SanteDB.Core.Model.Security.SecurityPolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy);
            }
            SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy retVal = new SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy();
            retVal.Handler = instance.Handler;
            retVal.Name = instance.Name;
            retVal.IsPublic = instance.IsPublic;
            retVal.CanOverride = instance.CanOverride;
            retVal.Oid = instance.Oid;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Security.SecurityPolicy MapToSource(SanteDB.Persistence.Data.Model.Security.DbSecurityPolicy instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Security.SecurityPolicy);
            }
            SanteDB.Core.Model.Security.SecurityPolicy retVal = new SanteDB.Core.Model.Security.SecurityPolicy();
            retVal.Handler = instance.Handler;
            retVal.Name = instance.Name;
            retVal.IsPublic = instance.IsPublic;
            retVal.CanOverride = instance.CanOverride;
            retVal.Oid = instance.Oid;
            retVal.Key = instance.Key;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptSetToDbConceptSetModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptSet, SanteDB.Persistence.Data.Model.Concepts.DbConceptSet> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptSetToDbConceptSetModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptSet);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptSet);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptSet instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptSet)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptSet instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptSet)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptSet MapToTarget(SanteDB.Core.Model.DataTypes.ConceptSet instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptSet);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptSet retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptSet();
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Oid = instance.Oid;
            retVal.Url = instance.Url;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptSet MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptSet instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptSet);
            }
            SanteDB.Core.Model.DataTypes.ConceptSet retVal = new SanteDB.Core.Model.DataTypes.ConceptSet();
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Oid = instance.Oid;
            retVal.Url = instance.Url;
            retVal.Key = instance.Key;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptSetCompositionToDbConceptSetCompositionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptSetComposition, SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptSetCompositionToDbConceptSetCompositionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptSetComposition);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptSetComposition instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptSetComposition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition MapToTarget(SanteDB.Core.Model.DataTypes.ConceptSetComposition instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.TargetKey.HasValue) {
                retVal.TargetKey = instance.TargetKey.Value;
            }
            retVal.Operation = instance.Operation;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptSetComposition MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptSetComposition instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptSetComposition);
            }
            SanteDB.Core.Model.DataTypes.ConceptSetComposition retVal = new SanteDB.Core.Model.DataTypes.ConceptSetComposition();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.TargetKey = instance.TargetKey;
            retVal.Operation = instance.Operation;
            retVal.Key = instance.Key;
            return retVal;
        }
    }
    
    public sealed class ConceptToDbConceptVersionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.Concept, SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptToDbConceptVersionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.Concept);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.Concept instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.Concept)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion MapToTarget(SanteDB.Core.Model.DataTypes.Concept instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion();
            retVal.Mnemonic = instance.Mnemonic;
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.ClassKey.HasValue) {
                retVal.ClassKey = instance.ClassKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.Concept MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.Concept);
            }
            SanteDB.Core.Model.DataTypes.Concept retVal = new SanteDB.Core.Model.DataTypes.Concept();
            retVal.Mnemonic = instance.Mnemonic;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.ClassKey = instance.ClassKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptClassToDbConceptClassModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptClass, SanteDB.Persistence.Data.Model.Concepts.DbConceptClass> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptClassToDbConceptClassModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptClass);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptClass);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptClass instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptClass)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptClass instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptClass)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptClass MapToTarget(SanteDB.Core.Model.DataTypes.ConceptClass instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptClass);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptClass retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptClass();
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptClass MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptClass instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptClass);
            }
            SanteDB.Core.Model.DataTypes.ConceptClass retVal = new SanteDB.Core.Model.DataTypes.ConceptClass();
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Key = instance.Key;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class CodeSystemToDbCodeSystemModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.CodeSystem, SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public CodeSystemToDbCodeSystemModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.CodeSystem);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.CodeSystem instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.CodeSystem)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem MapToTarget(SanteDB.Core.Model.DataTypes.CodeSystem instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem retVal = new SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.Name = instance.Name;
            retVal.Oid = instance.Oid;
            retVal.Domain = instance.Domain;
            retVal.Url = instance.Url;
            retVal.VersionText = instance.VersionText;
            retVal.Description = instance.Description;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.CodeSystem MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbCodeSystem instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.CodeSystem);
            }
            SanteDB.Core.Model.DataTypes.CodeSystem retVal = new SanteDB.Core.Model.DataTypes.CodeSystem();
            retVal.Key = instance.Key;
            retVal.Name = instance.Name;
            retVal.Oid = instance.Oid;
            retVal.Domain = instance.Domain;
            retVal.Url = instance.Url;
            retVal.VersionText = instance.VersionText;
            retVal.Description = instance.Description;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptRelationshipTypeToDbConceptRelationshipTypeModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptRelationshipType, SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptRelationshipTypeToDbConceptRelationshipTypeModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptRelationshipType);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationshipType instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptRelationshipType)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType MapToTarget(SanteDB.Core.Model.DataTypes.ConceptRelationshipType instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType();
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptRelationshipType MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationshipType instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptRelationshipType);
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationshipType retVal = new SanteDB.Core.Model.DataTypes.ConceptRelationshipType();
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Key = instance.Key;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptRelationshipToDbConceptRelationshipModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptRelationship, SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptRelationshipToDbConceptRelationshipModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptRelationship);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationship instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptRelationship)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship MapToTarget(SanteDB.Core.Model.DataTypes.ConceptRelationship instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.RelationshipTypeKey.HasValue) {
                retVal.RelationshipTypeKey = instance.RelationshipTypeKey.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.TargetConceptKey.HasValue) {
                retVal.TargetKey = instance.TargetConceptKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptRelationship MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptRelationship instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptRelationship);
            }
            SanteDB.Core.Model.DataTypes.ConceptRelationship retVal = new SanteDB.Core.Model.DataTypes.ConceptRelationship();
            retVal.Key = instance.Key;
            retVal.RelationshipTypeKey = instance.RelationshipTypeKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.TargetConceptKey = instance.TargetKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ReferenceTermToDbReferenceTermModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ReferenceTerm, SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ReferenceTermToDbReferenceTermModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ReferenceTerm);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ReferenceTerm instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ReferenceTerm)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm MapToTarget(SanteDB.Core.Model.DataTypes.ReferenceTerm instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm retVal = new SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.CodeSystemKey.HasValue) {
                retVal.CodeSystemKey = instance.CodeSystemKey.Value;
            }
            retVal.Mnemonic = instance.Mnemonic;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ReferenceTerm MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbReferenceTerm instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ReferenceTerm);
            }
            SanteDB.Core.Model.DataTypes.ReferenceTerm retVal = new SanteDB.Core.Model.DataTypes.ReferenceTerm();
            retVal.Key = instance.Key;
            retVal.CodeSystemKey = instance.CodeSystemKey;
            retVal.Mnemonic = instance.Mnemonic;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ReferenceTermNameToDbReferenceTermNameModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ReferenceTermName, SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ReferenceTermNameToDbReferenceTermNameModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ReferenceTermName);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ReferenceTermName instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ReferenceTermName)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName MapToTarget(SanteDB.Core.Model.DataTypes.ReferenceTermName instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName retVal = new SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.LanguageCode = instance.Language;
            retVal.Value = instance.Name;
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ReferenceTermName MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbReferenceTermName instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ReferenceTermName);
            }
            SanteDB.Core.Model.DataTypes.ReferenceTermName retVal = new SanteDB.Core.Model.DataTypes.ReferenceTermName();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.CreatedByKey = instance.CreatedByKey;
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.Language = instance.LanguageCode;
            retVal.Name = instance.Value;
            return retVal;
        }
    }
    
    public sealed class ConceptReferenceTermToDbConceptReferenceTermModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptReferenceTerm, SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptReferenceTermToDbConceptReferenceTermModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptReferenceTerm);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptReferenceTerm instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptReferenceTerm)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm MapToTarget(SanteDB.Core.Model.DataTypes.ConceptReferenceTerm instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ReferenceTermKey.HasValue) {
                retVal.TargetKey = instance.ReferenceTermKey.Value;
            }
            if (instance.RelationshipTypeKey.HasValue) {
                retVal.RelationshipTypeKey = instance.RelationshipTypeKey.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptReferenceTerm MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptReferenceTerm instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptReferenceTerm);
            }
            SanteDB.Core.Model.DataTypes.ConceptReferenceTerm retVal = new SanteDB.Core.Model.DataTypes.ConceptReferenceTerm();
            retVal.Key = instance.Key;
            retVal.ReferenceTermKey = instance.TargetKey;
            retVal.RelationshipTypeKey = instance.RelationshipTypeKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptNameToDbConceptNameModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptName, SanteDB.Persistence.Data.Model.Concepts.DbConceptName> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptNameToDbConceptNameModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptName);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Concepts.DbConceptName);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptName instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Concepts.DbConceptName)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptName instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptName)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Concepts.DbConceptName MapToTarget(SanteDB.Core.Model.DataTypes.ConceptName instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Concepts.DbConceptName);
            }
            SanteDB.Persistence.Data.Model.Concepts.DbConceptName retVal = new SanteDB.Persistence.Data.Model.Concepts.DbConceptName();
            retVal.Language = instance.Language;
            retVal.Name = instance.Name;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptName MapToSource(SanteDB.Persistence.Data.Model.Concepts.DbConceptName instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptName);
            }
            SanteDB.Core.Model.DataTypes.ConceptName retVal = new SanteDB.Core.Model.DataTypes.ConceptName();
            retVal.Language = instance.Language;
            retVal.Name = instance.Name;
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityToDbEntityVersionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Entity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityToDbEntityVersionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.Entity);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbEntityVersion)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Entity instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.Entity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbEntityVersion MapToTarget(SanteDB.Core.Model.Entities.Entity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.Entity MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Entity);
            }
            SanteDB.Core.Model.Entities.Entity retVal = new SanteDB.Core.Model.Entities.Entity();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityNameToDbEntityNameModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.EntityName, SanteDB.Persistence.Data.Model.Entities.DbEntityName> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityNameToDbEntityNameModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.EntityName);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbEntityName);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityName instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbEntityName)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityName instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.EntityName)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbEntityName MapToTarget(SanteDB.Core.Model.Entities.EntityName instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityName);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityName retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityName();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.NameUseKey.HasValue) {
                retVal.UseConceptKey = instance.NameUseKey.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.EntityName MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityName instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.EntityName);
            }
            SanteDB.Core.Model.Entities.EntityName retVal = new SanteDB.Core.Model.Entities.EntityName();
            retVal.Key = instance.Key;
            retVal.NameUseKey = instance.UseConceptKey;
            retVal.ExternalKey = instance.ExternalKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityNameComponentToDbEntityNameComponentModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.EntityNameComponent, SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityNameComponentToDbEntityNameComponentModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.EntityNameComponent);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityNameComponent instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.EntityNameComponent)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent MapToTarget(SanteDB.Core.Model.Entities.EntityNameComponent instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.Value = instance.Value;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ComponentTypeKey.HasValue) {
                retVal.ComponentTypeKey = instance.ComponentTypeKey.Value;
            }
            retVal.OrderSequence = instance.OrderSequence;
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.EntityNameComponent MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityNameComponent instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.EntityNameComponent);
            }
            SanteDB.Core.Model.Entities.EntityNameComponent retVal = new SanteDB.Core.Model.Entities.EntityNameComponent();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Value = instance.Value;
            retVal.Key = instance.Key;
            if (instance.ComponentTypeKey.HasValue) {
                retVal.ComponentTypeKey = instance.ComponentTypeKey.Value;
            }
            retVal.OrderSequence = instance.OrderSequence;
            return retVal;
        }
    }
    
    public sealed class EntityAddressToDbEntityAddressModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.EntityAddress, SanteDB.Persistence.Data.Model.Entities.DbEntityAddress> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityAddressToDbEntityAddressModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.EntityAddress);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbEntityAddress);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityAddress instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbEntityAddress)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityAddress instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.EntityAddress)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbEntityAddress MapToTarget(SanteDB.Core.Model.Entities.EntityAddress instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityAddress);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityAddress retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityAddress();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.AddressUseKey.HasValue) {
                retVal.UseConceptKey = instance.AddressUseKey.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.EntityAddress MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityAddress instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.EntityAddress);
            }
            SanteDB.Core.Model.Entities.EntityAddress retVal = new SanteDB.Core.Model.Entities.EntityAddress();
            retVal.Key = instance.Key;
            retVal.AddressUseKey = instance.UseConceptKey;
            retVal.ExternalKey = instance.ExternalKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityAddressComponentToDbEntityAddressComponentModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.EntityAddressComponent, SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityAddressComponentToDbEntityAddressComponentModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.EntityAddressComponent);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityAddressComponent instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.EntityAddressComponent)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent MapToTarget(SanteDB.Core.Model.Entities.EntityAddressComponent instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.Value = instance.Value;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ComponentTypeKey.HasValue) {
                retVal.ComponentTypeKey = instance.ComponentTypeKey.Value;
            }
            retVal.OrderSequence = instance.OrderSequence;
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.EntityAddressComponent MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityAddressComponent instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.EntityAddressComponent);
            }
            SanteDB.Core.Model.Entities.EntityAddressComponent retVal = new SanteDB.Core.Model.Entities.EntityAddressComponent();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Value = instance.Value;
            retVal.Key = instance.Key;
            if (instance.ComponentTypeKey.HasValue) {
                retVal.ComponentTypeKey = instance.ComponentTypeKey.Value;
            }
            retVal.OrderSequence = instance.OrderSequence;
            return retVal;
        }
    }
    
    public sealed class EntityRelationshipToDbEntityRelationshipModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.EntityRelationship, SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityRelationshipToDbEntityRelationshipModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.EntityRelationship);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityRelationship instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.EntityRelationship)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship MapToTarget(SanteDB.Core.Model.Entities.EntityRelationship instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship();
            if (instance.RelationshipTypeKey.HasValue) {
                retVal.RelationshipTypeKey = instance.RelationshipTypeKey.Value;
            }
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.TargetEntityKey.HasValue) {
                retVal.TargetKey = instance.TargetEntityKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ClassificationKey.HasValue) {
                retVal.ClassificationKey = instance.ClassificationKey.Value;
            }
            if (instance.RelationshipRoleKey.HasValue) {
                retVal.RelationshipRoleKey = instance.RelationshipRoleKey.Value;
            }
            if (instance.Strength.HasValue) {
                retVal.Strength = instance.Strength.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.NegationIndicator.HasValue) {
                retVal.NegationIndicator = instance.NegationIndicator.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.EntityRelationship MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityRelationship instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.EntityRelationship);
            }
            SanteDB.Core.Model.Entities.EntityRelationship retVal = new SanteDB.Core.Model.Entities.EntityRelationship();
            retVal.RelationshipTypeKey = instance.RelationshipTypeKey;
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.TargetEntityKey = instance.TargetKey;
            retVal.Key = instance.Key;
            if (instance.ClassificationKey.HasValue) {
                retVal.ClassificationKey = instance.ClassificationKey.Value;
            }
            if (instance.RelationshipRoleKey.HasValue) {
                retVal.RelationshipRoleKey = instance.RelationshipRoleKey.Value;
            }
            if (instance.Strength.HasValue) {
                retVal.Strength = instance.Strength.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            retVal.NegationIndicator = instance.NegationIndicator;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityIdentifierToDbEntityIdentifierModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.EntityIdentifier, SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityIdentifierToDbEntityIdentifierModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.EntityIdentifier);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityIdentifier instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.EntityIdentifier)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier MapToTarget(SanteDB.Core.Model.DataTypes.EntityIdentifier instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier);
            }
            SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier retVal = new SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.Value = instance.Value;
            if (instance.IdentifierTypeKey.HasValue) {
                retVal.TypeKey = instance.IdentifierTypeKey.Value;
            }
            if (instance.IdentityDomainKey.HasValue) {
                retVal.IdentityDomainKey = instance.IdentityDomainKey.Value;
            }
            if (instance.IssueDate.HasValue) {
                retVal.IssueDate = instance.IssueDate.Value.DateTime;
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value.DateTime;
            }
            retVal.CheckDigit = instance.CheckDigit;
            retVal.Reliability = instance.Reliability;
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.EntityIdentifier MapToSource(SanteDB.Persistence.Data.Model.DataType.DbEntityIdentifier instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.EntityIdentifier);
            }
            SanteDB.Core.Model.DataTypes.EntityIdentifier retVal = new SanteDB.Core.Model.DataTypes.EntityIdentifier();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Value = instance.Value;
            if (instance.TypeKey.HasValue) {
                retVal.IdentifierTypeKey = instance.TypeKey.Value;
            }
            retVal.IdentityDomainKey = instance.IdentityDomainKey;
            if (instance.IssueDate.HasValue) {
                retVal.IssueDate = ((System.DateTimeOffset)(instance.IssueDate.Value));
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = ((System.DateTimeOffset)(instance.ExpiryDate.Value));
            }
            retVal.CheckDigit = instance.CheckDigit;
            retVal.Reliability = instance.Reliability;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class GeoTagToDbGeoTagModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.GeoTag, SanteDB.Persistence.Data.Model.DataType.DbGeoTag> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public GeoTagToDbGeoTagModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.GeoTag);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.DataType.DbGeoTag);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.DataType.DbGeoTag instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.DataType.DbGeoTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.GeoTag instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.GeoTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.DataType.DbGeoTag MapToTarget(SanteDB.Core.Model.DataTypes.GeoTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.DataType.DbGeoTag);
            }
            SanteDB.Persistence.Data.Model.DataType.DbGeoTag retVal = new SanteDB.Persistence.Data.Model.DataType.DbGeoTag();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.Lat.HasValue) {
                retVal.Lat = instance.Lat.Value;
            }
            if (instance.Lng.HasValue) {
                retVal.Lng = instance.Lng.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.GeoTag MapToSource(SanteDB.Persistence.Data.Model.DataType.DbGeoTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.GeoTag);
            }
            SanteDB.Core.Model.DataTypes.GeoTag retVal = new SanteDB.Core.Model.DataTypes.GeoTag();
            retVal.Key = instance.Key;
            retVal.Lat = instance.Lat;
            retVal.Lng = instance.Lng;
            return retVal;
        }
    }
    
    public sealed class IdentityDomainToDbIdentityDomainModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.IdentityDomain, SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public IdentityDomainToDbIdentityDomainModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.IdentityDomain);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.IdentityDomain instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.IdentityDomain)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain MapToTarget(SanteDB.Core.Model.DataTypes.IdentityDomain instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain);
            }
            SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain retVal = new SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain();
            retVal.Name = instance.Name;
            retVal.DomainName = instance.DomainName;
            retVal.Oid = instance.Oid;
            retVal.Description = instance.Description;
            retVal.Url = instance.Url;
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            retVal.ValidationRegex = instance.ValidationRegex;
            retVal.CustomValidator = instance.CustomValidator;
            retVal.CheckDigitAlgorithm = instance.CheckDigitAlgorithm;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.IsUnique = instance.IsUnique;
            if (instance.IdentifierClassificationKey.HasValue) {
                retVal.IdentifierClassificationKey = instance.IdentifierClassificationKey.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.IdentityDomain MapToSource(SanteDB.Persistence.Data.Model.DataType.DbIdentityDomain instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.IdentityDomain);
            }
            SanteDB.Core.Model.DataTypes.IdentityDomain retVal = new SanteDB.Core.Model.DataTypes.IdentityDomain();
            retVal.Name = instance.Name;
            retVal.DomainName = instance.DomainName;
            retVal.Oid = instance.Oid;
            retVal.Description = instance.Description;
            retVal.Url = instance.Url;
            if (instance.PolicyKey.HasValue) {
                retVal.PolicyKey = instance.PolicyKey.Value;
            }
            retVal.ValidationRegex = instance.ValidationRegex;
            retVal.CustomValidator = instance.CustomValidator;
            retVal.CheckDigitAlgorithm = instance.CheckDigitAlgorithm;
            retVal.Key = instance.Key;
            retVal.IsUnique = instance.IsUnique;
            if (instance.IdentifierClassificationKey.HasValue) {
                retVal.IdentifierClassificationKey = instance.IdentifierClassificationKey.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class AssigningAuthorityToDbAssigningAuthorityModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.AssigningAuthority, SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public AssigningAuthorityToDbAssigningAuthorityModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.AssigningAuthority);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.AssigningAuthority instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.AssigningAuthority)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority MapToTarget(SanteDB.Core.Model.DataTypes.AssigningAuthority instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority);
            }
            SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority retVal = new SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.AssigningApplicationKey.HasValue) {
                retVal.AssigningApplicationKey = instance.AssigningApplicationKey.Value;
            }
            retVal.Reliability = instance.Reliability;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.AssigningAuthority MapToSource(SanteDB.Persistence.Data.Model.DataType.DbAssigningAuthority instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.AssigningAuthority);
            }
            SanteDB.Core.Model.DataTypes.AssigningAuthority retVal = new SanteDB.Core.Model.DataTypes.AssigningAuthority();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.AssigningApplicationKey = instance.AssigningApplicationKey;
            retVal.Reliability = instance.Reliability;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityTelecomAddressToDbTelecomAddressModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.EntityTelecomAddress, SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityTelecomAddressToDbTelecomAddressModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.EntityTelecomAddress);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.EntityTelecomAddress instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.EntityTelecomAddress)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress MapToTarget(SanteDB.Core.Model.Entities.EntityTelecomAddress instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress);
            }
            SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress retVal = new SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.AddressUseKey.HasValue) {
                retVal.TelecomUseKey = instance.AddressUseKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.Value = instance.Value;
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.EntityTelecomAddress MapToSource(SanteDB.Persistence.Data.Model.Entities.DbTelecomAddress instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.EntityTelecomAddress);
            }
            SanteDB.Core.Model.Entities.EntityTelecomAddress retVal = new SanteDB.Core.Model.Entities.EntityTelecomAddress();
            retVal.Key = instance.Key;
            retVal.AddressUseKey = instance.TelecomUseKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.Value = instance.Value;
            retVal.ExternalKey = instance.ExternalKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityExtensionToDbEntityExtensionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.EntityExtension, SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityExtensionToDbEntityExtensionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.EntityExtension);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityExtension instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.EntityExtension)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension MapToTarget(SanteDB.Core.Model.DataTypes.EntityExtension instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.ExtensionTypeKey.HasValue) {
                retVal.ExtensionTypeKey = instance.ExtensionTypeKey.Value;
            }
            retVal.Value = instance.ExtensionValueData;
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.EntityExtension MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbEntityExtension instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.EntityExtension);
            }
            SanteDB.Core.Model.DataTypes.EntityExtension retVal = new SanteDB.Core.Model.DataTypes.EntityExtension();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.ExtensionTypeKey = instance.ExtensionTypeKey;
            retVal.ExtensionValueData = instance.Value;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityNoteToDbEntityNoteModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.EntityNote, SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityNoteToDbEntityNoteModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.EntityNote);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityNote instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.EntityNote)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote MapToTarget(SanteDB.Core.Model.DataTypes.EntityNote instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.Text = instance.Text;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.AuthorKey.HasValue) {
                retVal.AuthorKey = instance.AuthorKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.EntityNote MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbEntityNote instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.EntityNote);
            }
            SanteDB.Core.Model.DataTypes.EntityNote retVal = new SanteDB.Core.Model.DataTypes.EntityNote();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Text = instance.Text;
            retVal.Key = instance.Key;
            retVal.AuthorKey = instance.AuthorKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class EntityTagToDbEntityTagModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.EntityTag, SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public EntityTagToDbEntityTagModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.EntityTag);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.EntityTag instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.EntityTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag MapToTarget(SanteDB.Core.Model.DataTypes.EntityTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.TagKey = instance.TagKey;
            retVal.Value = instance.Value;
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.EntityTag MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbEntityTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.EntityTag);
            }
            SanteDB.Core.Model.DataTypes.EntityTag retVal = new SanteDB.Core.Model.DataTypes.EntityTag();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Key = instance.Key;
            retVal.CreatedByKey = instance.CreatedByKey;
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.TagKey = instance.TagKey;
            retVal.Value = instance.Value;
            return retVal;
        }
    }
    
    public sealed class ExtensionTypeToDbExtensionTypeModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ExtensionType, SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ExtensionTypeToDbExtensionTypeModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ExtensionType);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ExtensionType instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ExtensionType)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType MapToTarget(SanteDB.Core.Model.DataTypes.ExtensionType instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType();
            retVal.Name = instance.Name;
            retVal.Uri = instance.Uri;
            retVal.ExtensionHandler = instance.ExtensionHandler.AssemblyQualifiedName;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ExtensionType MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbExtensionType instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ExtensionType);
            }
            SanteDB.Core.Model.DataTypes.ExtensionType retVal = new SanteDB.Core.Model.DataTypes.ExtensionType();
            retVal.Name = instance.Name;
            retVal.Uri = instance.Uri;
            retVal.ExtensionHandler = System.Type.GetType(instance.ExtensionHandler);
            retVal.Key = instance.Key;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class NonPersonLivingSubjectToDbNonPersonLivingSubjectModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.NonPersonLivingSubject, SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.NonPersonLivingSubject, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NonPersonLivingSubjectToDbNonPersonLivingSubjectModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.NonPersonLivingSubject);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.NonPersonLivingSubject instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.NonPersonLivingSubject)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject MapToTarget(SanteDB.Core.Model.Entities.NonPersonLivingSubject instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject);
            }
            SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject retVal = new SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject();
            if (instance.StrainKey.HasValue) {
                retVal.StrainKey = instance.StrainKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.NonPersonLivingSubject MapToSource(SanteDB.Persistence.Data.Model.Entities.DbNonPersonLivingSubject instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.NonPersonLivingSubject);
            }
            SanteDB.Core.Model.Entities.NonPersonLivingSubject retVal = new SanteDB.Core.Model.Entities.NonPersonLivingSubject();
            if (instance.StrainKey.HasValue) {
                retVal.StrainKey = instance.StrainKey.Value;
            }
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.NonPersonLivingSubject, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.NonPersonLivingSubject instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.NonPersonLivingSubject SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.NonPersonLivingSubject, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.NonPersonLivingSubject);
            }
            SanteDB.Core.Model.Entities.NonPersonLivingSubject retVal = new SanteDB.Core.Model.Entities.NonPersonLivingSubject();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class PersonToDbPersonModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Person, SanteDB.Persistence.Data.Model.Entities.DbPerson>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Person, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PersonToDbPersonModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.Person);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbPerson);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbPerson instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbPerson)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Person instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.Person)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbPerson MapToTarget(SanteDB.Core.Model.Entities.Person instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPerson);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPerson retVal = new SanteDB.Persistence.Data.Model.Entities.DbPerson();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if (instance.DateOfBirthPrecision.HasValue) {
                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DateOfBirthPrecision = "S";
                }
                else {
                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DateOfBirthPrecision = "M";
                    }
                    else {
                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DateOfBirthPrecision = "H";
                        }
                        else {
                            if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DateOfBirthPrecision = "D";
                            }
                            else {
                                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DateOfBirthPrecision = "m";
                                }
                                else {
                                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DateOfBirthPrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DateOfBirthPrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if (instance.DeceasedDatePrecision.HasValue) {
                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DeceasedDatePrecision = "S";
                }
                else {
                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DeceasedDatePrecision = "M";
                    }
                    else {
                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DeceasedDatePrecision = "H";
                        }
                        else {
                            if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DeceasedDatePrecision = "D";
                            }
                            else {
                                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DeceasedDatePrecision = "m";
                                }
                                else {
                                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DeceasedDatePrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DeceasedDatePrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.Person MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPerson instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Person);
            }
            SanteDB.Core.Model.Entities.Person retVal = new SanteDB.Core.Model.Entities.Person();
            retVal.VersionKey = instance.ParentKey;
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if ("S".Equals(instance.DateOfBirthPrecision)) {
                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DateOfBirthPrecision)) {
                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DateOfBirthPrecision)) {
                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DateOfBirthPrecision)) {
                            retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DateOfBirthPrecision)) {
                                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DateOfBirthPrecision)) {
                                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DateOfBirthPrecision)) {
                                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if ("S".Equals(instance.DeceasedDatePrecision)) {
                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DeceasedDatePrecision)) {
                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DeceasedDatePrecision)) {
                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DeceasedDatePrecision)) {
                            retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DeceasedDatePrecision)) {
                                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DeceasedDatePrecision)) {
                                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DeceasedDatePrecision)) {
                                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Person, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.Person instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.Person SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Person, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Person);
            }
            SanteDB.Core.Model.Entities.Person retVal = new SanteDB.Core.Model.Entities.Person();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ContainerToDbContainerModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbContainer>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbMaterial> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ContainerToDbContainerModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.Container);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbContainer);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbContainer instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbContainer)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Container instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.Container)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbContainer MapToTarget(SanteDB.Core.Model.Entities.Container instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbContainer);
            }
            SanteDB.Persistence.Data.Model.Entities.DbContainer retVal = new SanteDB.Persistence.Data.Model.Entities.DbContainer();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.CapacityQuantity.HasValue) {
                retVal.CapacityQuantity = instance.CapacityQuantity.Value;
            }
            if (instance.DiameterQuantity.HasValue) {
                retVal.DiameterQuantity = instance.DiameterQuantity.Value;
            }
            if (instance.HeightQuantity.HasValue) {
                retVal.HeightQuantity = instance.HeightQuantity.Value;
            }
            retVal.LotNumber = instance.LotNumber;
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.Container MapToSource(SanteDB.Persistence.Data.Model.Entities.DbContainer instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Container);
            }
            SanteDB.Core.Model.Entities.Container retVal = new SanteDB.Core.Model.Entities.Container();
            retVal.VersionKey = instance.ParentKey;
            if (instance.CapacityQuantity.HasValue) {
                retVal.CapacityQuantity = instance.CapacityQuantity.Value;
            }
            if (instance.DiameterQuantity.HasValue) {
                retVal.DiameterQuantity = instance.DiameterQuantity.Value;
            }
            if (instance.HeightQuantity.HasValue) {
                retVal.HeightQuantity = instance.HeightQuantity.Value;
            }
            retVal.LotNumber = instance.LotNumber;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.Container instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.Container SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Container);
            }
            SanteDB.Core.Model.Entities.Container retVal = new SanteDB.Core.Model.Entities.Container();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbMaterial SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbMaterial>.MapToTarget(SanteDB.Core.Model.Entities.Container instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbMaterial);
            }
            SanteDB.Persistence.Data.Model.Entities.DbMaterial retVal = new SanteDB.Persistence.Data.Model.Entities.DbMaterial();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            if (instance.FormConceptKey.HasValue) {
                retVal.FormConceptKey = instance.FormConceptKey.Value;
            }
            if (instance.QuantityConceptKey.HasValue) {
                retVal.QuantityConceptKey = instance.QuantityConceptKey.Value;
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value;
            }
            retVal.IsAdministrable = instance.IsAdministrable;
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.Container SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Container, SanteDB.Persistence.Data.Model.Entities.DbMaterial>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Container);
            }
            SanteDB.Core.Model.Entities.Container retVal = new SanteDB.Core.Model.Entities.Container();
            retVal.VersionKey = instance.ParentKey;
            retVal.Quantity = instance.Quantity;
            retVal.FormConceptKey = instance.FormConceptKey;
            retVal.QuantityConceptKey = instance.QuantityConceptKey;
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value;
            }
            retVal.IsAdministrable = instance.IsAdministrable;
            return retVal;
        }
    }
    
    public sealed class PersonLanguageCommunicationToDbPersonLanguageCommunicationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.PersonLanguageCommunication, SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PersonLanguageCommunicationToDbPersonLanguageCommunicationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.PersonLanguageCommunication);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.PersonLanguageCommunication instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.PersonLanguageCommunication)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication MapToTarget(SanteDB.Core.Model.Entities.PersonLanguageCommunication instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication retVal = new SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication();
            retVal.LanguageCode = instance.LanguageCode;
            retVal.IsPreferred = instance.IsPreferred;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.PersonLanguageCommunication MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPersonLanguageCommunication instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.PersonLanguageCommunication);
            }
            SanteDB.Core.Model.Entities.PersonLanguageCommunication retVal = new SanteDB.Core.Model.Entities.PersonLanguageCommunication();
            retVal.LanguageCode = instance.LanguageCode;
            retVal.IsPreferred = instance.IsPreferred;
            retVal.Key = instance.Key;
            retVal.ExternalKey = instance.ExternalKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class NarrativeToDbNarrativeModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Narrative, SanteDB.Persistence.Data.Model.Acts.DbNarrative>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Narrative, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NarrativeToDbNarrativeModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.Narrative);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbNarrative);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbNarrative instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbNarrative)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Narrative instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.Narrative)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbNarrative MapToTarget(SanteDB.Core.Model.Acts.Narrative instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbNarrative);
            }
            SanteDB.Persistence.Data.Model.Acts.DbNarrative retVal = new SanteDB.Persistence.Data.Model.Acts.DbNarrative();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            retVal.VersionNumber = instance.VersionNumber;
            retVal.LanguageCode = instance.LanguageCode;
            retVal.Title = instance.Title;
            retVal.MimeType = instance.MimeType;
            retVal.Text = instance.Text;
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.Narrative MapToSource(SanteDB.Persistence.Data.Model.Acts.DbNarrative instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Narrative);
            }
            SanteDB.Core.Model.Acts.Narrative retVal = new SanteDB.Core.Model.Acts.Narrative();
            retVal.VersionKey = instance.ParentKey;
            retVal.VersionNumber = instance.VersionNumber;
            retVal.LanguageCode = instance.LanguageCode;
            retVal.Title = instance.Title;
            retVal.MimeType = instance.MimeType;
            retVal.Text = instance.Text;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Narrative, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.Narrative instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.Narrative SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Narrative, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Narrative);
            }
            SanteDB.Core.Model.Acts.Narrative retVal = new SanteDB.Core.Model.Acts.Narrative();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class PatientToDbPatientModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Roles.DbPatient>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Entities.DbPerson> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PatientToDbPatientModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Roles.Patient);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Roles.DbPatient);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Roles.DbPatient instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Roles.DbPatient)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Roles.Patient instance;
            try {
                instance = ((SanteDB.Core.Model.Roles.Patient)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Roles.DbPatient MapToTarget(SanteDB.Core.Model.Roles.Patient instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Roles.DbPatient);
            }
            SanteDB.Persistence.Data.Model.Roles.DbPatient retVal = new SanteDB.Persistence.Data.Model.Roles.DbPatient();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.MultipleBirthOrder.HasValue) {
                retVal.MultipleBirthOrder = instance.MultipleBirthOrder.Value;
            }
            if (instance.MaritalStatusKey.HasValue) {
                retVal.MaritalStatusKey = instance.MaritalStatusKey.Value;
            }
            if (instance.EducationLevelKey.HasValue) {
                retVal.EducationLevelKey = instance.EducationLevelKey.Value;
            }
            if (instance.LivingArrangementKey.HasValue) {
                retVal.LivingArrangementKey = instance.LivingArrangementKey.Value;
            }
            if (instance.EthnicGroupKey.HasValue) {
                retVal.EthnicGroupKey = instance.EthnicGroupKey.Value;
            }
            if (instance.ReligiousAffiliationKey.HasValue) {
                retVal.ReligiousAffiliationKey = instance.ReligiousAffiliationKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Roles.Patient MapToSource(SanteDB.Persistence.Data.Model.Roles.DbPatient instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Roles.Patient);
            }
            SanteDB.Core.Model.Roles.Patient retVal = new SanteDB.Core.Model.Roles.Patient();
            retVal.VersionKey = instance.ParentKey;
            if (instance.MultipleBirthOrder.HasValue) {
                retVal.MultipleBirthOrder = instance.MultipleBirthOrder.Value;
            }
            if (instance.MaritalStatusKey.HasValue) {
                retVal.MaritalStatusKey = instance.MaritalStatusKey.Value;
            }
            if (instance.EducationLevelKey.HasValue) {
                retVal.EducationLevelKey = instance.EducationLevelKey.Value;
            }
            if (instance.LivingArrangementKey.HasValue) {
                retVal.LivingArrangementKey = instance.LivingArrangementKey.Value;
            }
            if (instance.EthnicGroupKey.HasValue) {
                retVal.EthnicGroupKey = instance.EthnicGroupKey.Value;
            }
            if (instance.ReligiousAffiliationKey.HasValue) {
                retVal.ReligiousAffiliationKey = instance.ReligiousAffiliationKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Roles.Patient instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Roles.Patient SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Roles.Patient);
            }
            SanteDB.Core.Model.Roles.Patient retVal = new SanteDB.Core.Model.Roles.Patient();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbPerson SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Entities.DbPerson>.MapToTarget(SanteDB.Core.Model.Roles.Patient instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPerson);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPerson retVal = new SanteDB.Persistence.Data.Model.Entities.DbPerson();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if (instance.DateOfBirthPrecision.HasValue) {
                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DateOfBirthPrecision = "S";
                }
                else {
                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DateOfBirthPrecision = "M";
                    }
                    else {
                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DateOfBirthPrecision = "H";
                        }
                        else {
                            if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DateOfBirthPrecision = "D";
                            }
                            else {
                                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DateOfBirthPrecision = "m";
                                }
                                else {
                                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DateOfBirthPrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DateOfBirthPrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if (instance.DeceasedDatePrecision.HasValue) {
                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DeceasedDatePrecision = "S";
                }
                else {
                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DeceasedDatePrecision = "M";
                    }
                    else {
                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DeceasedDatePrecision = "H";
                        }
                        else {
                            if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DeceasedDatePrecision = "D";
                            }
                            else {
                                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DeceasedDatePrecision = "m";
                                }
                                else {
                                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DeceasedDatePrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DeceasedDatePrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Roles.Patient SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Patient, SanteDB.Persistence.Data.Model.Entities.DbPerson>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPerson instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Roles.Patient);
            }
            SanteDB.Core.Model.Roles.Patient retVal = new SanteDB.Core.Model.Roles.Patient();
            retVal.VersionKey = instance.ParentKey;
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if ("S".Equals(instance.DateOfBirthPrecision)) {
                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DateOfBirthPrecision)) {
                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DateOfBirthPrecision)) {
                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DateOfBirthPrecision)) {
                            retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DateOfBirthPrecision)) {
                                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DateOfBirthPrecision)) {
                                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DateOfBirthPrecision)) {
                                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if ("S".Equals(instance.DeceasedDatePrecision)) {
                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DeceasedDatePrecision)) {
                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DeceasedDatePrecision)) {
                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DeceasedDatePrecision)) {
                            retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DeceasedDatePrecision)) {
                                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DeceasedDatePrecision)) {
                                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DeceasedDatePrecision)) {
                                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
    }
    
    public sealed class MaterialToDbMaterialModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Material, SanteDB.Persistence.Data.Model.Entities.DbMaterial>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Material, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public MaterialToDbMaterialModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.Material);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbMaterial);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbMaterial instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbMaterial)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Material instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.Material)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbMaterial MapToTarget(SanteDB.Core.Model.Entities.Material instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbMaterial);
            }
            SanteDB.Persistence.Data.Model.Entities.DbMaterial retVal = new SanteDB.Persistence.Data.Model.Entities.DbMaterial();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            if (instance.FormConceptKey.HasValue) {
                retVal.FormConceptKey = instance.FormConceptKey.Value;
            }
            if (instance.QuantityConceptKey.HasValue) {
                retVal.QuantityConceptKey = instance.QuantityConceptKey.Value;
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value;
            }
            retVal.IsAdministrable = instance.IsAdministrable;
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.Material MapToSource(SanteDB.Persistence.Data.Model.Entities.DbMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Material);
            }
            SanteDB.Core.Model.Entities.Material retVal = new SanteDB.Core.Model.Entities.Material();
            retVal.VersionKey = instance.ParentKey;
            retVal.Quantity = instance.Quantity;
            retVal.FormConceptKey = instance.FormConceptKey;
            retVal.QuantityConceptKey = instance.QuantityConceptKey;
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value;
            }
            retVal.IsAdministrable = instance.IsAdministrable;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Material, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.Material instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.Material SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Material, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Material);
            }
            SanteDB.Core.Model.Entities.Material retVal = new SanteDB.Core.Model.Entities.Material();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ManufacturedMaterialToDbManufacturedMaterialModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbMaterial> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ManufacturedMaterialToDbManufacturedMaterialModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.ManufacturedMaterial);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.ManufacturedMaterial instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.ManufacturedMaterial)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial MapToTarget(SanteDB.Core.Model.Entities.ManufacturedMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial);
            }
            SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial retVal = new SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            retVal.LotNumber = instance.LotNumber;
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.ManufacturedMaterial MapToSource(SanteDB.Persistence.Data.Model.Entities.DbManufacturedMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.ManufacturedMaterial);
            }
            SanteDB.Core.Model.Entities.ManufacturedMaterial retVal = new SanteDB.Core.Model.Entities.ManufacturedMaterial();
            retVal.VersionKey = instance.ParentKey;
            retVal.LotNumber = instance.LotNumber;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.ManufacturedMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.ManufacturedMaterial SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.ManufacturedMaterial);
            }
            SanteDB.Core.Model.Entities.ManufacturedMaterial retVal = new SanteDB.Core.Model.Entities.ManufacturedMaterial();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbMaterial SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbMaterial>.MapToTarget(SanteDB.Core.Model.Entities.ManufacturedMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbMaterial);
            }
            SanteDB.Persistence.Data.Model.Entities.DbMaterial retVal = new SanteDB.Persistence.Data.Model.Entities.DbMaterial();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            if (instance.FormConceptKey.HasValue) {
                retVal.FormConceptKey = instance.FormConceptKey.Value;
            }
            if (instance.QuantityConceptKey.HasValue) {
                retVal.QuantityConceptKey = instance.QuantityConceptKey.Value;
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value;
            }
            retVal.IsAdministrable = instance.IsAdministrable;
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.ManufacturedMaterial SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ManufacturedMaterial, SanteDB.Persistence.Data.Model.Entities.DbMaterial>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbMaterial instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.ManufacturedMaterial);
            }
            SanteDB.Core.Model.Entities.ManufacturedMaterial retVal = new SanteDB.Core.Model.Entities.ManufacturedMaterial();
            retVal.VersionKey = instance.ParentKey;
            retVal.Quantity = instance.Quantity;
            retVal.FormConceptKey = instance.FormConceptKey;
            retVal.QuantityConceptKey = instance.QuantityConceptKey;
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value;
            }
            retVal.IsAdministrable = instance.IsAdministrable;
            return retVal;
        }
    }
    
    public sealed class ProviderToDbProviderModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Roles.DbProvider>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Entities.DbPerson> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ProviderToDbProviderModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Roles.Provider);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Roles.DbProvider);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Roles.DbProvider instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Roles.DbProvider)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Roles.Provider instance;
            try {
                instance = ((SanteDB.Core.Model.Roles.Provider)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Roles.DbProvider MapToTarget(SanteDB.Core.Model.Roles.Provider instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Roles.DbProvider);
            }
            SanteDB.Persistence.Data.Model.Roles.DbProvider retVal = new SanteDB.Persistence.Data.Model.Roles.DbProvider();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.SpecialtyKey.HasValue) {
                retVal.SpecialtyKey = instance.SpecialtyKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Roles.Provider MapToSource(SanteDB.Persistence.Data.Model.Roles.DbProvider instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Roles.Provider);
            }
            SanteDB.Core.Model.Roles.Provider retVal = new SanteDB.Core.Model.Roles.Provider();
            retVal.VersionKey = instance.ParentKey;
            retVal.SpecialtyKey = instance.SpecialtyKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Roles.Provider instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Roles.Provider SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Roles.Provider);
            }
            SanteDB.Core.Model.Roles.Provider retVal = new SanteDB.Core.Model.Roles.Provider();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbPerson SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Entities.DbPerson>.MapToTarget(SanteDB.Core.Model.Roles.Provider instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPerson);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPerson retVal = new SanteDB.Persistence.Data.Model.Entities.DbPerson();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if (instance.DateOfBirthPrecision.HasValue) {
                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DateOfBirthPrecision = "S";
                }
                else {
                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DateOfBirthPrecision = "M";
                    }
                    else {
                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DateOfBirthPrecision = "H";
                        }
                        else {
                            if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DateOfBirthPrecision = "D";
                            }
                            else {
                                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DateOfBirthPrecision = "m";
                                }
                                else {
                                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DateOfBirthPrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DateOfBirthPrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if (instance.DeceasedDatePrecision.HasValue) {
                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DeceasedDatePrecision = "S";
                }
                else {
                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DeceasedDatePrecision = "M";
                    }
                    else {
                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DeceasedDatePrecision = "H";
                        }
                        else {
                            if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DeceasedDatePrecision = "D";
                            }
                            else {
                                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DeceasedDatePrecision = "m";
                                }
                                else {
                                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DeceasedDatePrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DeceasedDatePrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Roles.Provider SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Roles.Provider, SanteDB.Persistence.Data.Model.Entities.DbPerson>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPerson instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Roles.Provider);
            }
            SanteDB.Core.Model.Roles.Provider retVal = new SanteDB.Core.Model.Roles.Provider();
            retVal.VersionKey = instance.ParentKey;
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if ("S".Equals(instance.DateOfBirthPrecision)) {
                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DateOfBirthPrecision)) {
                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DateOfBirthPrecision)) {
                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DateOfBirthPrecision)) {
                            retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DateOfBirthPrecision)) {
                                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DateOfBirthPrecision)) {
                                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DateOfBirthPrecision)) {
                                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if ("S".Equals(instance.DeceasedDatePrecision)) {
                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DeceasedDatePrecision)) {
                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DeceasedDatePrecision)) {
                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DeceasedDatePrecision)) {
                            retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DeceasedDatePrecision)) {
                                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DeceasedDatePrecision)) {
                                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DeceasedDatePrecision)) {
                                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
    }
    
    public sealed class OrganizationToDbOrganizationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Organization, SanteDB.Persistence.Data.Model.Entities.DbOrganization>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Organization, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public OrganizationToDbOrganizationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.Organization);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbOrganization);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbOrganization instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbOrganization)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Organization instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.Organization)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbOrganization MapToTarget(SanteDB.Core.Model.Entities.Organization instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbOrganization);
            }
            SanteDB.Persistence.Data.Model.Entities.DbOrganization retVal = new SanteDB.Persistence.Data.Model.Entities.DbOrganization();
            if (instance.IndustryConceptKey.HasValue) {
                retVal.IndustryConceptKey = instance.IndustryConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.Organization MapToSource(SanteDB.Persistence.Data.Model.Entities.DbOrganization instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Organization);
            }
            SanteDB.Core.Model.Entities.Organization retVal = new SanteDB.Core.Model.Entities.Organization();
            retVal.IndustryConceptKey = instance.IndustryConceptKey;
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Organization, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.Organization instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.Organization SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Organization, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Organization);
            }
            SanteDB.Core.Model.Entities.Organization retVal = new SanteDB.Core.Model.Entities.Organization();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class PlaceToDbPlaceModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Place, SanteDB.Persistence.Data.Model.Entities.DbPlace>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Place, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PlaceToDbPlaceModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.Place);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbPlace);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbPlace instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbPlace)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.Place instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.Place)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbPlace MapToTarget(SanteDB.Core.Model.Entities.Place instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPlace);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPlace retVal = new SanteDB.Persistence.Data.Model.Entities.DbPlace();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            retVal.IsMobile = instance.IsMobile;
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.Place MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPlace instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Place);
            }
            SanteDB.Core.Model.Entities.Place retVal = new SanteDB.Core.Model.Entities.Place();
            retVal.VersionKey = instance.ParentKey;
            retVal.IsMobile = instance.IsMobile;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Place, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.Place instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.Place SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.Place, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.Place);
            }
            SanteDB.Core.Model.Entities.Place retVal = new SanteDB.Core.Model.Entities.Place();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class PlaceServiceToDbPlaceServiceModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.PlaceService, SanteDB.Persistence.Data.Model.Entities.DbPlaceService> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PlaceServiceToDbPlaceServiceModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.PlaceService);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbPlaceService);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbPlaceService instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbPlaceService)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.PlaceService instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.PlaceService)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbPlaceService MapToTarget(SanteDB.Core.Model.Entities.PlaceService instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPlaceService);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPlaceService retVal = new SanteDB.Persistence.Data.Model.Entities.DbPlaceService();
            retVal.ServiceSchedule = instance.ServiceSchedule;
            if (instance.ServiceConceptKey.HasValue) {
                retVal.ServiceConceptKey = instance.ServiceConceptKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.PlaceService MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPlaceService instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.PlaceService);
            }
            SanteDB.Core.Model.Entities.PlaceService retVal = new SanteDB.Core.Model.Entities.PlaceService();
            retVal.ServiceSchedule = instance.ServiceSchedule;
            retVal.ServiceConceptKey = instance.ServiceConceptKey;
            retVal.Key = instance.Key;
            retVal.ExternalKey = instance.ExternalKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ApplicationEntityToDbApplicationEntityModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ApplicationEntity, SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ApplicationEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ApplicationEntityToDbApplicationEntityModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.ApplicationEntity);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.ApplicationEntity instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.ApplicationEntity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity MapToTarget(SanteDB.Core.Model.Entities.ApplicationEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity);
            }
            SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity retVal = new SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity();
            if (instance.SecurityApplicationKey.HasValue) {
                retVal.SecurityApplicationKey = instance.SecurityApplicationKey.Value;
            }
            retVal.SoftwareName = instance.SoftwareName;
            retVal.VersionName = instance.VersionName;
            retVal.VendorName = instance.VendorName;
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.ApplicationEntity MapToSource(SanteDB.Persistence.Data.Model.Entities.DbApplicationEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.ApplicationEntity);
            }
            SanteDB.Core.Model.Entities.ApplicationEntity retVal = new SanteDB.Core.Model.Entities.ApplicationEntity();
            retVal.SecurityApplicationKey = instance.SecurityApplicationKey;
            retVal.SoftwareName = instance.SoftwareName;
            retVal.VersionName = instance.VersionName;
            retVal.VendorName = instance.VendorName;
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ApplicationEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.ApplicationEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.ApplicationEntity SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.ApplicationEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.ApplicationEntity);
            }
            SanteDB.Core.Model.Entities.ApplicationEntity retVal = new SanteDB.Core.Model.Entities.ApplicationEntity();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class DeviceEntityToDbDeviceEntityModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.DeviceEntity, SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.DeviceEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public DeviceEntityToDbDeviceEntityModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.DeviceEntity);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.DeviceEntity instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.DeviceEntity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity MapToTarget(SanteDB.Core.Model.Entities.DeviceEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity);
            }
            SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity retVal = new SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity();
            if (instance.SecurityDeviceKey.HasValue) {
                retVal.SecurityDeviceKey = instance.SecurityDeviceKey.Value;
            }
            retVal.ManufacturerModelName = instance.ManufacturerModelName;
            retVal.OperatingSystemName = instance.OperatingSystemName;
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.DeviceEntity MapToSource(SanteDB.Persistence.Data.Model.Entities.DbDeviceEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.DeviceEntity);
            }
            SanteDB.Core.Model.Entities.DeviceEntity retVal = new SanteDB.Core.Model.Entities.DeviceEntity();
            retVal.SecurityDeviceKey = instance.SecurityDeviceKey;
            retVal.ManufacturerModelName = instance.ManufacturerModelName;
            retVal.OperatingSystemName = instance.OperatingSystemName;
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.DeviceEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.DeviceEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.DeviceEntity SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.DeviceEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.DeviceEntity);
            }
            SanteDB.Core.Model.Entities.DeviceEntity retVal = new SanteDB.Core.Model.Entities.DeviceEntity();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class UserEntityToDbUserEntityModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbUserEntity>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbPerson> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public UserEntityToDbUserEntityModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Entities.UserEntity);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Entities.DbUserEntity);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Entities.DbUserEntity instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Entities.DbUserEntity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Entities.UserEntity instance;
            try {
                instance = ((SanteDB.Core.Model.Entities.UserEntity)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Entities.DbUserEntity MapToTarget(SanteDB.Core.Model.Entities.UserEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbUserEntity);
            }
            SanteDB.Persistence.Data.Model.Entities.DbUserEntity retVal = new SanteDB.Persistence.Data.Model.Entities.DbUserEntity();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.SecurityUserKey.HasValue) {
                retVal.SecurityUserKey = instance.SecurityUserKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Entities.UserEntity MapToSource(SanteDB.Persistence.Data.Model.Entities.DbUserEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.UserEntity);
            }
            SanteDB.Core.Model.Entities.UserEntity retVal = new SanteDB.Core.Model.Entities.UserEntity();
            retVal.VersionKey = instance.ParentKey;
            if (instance.SecurityUserKey.HasValue) {
                retVal.SecurityUserKey = instance.SecurityUserKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbEntityVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToTarget(SanteDB.Core.Model.Entities.UserEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion);
            }
            SanteDB.Persistence.Data.Model.Entities.DbEntityVersion retVal = new SanteDB.Persistence.Data.Model.Entities.DbEntityVersion();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.DeterminerConceptKey.HasValue) {
                retVal.DeterminerConceptKey = instance.DeterminerConceptKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.UserEntity SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbEntityVersion>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbEntityVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.UserEntity);
            }
            SanteDB.Core.Model.Entities.UserEntity retVal = new SanteDB.Core.Model.Entities.UserEntity();
            retVal.Key = instance.Key;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.DeterminerConceptKey = instance.DeterminerConceptKey;
            retVal.StatusConceptKey = instance.StatusConceptKey;
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            retVal.VersionKey = instance.VersionKey;
            if (instance.CreationActKey.HasValue) {
                retVal.CreationActKey = instance.CreationActKey.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Entities.DbPerson SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbPerson>.MapToTarget(SanteDB.Core.Model.Entities.UserEntity instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Entities.DbPerson);
            }
            SanteDB.Persistence.Data.Model.Entities.DbPerson retVal = new SanteDB.Persistence.Data.Model.Entities.DbPerson();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if (instance.DateOfBirthPrecision.HasValue) {
                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DateOfBirthPrecision = "S";
                }
                else {
                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DateOfBirthPrecision = "M";
                    }
                    else {
                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DateOfBirthPrecision = "H";
                        }
                        else {
                            if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DateOfBirthPrecision = "D";
                            }
                            else {
                                if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DateOfBirthPrecision = "m";
                                }
                                else {
                                    if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DateOfBirthPrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DateOfBirthPrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DateOfBirthPrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if (instance.DeceasedDatePrecision.HasValue) {
                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Second)) {
                    retVal.DeceasedDatePrecision = "S";
                }
                else {
                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Minute)) {
                        retVal.DeceasedDatePrecision = "M";
                    }
                    else {
                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Hour)) {
                            retVal.DeceasedDatePrecision = "H";
                        }
                        else {
                            if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Day)) {
                                retVal.DeceasedDatePrecision = "D";
                            }
                            else {
                                if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Month)) {
                                    retVal.DeceasedDatePrecision = "m";
                                }
                                else {
                                    if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Year)) {
                                        retVal.DeceasedDatePrecision = "Y";
                                    }
                                    else {
                                        if ((instance.DeceasedDatePrecision.Value == SanteDB.Core.Model.DataTypes.DatePrecision.Full)) {
                                            retVal.DeceasedDatePrecision = "F";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Entities.UserEntity SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Entities.UserEntity, SanteDB.Persistence.Data.Model.Entities.DbPerson>.MapToSource(SanteDB.Persistence.Data.Model.Entities.DbPerson instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Entities.UserEntity);
            }
            SanteDB.Core.Model.Entities.UserEntity retVal = new SanteDB.Core.Model.Entities.UserEntity();
            retVal.VersionKey = instance.ParentKey;
            if (instance.DateOfBirth.HasValue) {
                retVal.DateOfBirth = instance.DateOfBirth.Value;
            }
            if ("S".Equals(instance.DateOfBirthPrecision)) {
                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DateOfBirthPrecision)) {
                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DateOfBirthPrecision)) {
                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DateOfBirthPrecision)) {
                            retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DateOfBirthPrecision)) {
                                retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DateOfBirthPrecision)) {
                                    retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DateOfBirthPrecision)) {
                                        retVal.DateOfBirthPrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.DeceasedDate.HasValue) {
                retVal.DeceasedDate = instance.DeceasedDate.Value;
            }
            if ("S".Equals(instance.DeceasedDatePrecision)) {
                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Second;
            }
            else {
                if ("M".Equals(instance.DeceasedDatePrecision)) {
                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Minute;
                }
                else {
                    if ("H".Equals(instance.DeceasedDatePrecision)) {
                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Hour;
                    }
                    else {
                        if ("D".Equals(instance.DeceasedDatePrecision)) {
                            retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Day;
                        }
                        else {
                            if ("m".Equals(instance.DeceasedDatePrecision)) {
                                retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Month;
                            }
                            else {
                                if ("Y".Equals(instance.DeceasedDatePrecision)) {
                                    retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Year;
                                }
                                else {
                                    if ("F".Equals(instance.DeceasedDatePrecision)) {
                                        retVal.DeceasedDatePrecision = SanteDB.Core.Model.DataTypes.DatePrecision.Full;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (instance.OccupationKey.HasValue) {
                retVal.OccupationKey = instance.OccupationKey.Value;
            }
            if (instance.VipStatusKey.HasValue) {
                retVal.VipStatusKey = instance.VipStatusKey.Value;
            }
            if (instance.NationalityKey.HasValue) {
                retVal.NationalityKey = instance.NationalityKey.Value;
            }
            if (instance.GenderConceptKey.HasValue) {
                retVal.GenderConceptKey = instance.GenderConceptKey.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActToDbActVersionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Act, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActToDbActVersionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.Act);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbActVersion)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Act instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.Act)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbActVersion MapToTarget(SanteDB.Core.Model.Acts.Act instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.Act MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Act);
            }
            SanteDB.Core.Model.Acts.Act retVal = new SanteDB.Core.Model.Acts.Act();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class CarePlanToDbCarePlanModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CarePlan, SanteDB.Persistence.Data.Model.Acts.DbCarePlan>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CarePlan, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public CarePlanToDbCarePlanModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.CarePlan);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbCarePlan);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbCarePlan instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbCarePlan)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.CarePlan instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.CarePlan)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbCarePlan MapToTarget(SanteDB.Core.Model.Acts.CarePlan instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbCarePlan);
            }
            SanteDB.Persistence.Data.Model.Acts.DbCarePlan retVal = new SanteDB.Persistence.Data.Model.Acts.DbCarePlan();
            retVal.Title = instance.Title;
            if (instance.CarePathwayKey.HasValue) {
                retVal.CarePathwayKey = instance.CarePathwayKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.CarePlan MapToSource(SanteDB.Persistence.Data.Model.Acts.DbCarePlan instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.CarePlan);
            }
            SanteDB.Core.Model.Acts.CarePlan retVal = new SanteDB.Core.Model.Acts.CarePlan();
            retVal.Title = instance.Title;
            if (instance.CarePathwayKey.HasValue) {
                retVal.CarePathwayKey = instance.CarePathwayKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CarePlan, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.CarePlan instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.CarePlan SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CarePlan, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.CarePlan);
            }
            SanteDB.Core.Model.Acts.CarePlan retVal = new SanteDB.Core.Model.Acts.CarePlan();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class CarePathwayDefinitionToDbCarePathwayDefinitionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CarePathwayDefinition, SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public CarePathwayDefinitionToDbCarePathwayDefinitionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.CarePathwayDefinition);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.CarePathwayDefinition instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.CarePathwayDefinition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition MapToTarget(SanteDB.Core.Model.Acts.CarePathwayDefinition instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition);
            }
            SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition retVal = new SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Name = instance.Name;
            retVal.Description = instance.Description;
            retVal.EnrollmentMode = instance.EnrollmentMode;
            retVal.EligibilityCriteria = instance.EligibilityCriteria;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.CarePathwayDefinition MapToSource(SanteDB.Persistence.Data.Model.Acts.DbCarePathwayDefinition instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.CarePathwayDefinition);
            }
            SanteDB.Core.Model.Acts.CarePathwayDefinition retVal = new SanteDB.Core.Model.Acts.CarePathwayDefinition();
            retVal.Key = instance.Key;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Name = instance.Name;
            retVal.Description = instance.Description;
            retVal.EnrollmentMode = instance.EnrollmentMode;
            retVal.EligibilityCriteria = instance.EligibilityCriteria;
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActExtensionToDbActExtensionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ActExtension, SanteDB.Persistence.Data.Model.Extensibility.DbActExtension> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActExtensionToDbActExtensionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ActExtension);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbActExtension);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbActExtension instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbActExtension)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActExtension instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ActExtension)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbActExtension MapToTarget(SanteDB.Core.Model.DataTypes.ActExtension instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbActExtension);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbActExtension retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbActExtension();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.ExtensionTypeKey.HasValue) {
                retVal.ExtensionTypeKey = instance.ExtensionTypeKey.Value;
            }
            retVal.Value = instance.ExtensionValueData;
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ActExtension MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbActExtension instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ActExtension);
            }
            SanteDB.Core.Model.DataTypes.ActExtension retVal = new SanteDB.Core.Model.DataTypes.ActExtension();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.ExtensionTypeKey = instance.ExtensionTypeKey;
            retVal.ExtensionValueData = instance.Value;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActNoteToDbActNoteModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ActNote, SanteDB.Persistence.Data.Model.Extensibility.DbActNote> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActNoteToDbActNoteModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ActNote);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbActNote);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbActNote instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbActNote)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActNote instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ActNote)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbActNote MapToTarget(SanteDB.Core.Model.DataTypes.ActNote instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbActNote);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbActNote retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbActNote();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.Text = instance.Text;
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.AuthorKey.HasValue) {
                retVal.AuthorKey = instance.AuthorKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ActNote MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbActNote instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ActNote);
            }
            SanteDB.Core.Model.DataTypes.ActNote retVal = new SanteDB.Core.Model.DataTypes.ActNote();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Text = instance.Text;
            retVal.Key = instance.Key;
            retVal.AuthorKey = instance.AuthorKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActTagToDbActTagModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ActTag, SanteDB.Persistence.Data.Model.Extensibility.DbActTag> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActTagToDbActTagModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ActTag);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbActTag);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbActTag instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbActTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActTag instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ActTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbActTag MapToTarget(SanteDB.Core.Model.DataTypes.ActTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbActTag);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbActTag retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbActTag();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.TagKey = instance.TagKey;
            retVal.Value = instance.Value;
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ActTag MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbActTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ActTag);
            }
            SanteDB.Core.Model.DataTypes.ActTag retVal = new SanteDB.Core.Model.DataTypes.ActTag();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Key = instance.Key;
            retVal.CreatedByKey = instance.CreatedByKey;
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.TagKey = instance.TagKey;
            retVal.Value = instance.Value;
            return retVal;
        }
    }
    
    public sealed class ActRelationshipToDbActRelationshipModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ActRelationship, SanteDB.Persistence.Data.Model.Acts.DbActRelationship> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActRelationshipToDbActRelationshipModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.ActRelationship);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbActRelationship);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbActRelationship instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbActRelationship)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ActRelationship instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.ActRelationship)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbActRelationship MapToTarget(SanteDB.Core.Model.Acts.ActRelationship instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActRelationship);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActRelationship retVal = new SanteDB.Persistence.Data.Model.Acts.DbActRelationship();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.TargetActKey.HasValue) {
                retVal.TargetKey = instance.TargetActKey.Value;
            }
            if (instance.RelationshipTypeKey.HasValue) {
                retVal.RelationshipTypeKey = instance.RelationshipTypeKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ClassificationKey.HasValue) {
                retVal.ClassificationKey = instance.ClassificationKey.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.NegationIndicator.HasValue) {
                retVal.NegationIndicator = instance.NegationIndicator.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.ActRelationship MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActRelationship instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.ActRelationship);
            }
            SanteDB.Core.Model.Acts.ActRelationship retVal = new SanteDB.Core.Model.Acts.ActRelationship();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.TargetActKey = instance.TargetKey;
            retVal.RelationshipTypeKey = instance.RelationshipTypeKey;
            retVal.Key = instance.Key;
            if (instance.ClassificationKey.HasValue) {
                retVal.ClassificationKey = instance.ClassificationKey.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            retVal.NegationIndicator = instance.NegationIndicator;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActIdentifierToDbActIdentifierModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ActIdentifier, SanteDB.Persistence.Data.Model.DataType.DbActIdentifier> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActIdentifierToDbActIdentifierModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ActIdentifier);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.DataType.DbActIdentifier);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.DataType.DbActIdentifier instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.DataType.DbActIdentifier)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ActIdentifier instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ActIdentifier)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.DataType.DbActIdentifier MapToTarget(SanteDB.Core.Model.DataTypes.ActIdentifier instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.DataType.DbActIdentifier);
            }
            SanteDB.Persistence.Data.Model.DataType.DbActIdentifier retVal = new SanteDB.Persistence.Data.Model.DataType.DbActIdentifier();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.Value = instance.Value;
            if (instance.IdentifierTypeKey.HasValue) {
                retVal.TypeKey = instance.IdentifierTypeKey.Value;
            }
            if (instance.IdentityDomainKey.HasValue) {
                retVal.IdentityDomainKey = instance.IdentityDomainKey.Value;
            }
            if (instance.IssueDate.HasValue) {
                retVal.IssueDate = instance.IssueDate.Value.DateTime;
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = instance.ExpiryDate.Value.DateTime;
            }
            retVal.CheckDigit = instance.CheckDigit;
            retVal.Reliability = instance.Reliability;
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ActIdentifier MapToSource(SanteDB.Persistence.Data.Model.DataType.DbActIdentifier instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ActIdentifier);
            }
            SanteDB.Core.Model.DataTypes.ActIdentifier retVal = new SanteDB.Core.Model.DataTypes.ActIdentifier();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Value = instance.Value;
            if (instance.TypeKey.HasValue) {
                retVal.IdentifierTypeKey = instance.TypeKey.Value;
            }
            retVal.IdentityDomainKey = instance.IdentityDomainKey;
            if (instance.IssueDate.HasValue) {
                retVal.IssueDate = ((System.DateTimeOffset)(instance.IssueDate.Value));
            }
            if (instance.ExpiryDate.HasValue) {
                retVal.ExpiryDate = ((System.DateTimeOffset)(instance.ExpiryDate.Value));
            }
            retVal.CheckDigit = instance.CheckDigit;
            retVal.Reliability = instance.Reliability;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActParticipationToDbActParticipationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ActParticipation, SanteDB.Persistence.Data.Model.Acts.DbActParticipation> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActParticipationToDbActParticipationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.ActParticipation);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbActParticipation);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbActParticipation instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbActParticipation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ActParticipation instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.ActParticipation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbActParticipation MapToTarget(SanteDB.Core.Model.Acts.ActParticipation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActParticipation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActParticipation retVal = new SanteDB.Persistence.Data.Model.Acts.DbActParticipation();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ParticipationRoleKey.HasValue) {
                retVal.ParticipationRoleKey = instance.ParticipationRoleKey.Value;
            }
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            if (instance.PlayerEntityKey.HasValue) {
                retVal.TargetKey = instance.PlayerEntityKey.Value;
            }
            if (instance.ClassificationKey.HasValue) {
                retVal.ClassificationKey = instance.ClassificationKey.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.ActParticipation MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActParticipation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.ActParticipation);
            }
            SanteDB.Core.Model.Acts.ActParticipation retVal = new SanteDB.Core.Model.Acts.ActParticipation();
            retVal.Key = instance.Key;
            retVal.ParticipationRoleKey = instance.ParticipationRoleKey;
            if (instance.Quantity.HasValue) {
                retVal.Quantity = instance.Quantity.Value;
            }
            retVal.PlayerEntityKey = instance.TargetKey;
            if (instance.ClassificationKey.HasValue) {
                retVal.ClassificationKey = instance.ClassificationKey.Value;
            }
            retVal.ExternalKey = instance.ExternalKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class SubstanceAdministrationToDbSubstanceAdministrationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.SubstanceAdministration, SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.SubstanceAdministration, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public SubstanceAdministrationToDbSubstanceAdministrationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.SubstanceAdministration);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.SubstanceAdministration instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.SubstanceAdministration)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration MapToTarget(SanteDB.Core.Model.Acts.SubstanceAdministration instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration);
            }
            SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration retVal = new SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.RouteKey.HasValue) {
                retVal.RouteConceptKey = instance.RouteKey.Value;
            }
            if (instance.DoseUnitKey.HasValue) {
                retVal.DoseUnitConceptKey = instance.DoseUnitKey.Value;
            }
            if (instance.SiteKey.HasValue) {
                retVal.SiteConceptKey = instance.SiteKey.Value;
            }
            retVal.DoseQuantity = instance.DoseQuantity;
            if (instance.SequenceId.HasValue) {
                retVal.SequenceId = instance.SequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.SubstanceAdministration MapToSource(SanteDB.Persistence.Data.Model.Acts.DbSubstanceAdministration instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.SubstanceAdministration);
            }
            SanteDB.Core.Model.Acts.SubstanceAdministration retVal = new SanteDB.Core.Model.Acts.SubstanceAdministration();
            retVal.VersionKey = instance.ParentKey;
            retVal.RouteKey = instance.RouteConceptKey;
            retVal.DoseUnitKey = instance.DoseUnitConceptKey;
            retVal.SiteKey = instance.SiteConceptKey;
            if (instance.DoseQuantity.HasValue) {
                retVal.DoseQuantity = instance.DoseQuantity.Value;
            }
            if (instance.SequenceId.HasValue) {
                retVal.SequenceId = instance.SequenceId.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.SubstanceAdministration, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.SubstanceAdministration instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.SubstanceAdministration SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.SubstanceAdministration, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.SubstanceAdministration);
            }
            SanteDB.Core.Model.Acts.SubstanceAdministration retVal = new SanteDB.Core.Model.Acts.SubstanceAdministration();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ProcedureToDbProcedureModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Procedure, SanteDB.Persistence.Data.Model.Acts.DbProcedure>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Procedure, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ProcedureToDbProcedureModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.Procedure);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbProcedure);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbProcedure instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbProcedure)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Procedure instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.Procedure)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbProcedure MapToTarget(SanteDB.Core.Model.Acts.Procedure instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbProcedure);
            }
            SanteDB.Persistence.Data.Model.Acts.DbProcedure retVal = new SanteDB.Persistence.Data.Model.Acts.DbProcedure();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.MethodKey.HasValue) {
                retVal.MethodConceptKey = instance.MethodKey.Value;
            }
            if (instance.ApproachSiteKey.HasValue) {
                retVal.ApproachSiteConceptKey = instance.ApproachSiteKey.Value;
            }
            if (instance.TargetSiteKey.HasValue) {
                retVal.TargetSiteConceptKey = instance.TargetSiteKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.Procedure MapToSource(SanteDB.Persistence.Data.Model.Acts.DbProcedure instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Procedure);
            }
            SanteDB.Core.Model.Acts.Procedure retVal = new SanteDB.Core.Model.Acts.Procedure();
            retVal.VersionKey = instance.ParentKey;
            if (instance.MethodConceptKey.HasValue) {
                retVal.MethodKey = instance.MethodConceptKey.Value;
            }
            if (instance.ApproachSiteConceptKey.HasValue) {
                retVal.ApproachSiteKey = instance.ApproachSiteConceptKey.Value;
            }
            if (instance.TargetSiteConceptKey.HasValue) {
                retVal.TargetSiteKey = instance.TargetSiteConceptKey.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Procedure, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.Procedure instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.Procedure SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Procedure, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Procedure);
            }
            SanteDB.Core.Model.Acts.Procedure retVal = new SanteDB.Core.Model.Acts.Procedure();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class PatientEncounterToDbPatientEncounterModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.PatientEncounter, SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.PatientEncounter, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PatientEncounterToDbPatientEncounterModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.PatientEncounter);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.PatientEncounter instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.PatientEncounter)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter MapToTarget(SanteDB.Core.Model.Acts.PatientEncounter instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter);
            }
            SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter retVal = new SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.DischargeDispositionKey.HasValue) {
                retVal.DischargeDispositionKey = instance.DischargeDispositionKey.Value;
            }
            if (instance.AdmissionSourceTypeKey.HasValue) {
                retVal.AdmissionSourceTypeKey = instance.AdmissionSourceTypeKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.PatientEncounter MapToSource(SanteDB.Persistence.Data.Model.Acts.DbPatientEncounter instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.PatientEncounter);
            }
            SanteDB.Core.Model.Acts.PatientEncounter retVal = new SanteDB.Core.Model.Acts.PatientEncounter();
            retVal.VersionKey = instance.ParentKey;
            retVal.DischargeDispositionKey = instance.DischargeDispositionKey;
            retVal.AdmissionSourceTypeKey = instance.AdmissionSourceTypeKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.PatientEncounter, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.PatientEncounter instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.PatientEncounter SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.PatientEncounter, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.PatientEncounter);
            }
            SanteDB.Core.Model.Acts.PatientEncounter retVal = new SanteDB.Core.Model.Acts.PatientEncounter();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class PatientEncounterArrangementToDbPatientEncounterArrangementModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.PatientEncounterArrangement, SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public PatientEncounterArrangementToDbPatientEncounterArrangementModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.PatientEncounterArrangement);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.PatientEncounterArrangement instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.PatientEncounterArrangement)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement MapToTarget(SanteDB.Core.Model.Acts.PatientEncounterArrangement instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement);
            }
            SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement retVal = new SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ArrangementTypeKey.HasValue) {
                retVal.ArrangementTypeKey = instance.ArrangementTypeKey.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.PatientEncounterArrangement MapToSource(SanteDB.Persistence.Data.Model.Acts.DbPatientEncounterArrangement instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.PatientEncounterArrangement);
            }
            SanteDB.Core.Model.Acts.PatientEncounterArrangement retVal = new SanteDB.Core.Model.Acts.PatientEncounterArrangement();
            retVal.Key = instance.Key;
            retVal.ArrangementTypeKey = instance.ArrangementTypeKey;
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ObservationToDbObservationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Observation, SanteDB.Persistence.Data.Model.Acts.DbObservation>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Observation, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ObservationToDbObservationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.Observation);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbObservation);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbObservation instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Observation instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.Observation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbObservation MapToTarget(SanteDB.Core.Model.Acts.Observation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbObservation();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.InterpretationConceptKey.HasValue) {
                retVal.InterpretationConceptKey = instance.InterpretationConceptKey.Value;
            }
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.Observation MapToSource(SanteDB.Persistence.Data.Model.Acts.DbObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Observation);
            }
            SanteDB.Core.Model.Acts.Observation retVal = new SanteDB.Core.Model.Acts.Observation();
            retVal.VersionKey = instance.ParentKey;
            retVal.InterpretationConceptKey = instance.InterpretationConceptKey;
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Observation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.Observation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.Observation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Observation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Observation);
            }
            SanteDB.Core.Model.Acts.Observation retVal = new SanteDB.Core.Model.Acts.Observation();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class QuantityObservationToDbQuantityObservationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public QuantityObservationToDbQuantityObservationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.QuantityObservation);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.QuantityObservation instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.QuantityObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation MapToTarget(SanteDB.Core.Model.Acts.QuantityObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation();
            if (instance.UnitOfMeasureKey.HasValue) {
                retVal.UnitOfMeasureKey = instance.UnitOfMeasureKey.Value;
            }
            if (instance.Value.HasValue) {
                retVal.Value = instance.Value.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.QuantityObservation MapToSource(SanteDB.Persistence.Data.Model.Acts.DbQuantityObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.QuantityObservation);
            }
            SanteDB.Core.Model.Acts.QuantityObservation retVal = new SanteDB.Core.Model.Acts.QuantityObservation();
            retVal.UnitOfMeasureKey = instance.UnitOfMeasureKey;
            retVal.Value = instance.Value;
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.QuantityObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.QuantityObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.QuantityObservation);
            }
            SanteDB.Core.Model.Acts.QuantityObservation retVal = new SanteDB.Core.Model.Acts.QuantityObservation();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation>.MapToTarget(SanteDB.Core.Model.Acts.QuantityObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbObservation();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.InterpretationConceptKey.HasValue) {
                retVal.InterpretationConceptKey = instance.InterpretationConceptKey.Value;
            }
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.QuantityObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.QuantityObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.QuantityObservation);
            }
            SanteDB.Core.Model.Acts.QuantityObservation retVal = new SanteDB.Core.Model.Acts.QuantityObservation();
            retVal.VersionKey = instance.ParentKey;
            retVal.InterpretationConceptKey = instance.InterpretationConceptKey;
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
    }
    
    public sealed class CodedObservationToDbCodedObservationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbCodedObservation>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public CodedObservationToDbCodedObservationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.CodedObservation);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbCodedObservation);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbCodedObservation instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbCodedObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.CodedObservation instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.CodedObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbCodedObservation MapToTarget(SanteDB.Core.Model.Acts.CodedObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbCodedObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbCodedObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbCodedObservation();
            if (instance.ValueKey.HasValue) {
                retVal.Value = instance.ValueKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.CodedObservation MapToSource(SanteDB.Persistence.Data.Model.Acts.DbCodedObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.CodedObservation);
            }
            SanteDB.Core.Model.Acts.CodedObservation retVal = new SanteDB.Core.Model.Acts.CodedObservation();
            retVal.ValueKey = instance.Value;
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.CodedObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.CodedObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.CodedObservation);
            }
            SanteDB.Core.Model.Acts.CodedObservation retVal = new SanteDB.Core.Model.Acts.CodedObservation();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation>.MapToTarget(SanteDB.Core.Model.Acts.CodedObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbObservation();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.InterpretationConceptKey.HasValue) {
                retVal.InterpretationConceptKey = instance.InterpretationConceptKey.Value;
            }
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.CodedObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.CodedObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.CodedObservation);
            }
            SanteDB.Core.Model.Acts.CodedObservation retVal = new SanteDB.Core.Model.Acts.CodedObservation();
            retVal.VersionKey = instance.ParentKey;
            retVal.InterpretationConceptKey = instance.InterpretationConceptKey;
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
    }
    
    public sealed class TextObservationToDbTextObservationModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbTextObservation>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public TextObservationToDbTextObservationModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.TextObservation);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbTextObservation);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbTextObservation instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbTextObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.TextObservation instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.TextObservation)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbTextObservation MapToTarget(SanteDB.Core.Model.Acts.TextObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbTextObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbTextObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbTextObservation();
            retVal.Value = instance.Value;
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.TextObservation MapToSource(SanteDB.Persistence.Data.Model.Acts.DbTextObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.TextObservation);
            }
            SanteDB.Core.Model.Acts.TextObservation retVal = new SanteDB.Core.Model.Acts.TextObservation();
            retVal.Value = instance.Value;
            retVal.VersionKey = instance.ParentKey;
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.TextObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.TextObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.TextObservation);
            }
            SanteDB.Core.Model.Acts.TextObservation retVal = new SanteDB.Core.Model.Acts.TextObservation();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation>.MapToTarget(SanteDB.Core.Model.Acts.TextObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbObservation);
            }
            SanteDB.Persistence.Data.Model.Acts.DbObservation retVal = new SanteDB.Persistence.Data.Model.Acts.DbObservation();
            if (instance.VersionKey.HasValue) {
                retVal.ParentKey = instance.VersionKey.Value;
            }
            if (instance.InterpretationConceptKey.HasValue) {
                retVal.InterpretationConceptKey = instance.InterpretationConceptKey.Value;
            }
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.TextObservation SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.TextObservation, SanteDB.Persistence.Data.Model.Acts.DbObservation>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbObservation instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.TextObservation);
            }
            SanteDB.Core.Model.Acts.TextObservation retVal = new SanteDB.Core.Model.Acts.TextObservation();
            retVal.VersionKey = instance.ParentKey;
            retVal.InterpretationConceptKey = instance.InterpretationConceptKey;
            retVal.ValueType = instance.ValueType;
            return retVal;
        }
    }
    
    public sealed class TemplateDefinitionToDbTemplateDefinitionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.TemplateDefinition, SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public TemplateDefinitionToDbTemplateDefinitionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.TemplateDefinition);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.TemplateDefinition instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.TemplateDefinition)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition MapToTarget(SanteDB.Core.Model.DataTypes.TemplateDefinition instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.Oid = instance.Oid;
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Description = instance.Description;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.TemplateDefinition MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbTemplateDefinition instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.TemplateDefinition);
            }
            SanteDB.Core.Model.DataTypes.TemplateDefinition retVal = new SanteDB.Core.Model.DataTypes.TemplateDefinition();
            retVal.Key = instance.Key;
            retVal.Oid = instance.Oid;
            retVal.Name = instance.Name;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Description = instance.Description;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ProtocolToDbProtocolModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.Protocol, SanteDB.Persistence.Data.Model.Acts.DbProtocol> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ProtocolToDbProtocolModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.Protocol);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbProtocol);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbProtocol instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbProtocol)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.Protocol instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.Protocol)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbProtocol MapToTarget(SanteDB.Core.Model.Acts.Protocol instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbProtocol);
            }
            SanteDB.Persistence.Data.Model.Acts.DbProtocol retVal = new SanteDB.Persistence.Data.Model.Acts.DbProtocol();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.Name = instance.Name;
            retVal.Oid = instance.Oid;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.Protocol MapToSource(SanteDB.Persistence.Data.Model.Acts.DbProtocol instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.Protocol);
            }
            SanteDB.Core.Model.Acts.Protocol retVal = new SanteDB.Core.Model.Acts.Protocol();
            retVal.Key = instance.Key;
            retVal.Name = instance.Name;
            retVal.Oid = instance.Oid;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ControlActToDbControlActModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ControlAct, SanteDB.Persistence.Data.Model.Acts.DbControlAct>, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ControlAct, SanteDB.Persistence.Data.Model.Acts.DbActVersion> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ControlActToDbControlActModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.ControlAct);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbControlAct);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbControlAct instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbControlAct)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ControlAct instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.ControlAct)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbControlAct MapToTarget(SanteDB.Core.Model.Acts.ControlAct instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbControlAct);
            }
            SanteDB.Persistence.Data.Model.Acts.DbControlAct retVal = new SanteDB.Persistence.Data.Model.Acts.DbControlAct();
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.ControlAct MapToSource(SanteDB.Persistence.Data.Model.Acts.DbControlAct instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.ControlAct);
            }
            SanteDB.Core.Model.Acts.ControlAct retVal = new SanteDB.Core.Model.Acts.ControlAct();
            return retVal;
        }
        
        SanteDB.Persistence.Data.Model.Acts.DbActVersion SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ControlAct, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToTarget(SanteDB.Core.Model.Acts.ControlAct instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActVersion);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActVersion retVal = new SanteDB.Persistence.Data.Model.Acts.DbActVersion();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            if (instance.ClassConceptKey.HasValue) {
                retVal.ClassConceptKey = instance.ClassConceptKey.Value;
            }
            if (instance.MoodConceptKey.HasValue) {
                retVal.MoodConceptKey = instance.MoodConceptKey.Value;
            }
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            if (instance.StatusConceptKey.HasValue) {
                retVal.StatusConceptKey = instance.StatusConceptKey.Value;
            }
            if (instance.TypeConceptKey.HasValue) {
                retVal.TypeConceptKey = instance.TypeConceptKey.Value;
            }
            if (instance.VersionKey.HasValue) {
                retVal.VersionKey = instance.VersionKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequence.HasValue) {
                retVal.VersionSequenceId = instance.VersionSequence.Value;
            }
            if (instance.PreviousVersionKey.HasValue) {
                retVal.ReplacesVersionKey = instance.PreviousVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        SanteDB.Core.Model.Acts.ControlAct SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ControlAct, SanteDB.Persistence.Data.Model.Acts.DbActVersion>.MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActVersion instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.ControlAct);
            }
            SanteDB.Core.Model.Acts.ControlAct retVal = new SanteDB.Core.Model.Acts.ControlAct();
            if (instance.TemplateKey.HasValue) {
                retVal.TemplateKey = instance.TemplateKey.Value;
            }
            retVal.ClassConceptKey = instance.ClassConceptKey;
            retVal.MoodConceptKey = instance.MoodConceptKey;
            retVal.IsNegated = instance.IsNegated;
            if (instance.ActTime.HasValue) {
                retVal.ActTime = instance.ActTime.Value;
            }
            if (instance.StartTime.HasValue) {
                retVal.StartTime = instance.StartTime.Value;
            }
            if (instance.StopTime.HasValue) {
                retVal.StopTime = instance.StopTime.Value;
            }
            if (instance.ReasonConceptKey.HasValue) {
                retVal.ReasonConceptKey = instance.ReasonConceptKey.Value;
            }
            if (instance.ObsoletionReasonKey.HasValue) {
                retVal.ObsoletionReasonKey = instance.ObsoletionReasonKey.Value;
            }
            retVal.StatusConceptKey = instance.StatusConceptKey;
            retVal.TypeConceptKey = instance.TypeConceptKey;
            retVal.VersionKey = instance.VersionKey;
            retVal.Key = instance.Key;
            if (instance.GeoTagKey.HasValue) {
                retVal.GeoTagKey = instance.GeoTagKey.Value;
            }
            if (instance.VersionSequenceId.HasValue) {
                retVal.VersionSequence = instance.VersionSequenceId.Value;
            }
            if (instance.ReplacesVersionKey.HasValue) {
                retVal.PreviousVersionKey = instance.ReplacesVersionKey.Value;
            }
            retVal.IsHeadVersion = instance.IsHeadVersion;
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ActProtocolToDbActProtocolModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.Acts.ActProtocol, SanteDB.Persistence.Data.Model.Acts.DbActProtocol> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ActProtocolToDbActProtocolModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.Acts.ActProtocol);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Acts.DbActProtocol);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Acts.DbActProtocol instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Acts.DbActProtocol)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.Acts.ActProtocol instance;
            try {
                instance = ((SanteDB.Core.Model.Acts.ActProtocol)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Acts.DbActProtocol MapToTarget(SanteDB.Core.Model.Acts.ActProtocol instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Acts.DbActProtocol);
            }
            SanteDB.Persistence.Data.Model.Acts.DbActProtocol retVal = new SanteDB.Persistence.Data.Model.Acts.DbActProtocol();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.ProtocolKey.HasValue) {
                retVal.ProtocolKey = instance.ProtocolKey.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            retVal.State = instance.StateData;
            retVal.Sequence = instance.Sequence;
            retVal.Version = instance.Version;
            return retVal;
        }
        
        public SanteDB.Core.Model.Acts.ActProtocol MapToSource(SanteDB.Persistence.Data.Model.Acts.DbActProtocol instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.Acts.ActProtocol);
            }
            SanteDB.Core.Model.Acts.ActProtocol retVal = new SanteDB.Core.Model.Acts.ActProtocol();
            retVal.Key = instance.Key;
            retVal.ProtocolKey = instance.ProtocolKey;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.StateData = instance.State;
            retVal.Sequence = instance.Sequence;
            retVal.Version = instance.Version;
            return retVal;
        }
    }
    
    public sealed class ConceptExtensionToDbConceptExtensionModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptExtension, SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptExtensionToDbConceptExtensionModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptExtension);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptExtension instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptExtension)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension MapToTarget(SanteDB.Core.Model.DataTypes.ConceptExtension instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.ExtensionTypeKey.HasValue) {
                retVal.ExtensionTypeKey = instance.ExtensionTypeKey.Value;
            }
            retVal.Value = instance.ExtensionValueData;
            if (instance.EffectiveVersionSequenceId.HasValue) {
                retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId.Value;
            }
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptExtension MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbConceptExtension instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptExtension);
            }
            SanteDB.Core.Model.DataTypes.ConceptExtension retVal = new SanteDB.Core.Model.DataTypes.ConceptExtension();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.ExtensionTypeKey = instance.ExtensionTypeKey;
            retVal.ExtensionValueData = instance.Value;
            retVal.EffectiveVersionSequenceId = instance.EffectiveVersionSequenceId;
            if (instance.ObsoleteVersionSequenceId.HasValue) {
                retVal.ObsoleteVersionSequenceId = instance.ObsoleteVersionSequenceId.Value;
            }
            return retVal;
        }
    }
    
    public sealed class ConceptTagToDbConceptTagModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Model.DataTypes.ConceptTag, SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public ConceptTagToDbConceptTagModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Model.DataTypes.ConceptTag);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Model.DataTypes.ConceptTag instance;
            try {
                instance = ((SanteDB.Core.Model.DataTypes.ConceptTag)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag MapToTarget(SanteDB.Core.Model.DataTypes.ConceptTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag);
            }
            SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag retVal = new SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag();
            if (instance.SourceEntityKey.HasValue) {
                retVal.SourceKey = instance.SourceEntityKey.Value;
            }
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.TagKey = instance.TagKey;
            retVal.Value = instance.Value;
            return retVal;
        }
        
        public SanteDB.Core.Model.DataTypes.ConceptTag MapToSource(SanteDB.Persistence.Data.Model.Extensibility.DbConceptTag instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Model.DataTypes.ConceptTag);
            }
            SanteDB.Core.Model.DataTypes.ConceptTag retVal = new SanteDB.Core.Model.DataTypes.ConceptTag();
            retVal.SourceEntityKey = instance.SourceKey;
            retVal.Key = instance.Key;
            retVal.CreatedByKey = instance.CreatedByKey;
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            retVal.TagKey = instance.TagKey;
            retVal.Value = instance.Value;
            return retVal;
        }
    }
    
    public sealed class NotificationTemplateToDbNotificationTemplateModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Notifications.NotificationTemplate, SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NotificationTemplateToDbNotificationTemplateModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Notifications.NotificationTemplate);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Notifications.NotificationTemplate instance;
            try {
                instance = ((SanteDB.Core.Notifications.NotificationTemplate)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate MapToTarget(SanteDB.Core.Notifications.NotificationTemplate instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate);
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate retVal = new SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.StatusKey = instance.StatusKey;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Name = instance.Name;
            retVal.Tags = instance.Tags;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Notifications.NotificationTemplate MapToSource(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplate instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Notifications.NotificationTemplate);
            }
            SanteDB.Core.Notifications.NotificationTemplate retVal = new SanteDB.Core.Notifications.NotificationTemplate();
            retVal.Key = instance.Key;
            retVal.StatusKey = instance.StatusKey;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Name = instance.Name;
            retVal.Tags = instance.Tags;
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class NotificationInstanceToDbNotificationInstanceModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Notifications.NotificationInstance, SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NotificationInstanceToDbNotificationInstanceModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Notifications.NotificationInstance);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Notifications.NotificationInstance instance;
            try {
                instance = ((SanteDB.Core.Notifications.NotificationInstance)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance MapToTarget(SanteDB.Core.Notifications.NotificationInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance);
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance retVal = new SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            retVal.NotificationTemplateKey = instance.NotificationTemplateKey;
            retVal.EntityTypeKey = instance.EntityTypeKey;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Name = instance.Name;
            retVal.StateKey = instance.StateKey;
            retVal.Description = instance.Description;
            retVal.FilterExpression = instance.FilterExpression;
            retVal.TriggerExpression = instance.TriggerExpression;
            retVal.TargetExpression = instance.TargetExpression;
            if (instance.LastSentAt.HasValue) {
                retVal.LastSentAt = instance.LastSentAt.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            if (instance.CreatedByKey.HasValue) {
                retVal.CreatedByKey = instance.CreatedByKey.Value;
            }
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
        
        public SanteDB.Core.Notifications.NotificationInstance MapToSource(SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstance instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Notifications.NotificationInstance);
            }
            SanteDB.Core.Notifications.NotificationInstance retVal = new SanteDB.Core.Notifications.NotificationInstance();
            retVal.Key = instance.Key;
            retVal.NotificationTemplateKey = instance.NotificationTemplateKey;
            retVal.EntityTypeKey = instance.EntityTypeKey;
            retVal.Mnemonic = instance.Mnemonic;
            retVal.Name = instance.Name;
            retVal.StateKey = instance.StateKey;
            retVal.Description = instance.Description;
            retVal.FilterExpression = instance.FilterExpression;
            retVal.TriggerExpression = instance.TriggerExpression;
            retVal.TargetExpression = instance.TargetExpression;
            if (instance.LastSentAt.HasValue) {
                retVal.LastSentAt = instance.LastSentAt.Value;
            }
            if (instance.UpdatedByKey.HasValue) {
                retVal.UpdatedByKey = instance.UpdatedByKey.Value;
            }
            if (instance.UpdatedTime.HasValue) {
                retVal.UpdatedTime = instance.UpdatedTime.Value;
            }
            retVal.CreatedByKey = instance.CreatedByKey;
            if (instance.ObsoletedByKey.HasValue) {
                retVal.ObsoletedByKey = instance.ObsoletedByKey.Value;
            }
            retVal.CreationTime = instance.CreationTime;
            if (instance.ObsoletionTime.HasValue) {
                retVal.ObsoletionTime = instance.ObsoletionTime.Value;
            }
            return retVal;
        }
    }
    
    public sealed class NotificationTemplateContentsToDbNotificationTemplateContentsModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Notifications.NotificationTemplateContents, SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NotificationTemplateContentsToDbNotificationTemplateContentsModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Notifications.NotificationTemplateContents);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Notifications.NotificationTemplateContents instance;
            try {
                instance = ((SanteDB.Core.Notifications.NotificationTemplateContents)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents MapToTarget(SanteDB.Core.Notifications.NotificationTemplateContents instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents);
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents retVal = new SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.NotificationTemplateKey = instance.SourceEntityKey.Value;
            }
            retVal.Language = instance.Language;
            retVal.Subject = instance.Subject;
            retVal.Body = instance.Body;
            return retVal;
        }
        
        public SanteDB.Core.Notifications.NotificationTemplateContents MapToSource(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateContents instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Notifications.NotificationTemplateContents);
            }
            SanteDB.Core.Notifications.NotificationTemplateContents retVal = new SanteDB.Core.Notifications.NotificationTemplateContents();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.NotificationTemplateKey;
            retVal.Language = instance.Language;
            retVal.Subject = instance.Subject;
            retVal.Body = instance.Body;
            return retVal;
        }
    }
    
    public sealed class NotificationTemplateParameterToDbNotificationTemplateParameterModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Notifications.NotificationTemplateParameter, SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NotificationTemplateParameterToDbNotificationTemplateParameterModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Notifications.NotificationTemplateParameter);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Notifications.NotificationTemplateParameter instance;
            try {
                instance = ((SanteDB.Core.Notifications.NotificationTemplateParameter)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter MapToTarget(SanteDB.Core.Notifications.NotificationTemplateParameter instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter);
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter retVal = new SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.NotificationTemplateKey = instance.SourceEntityKey.Value;
            }
            retVal.Name = instance.Name;
            retVal.Description = instance.Description;
            return retVal;
        }
        
        public SanteDB.Core.Notifications.NotificationTemplateParameter MapToSource(SanteDB.Persistence.Data.Model.Notifications.DbNotificationTemplateParameter instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Notifications.NotificationTemplateParameter);
            }
            SanteDB.Core.Notifications.NotificationTemplateParameter retVal = new SanteDB.Core.Notifications.NotificationTemplateParameter();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.NotificationTemplateKey;
            retVal.Name = instance.Name;
            retVal.Description = instance.Description;
            return retVal;
        }
    }
    
    public sealed class NotificationInstanceParameterToDbNotificationInstanceParameterModelMapper : SanteDB.Core.Model.Map.Builder.IModelMapper, SanteDB.Core.Model.Map.Builder.IModelMapper<SanteDB.Core.Notifications.NotificationInstanceParameter, SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter> {
        
        private SanteDB.Core.Model.Map.ModelMapper m_mapper;
        
        public NotificationInstanceParameterToDbNotificationInstanceParameterModelMapper(SanteDB.Core.Model.Map.ModelMapper mapper) {
            this.m_mapper = mapper;
        }
        
        public System.Type SourceType {
            get {
                return typeof(SanteDB.Core.Notifications.NotificationInstanceParameter);
            }
        }
        
        public System.Type TargetType {
            get {
                return typeof(SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter);
            }
        }
        
        public object MapToSource(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter instance;
            try {
                instance = ((SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToSource(instance);
        }
        
        public object MapToTarget(object o) {
            if ((o == null)) {
                throw new System.ArgumentNullException("o");
            }
            SanteDB.Core.Notifications.NotificationInstanceParameter instance;
            try {
                instance = ((SanteDB.Core.Notifications.NotificationInstanceParameter)(o));
            }
            catch (System.Exception e) {
                throw new System.ArgumentException("instance", string.Format("Expected instance of {0}", o.GetType()), e);
            }
            return this.MapToTarget(instance);
        }
        
        public SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter MapToTarget(SanteDB.Core.Notifications.NotificationInstanceParameter instance) {
            if ((instance == null)) {
                return default(SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter);
            }
            SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter retVal = new SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter();
            if (instance.Key.HasValue) {
                retVal.Key = instance.Key.Value;
            }
            if (instance.SourceEntityKey.HasValue) {
                retVal.NotificationInstanceKey = instance.SourceEntityKey.Value;
            }
            retVal.TemplateParameterName = instance.ParameterName;
            retVal.Expression = instance.Expression;
            return retVal;
        }
        
        public SanteDB.Core.Notifications.NotificationInstanceParameter MapToSource(SanteDB.Persistence.Data.Model.Notifications.DbNotificationInstanceParameter instance) {
            if ((instance == null)) {
                return default(SanteDB.Core.Notifications.NotificationInstanceParameter);
            }
            SanteDB.Core.Notifications.NotificationInstanceParameter retVal = new SanteDB.Core.Notifications.NotificationInstanceParameter();
            retVal.Key = instance.Key;
            retVal.SourceEntityKey = instance.NotificationInstanceKey;
            retVal.ParameterName = instance.TemplateParameterName;
            retVal.Expression = instance.Expression;
            return retVal;
        }
    }
}
