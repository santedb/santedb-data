/*
 * Copyright (C) 2021 - 2024, SanteSuite Inc. and the SanteSuite Contributors (See NOTICE.md for full copyright notices)
 * Copyright (C) 2019 - 2021, Fyfe Software Inc. and the SanteSuite Contributors
 * Portions Copyright (C) 2015-2018 Mohawk College of Applied Arts and Technology
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you 
 * may not use this file except in compliance with the License. You may 
 * obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 * License for the specific language governing permissions and limitations under 
 * the License.
 * 
 */
using SanteDB.Client.Disconnected.Data.Synchronization;
using SanteDB.OrmLite.Attributes;
using System;

namespace SanteDB.Persistence.Synchronization.ADO.Model
{
    /// <summary>
    /// Represents a single queue entry in the queue
    /// </summary>
    [Table("sync_q_ent_systbl")]
    public class DbSynchronizationQueueEntry
    {

        /// <summary>
        /// Sequence identifier for the queue entry
        /// </summary>
        [Column("seq_id"), NotNull, PrimaryKey, AutoGenerated]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the unique key for the entry (for the benefit of the user)
        /// </summary>
        [Column("cor_id"), PrimaryKey, NotNull]
        public Guid CorrelationKey { get; set; }

        /// <summary>
        /// Represents the time that the queue entry was created
        /// </summary>
        [Column("crt_utc"), NotNull, AutoGenerated]
        public DateTimeOffset CreationTime { get; set; }

        /// <summary>
        /// Gets or sets the queue to which the entry belongs
        /// </summary>
        [Column("q_id"), ForeignKey(typeof(DbSynchronizationQueue), nameof(DbSynchronizationQueue.Key)), NotNull]
        public Guid QueueKey { get; set; }

        /// <summary>
        /// Gets or sets the resource type of synchronization 
        /// </summary>
        [Column("typ"), NotNull]
        public String ResourceType { get; set; }

        /// <summary>
        /// Gets or sets the datafile key
        /// </summary>
        [Column("df"), NotNull]
        public Guid DataFileKey { get; set; }

        /// <summary>
        /// Content type of the data in the <see cref="DataFileKey"/>
        /// </summary>
        [Column("cty"), NotNull]
        public String ContentType { get; set; }

        /// <summary>
        /// Gets or sets the original operation
        /// </summary>
        [Column("op"), NotNull]
        public SynchronizationQueueEntryOperation Operation { get; set; }

        /// <summary>
        /// Gets or sets the retry count
        /// </summary>
        [Column("retry")]
        public int? RetryCount { get; set; }

    }

    /// <summary>
    /// Deadletter entry
    /// </summary>
    [Table("sync_q_ent_dl_systbl")]
    public class DbSynchronizationDeadLetterQueueEntry
    {

        /// <summary>
        /// Sequence identifier
        /// </summary>
        [PrimaryKey, Column("seq_id"), NotNull, ForeignKey(typeof(DbSynchronizationQueueEntry), nameof(DbSynchronizationQueueEntry.Id))]
        public long Id { get; set; }

        /// <summary>
        /// Original queue entry
        /// </summary>
        [Column("orig_q"), NotNull, ForeignKey(typeof(DbSynchronizationQueue), nameof(DbSynchronizationQueue.Key))]
        public Guid OriginalQueue { get; set; }

        /// <summary>
        /// Gets or sets the reason / rational for the entry being placed into the queue
        /// </summary>
        [Column("rsn")]
        public String Reason { get; set; }
    }
}
